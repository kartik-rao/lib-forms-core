{"version":3,"sources":["webpack:///./src/views/ColumnView.tsx","webpack:///./src/views/FieldView.tsx","webpack:///./src/views/FormHeaderView.tsx","webpack:///./src/views/FormView.tsx","webpack:///./src/views/PageView.tsx","webpack:///./src/views/SectionView.tsx"],"names":["ColumnView","props","Error","className","column","uuid","id","span","bordered","fields","map","field","key","CascaderView","then","module","default","CheckboxGroupView","CheckboxView","DatePickerView","DateRangeView","HtmlFragmentView","InputView","NumberView","RadioGroupView","RadioView","SelectView","SliderView","StarRatingView","SwitchView","TextAreaView","TextBlockView","TransferView","FieldView","store","onChange","e","value","target","setValue","onBlur","setTouched","inputType","type","fieldClass","labelAlign","itemLayoutOptions","form","itemLayout","fallback","isDisabled","Item","label","hasFeedback","touched","errors","validateStatus","wrapperCol","labelCol","layout","help","helpText","required","isRequired","FormHeaderView","style","marginBottom","border","title","subTitle","subtitle","extra","showSteps","currentPage","get","suffix","numPages","desc","FormView","height","overflow","content","formLayoutOptions","isReady","onSubmit","handleSubmit","Content","overflowY","backgroundColor","page","pages","Footer","padding","width","marginTop","textAlign","disabled","Object","keys","length","isValid","isSubmitting","marginLeft","htmlType","onClick","nextPage","prevPage","PageView","showPageTitles","sections","section","sn","SectionView","numColumns","columns","showSectionBorders","showSectionTitles","size","gutter"],"mappings":"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","file":"core.chunk.js","sourcesContent":["import { Card, Col } from \"antd\";\nimport { observer, useObserver } from \"mobx-react\";\nimport * as React from \"react\";\nimport { Column } from \"../models/column\";\nimport { Field } from \"../models/field\";\n// import { FormStore } from \"../store/FormStore\";\nimport { FieldView } from \"./FieldView\";\nimport { formStoreContext } from '../store/FormStoreProvider';\n\n// export interface ColumnProps {\n//     column: Column;\n//     store: FormStore;\n//     span: number\n// }\n\nexport const ColumnView: React.FC<{column: Column, key: string, span: number}> = (props) => {\n    const store = React.useContext(formStoreContext);\n    if(!store) throw new Error(\"Store is  null\");\n    return useObserver(() => {\n        return <div className=\"fl-col\" data-uuid={props.column.uuid} id={`fl-col-${props.column.id}`}>\n        <Col span={props.column.span ? props.column.span : props.span}>\n            <Card bordered={false}>\n                {props.column.fields.map((field: Field) => {\n                    return <FieldView field={field} key={field.uuid}></FieldView>\n                })}\n            </Card>\n        </Col>\n    </div>\n    });\n}\n\n// @observer\n// export class ColumnView extends React.Component<ColumnProps, any> {\n//     props: ColumnProps;\n\n//     constructor(props: ColumnProps) {\n//         super(props);\n//         this.props = props;\n//     }\n\n//     render() {\n//         let {store, column} = this.props;\n//         const { fields } = column;\n//         return <div className=\"fl-col\" data-uuid={column.uuid} id={`fl-col-${column.id}`}>\n//             <Col span={column.span ? column.span : this.props.span}>\n//                 <Card bordered={false}>\n//                     {fields.map((field: Field) => {\n//                         return <FieldView field={field} store={store} key={field.uuid}></FieldView>\n//                     })}\n//                 </Card>\n//             </Col>\n//         </div>;\n//     }\n// }","import { Form } from \"antd\";\nimport { useObserver } from \"mobx-react\";\nimport * as React from \"react\";\nimport { Field } from \"../models/field\";\nimport { IItemLayoutOptions } from '../models/layout';\nimport { formStoreContext } from '../store/FormStoreProvider';\n\n// import { CascaderView } from \"./controls/CascaderView\";\n// import { CheckboxGroupView } from \"./controls/CheckboxGroupView\";\n// import { CheckboxView } from \"./controls/CheckboxView\";\n// import { DatePickerView } from \"./controls/DatePickerView\";\n// import { DateRangeView } from \"./controls/DateRangeView\";\n// import { HtmlFragmentView } from './controls/HtmlFragmentView';\n// import { InputView } from \"./controls/InputView\";\n// import { NumberView } from \"./controls/NumberView\";\n// import { RadioGroupView } from \"./controls/RadioGroupView\";\n// import { RadioView } from './controls/RadioView';\n// import { SelectView } from \"./controls/SelectView\";\n// import { SliderView } from \"./controls/SliderView\";\n// import { StarRatingView } from \"./controls/StarRatingView\";\n// import { SwitchView } from \"./controls/SwitchView\";\n// import { TextAreaView } from \"./controls/TextAreaView\";\n// import { TextBlockView } from \"./controls/TextBlockView\";\n// import { TransferView } from \"./controls/TransferView\";\n\nconst CascaderView = React.lazy(() => import(/* webpackChunkName: \"cascader\" */ './controls/CascaderView').then((module) => {return {default: module.CascaderView}}));\nconst CheckboxGroupView = React.lazy(() => import(/* webpackChunkName: \"checkboxgroup\" */ './controls/CheckboxGroupView').then((module) => {return {default: module.CheckboxGroupView}}));\nconst CheckboxView = React.lazy(() => import(/* webpackChunkName: \"checkbox\" */ './controls/CheckboxView').then((module) => {return {default: module.CheckboxView}}));\nconst DatePickerView = React.lazy(() => import(/* webpackChunkName: \"datepicker\" */ './controls/DatePickerView').then((module) => {return {default: module.DatePickerView}}));\nconst DateRangeView = React.lazy(() => import(/* webpackChunkName: \"daterange\" */ './controls/DateRangeView').then((module) => {return {default: module.DateRangeView}}));\nconst HtmlFragmentView = React.lazy(() => import(/* webpackChunkName: \"htmlfragment\" */ './controls/HtmlFragmentView').then((module) => {return {default: module.HtmlFragmentView}}));\nconst InputView = React.lazy(() => import(/* webpackChunkName: \"input\" */ './controls/InputView').then((module) => {return {default: module.InputView}}));\nconst NumberView = React.lazy(() => import(/* webpackChunkName: \"number\" */ './controls/NumberView').then((module) => {return {default: module.NumberView}}));\nconst RadioGroupView = React.lazy(() => import(/* webpackChunkName: \"radiogroup\" */ './controls/RadioGroupView').then((module) => {return {default: module.RadioGroupView}}));\nconst RadioView = React.lazy(() => import(/* webpackChunkName: \"radio\" */ './controls/RadioView').then((module) => {return {default: module.RadioView}}));\nconst SelectView = React.lazy(() => import(/* webpackChunkName: \"select\" */ './controls/SelectView').then((module) => {return {default: module.SelectView}}));\nconst SliderView = React.lazy(() => import(/* webpackChunkName: \"slider\" */ './controls/SliderView').then((module) => {return {default: module.SliderView}}));\nconst StarRatingView = React.lazy(() => import(/* webpackChunkName: \"starrating\" */ './controls/StarRatingView').then((module) => {return {default: module.StarRatingView}}));\nconst SwitchView = React.lazy(() => import(/* webpackChunkName: \"switch\" */ './controls/SwitchView').then((module) => {return {default: module.SwitchView}}));\nconst TextAreaView = React.lazy(() => import(/* webpackChunkName: \"textarea\" */ './controls/TextAreaView').then((module) => {return {default: module.TextAreaView}}));\nconst TextBlockView = React.lazy(() => import(/* webpackChunkName: \"textblock\" */ './controls/TextBlockView').then((module) => {return {default: module.TextBlockView}}));\nconst TransferView = React.lazy(() => import(/* webpackChunkName: \"transfer\" */ './controls/TransferView').then((module) => {return {default: module.TransferView}}));\n\n\nexport const FieldView: React.FC<{field: Field, key: string}> = (props) => {\n    const store = React.useContext(formStoreContext);\n    if(!store) throw new Error(\"ERROR FieldView - store is null\");\n\n    let onChange = (e) => {\n        let value = e && typeof(e) == 'object' && e.target ? e.target.value: e;\n        props.field.setValue(value);\n    };\n\n    let onBlur = () => props.field.setTouched();\n    let {id, inputType, type } = props.field;\n\n    // Some fields only have inputtype\n    let fieldClass = inputType == type ? inputType : (type ? `${inputType}-${type}` : `${inputType}`);\n\n    // labelCol should only be passed if form is horizontal\n    // otherwise the control does not go to the next line\n    // Allow field item layout options to override form layout options\n\n    let labelAlign = props.field.itemLayoutOptions.labelAlign || store.form.itemLayoutOptions.labelAlign || 'left';\n    let itemLayout: IItemLayoutOptions = props.field.itemLayoutOptions || store.form.itemLayoutOptions || {};\n\n    return useObserver(() => {\n        return  <React.Suspense fallback=\"loading...\"><div id={`fl-field-${props.field.id}`} data-uuid={props.field.uuid} className={`fl-field fl-field-${fieldClass}`}>\n        { !props.field.isDisabled && <Form.Item label={props.field.label} labelAlign={labelAlign}\n        hasFeedback={store.touched[id] && store.errors[id] ? true : null}\n        validateStatus={store.touched[id] && store.errors[id] ?  \"error\" : \"validating\"}\n        wrapperCol={itemLayout.wrapperCol}\n        labelCol={store.form.layout == \"horizontal\" ? itemLayout.labelCol : null}\n        // extra={props.field.helpText}\n        help={store.touched[id] ? (store.errors[id] ? store.errors[id] : props.field.helpText): ''}\n        required={props.field.isRequired}>\n            {inputType == \"input\" && <InputView field={props.field} onChange={onChange} onBlur={onBlur}/>}\n            {inputType == \"radio\" && <RadioView field={props.field} onChange={onChange} />}\n            {inputType == \"checkbox\" && <CheckboxView field={props.field} onChange={onChange}  />}\n            {inputType == \"number\" && <NumberView field={props.field} onChange={onChange} onBlur={onBlur}  />}\n            {inputType == \"select\" && <SelectView field={props.field} onChange={onChange} onBlur={onBlur}  />}\n            {inputType == \"cascader\" && <CascaderView field={props.field}  onChange={onChange} />}\n            {inputType == \"radiogroup\" && <RadioGroupView field={props.field} onChange={onChange}  />}\n            {inputType == \"checkboxgroup\" && <CheckboxGroupView field={props.field} onChange={onChange}   />}\n            {inputType == \"textarea\" && <TextAreaView field={props.field} onChange={onChange}/>}\n            {inputType == \"daterange\" && <DateRangeView field={props.field}  onChange={onChange} />}\n            {inputType == \"datepicker\" && <DatePickerView field={props.field}  onChange={onChange} />}\n            {inputType == \"monthpicker\" && <DatePickerView field={props.field} onChange={onChange} />}\n            {inputType == \"timepicker\" && <DatePickerView field={props.field}  onChange={onChange} />}\n            {inputType == \"yearpicker\" && <DatePickerView field={props.field}  onChange={onChange} />}\n            {inputType == 'starrating' && <StarRatingView field={props.field} onChange={onChange} />}\n            {inputType == 'switch' && <SwitchView field={props.field} onChange={onChange} />}\n            {inputType == 'transfer' && <TransferView field={props.field} onChange={onChange} />}\n            {inputType == 'slider' && <SliderView field={props.field} onChange={onChange}/>}\n            {inputType == \"textblock\" && <TextBlockView field={props.field} onChange={onChange}/>}\n            {inputType == \"htmlfragment\" && <HtmlFragmentView field={props.field}/>}\n            </Form.Item> }\n    </div></React.Suspense>\n    });\n}\n\n// @observer\n// export class FieldView extends React.Component<IFieldViewProps, any> {\n//     props: IFieldViewProps\n//     constructor(props: IFieldViewProps) {\n//         super(props);\n//         this.props = props;\n//     }\n\n//     render() {\n//         const { field, store } = this.props;\n//         const { layout } = store.form;\n//         const { form } = store;\n\n//         let onChange = (e) => {\n//             let value = e && typeof(e) == 'object' && e.target ? e.target.value: e;\n//             field.setValue(value);\n//         };\n\n//         let onBlur = () => field.setTouched();\n//         let {id, inputType, type } = field;\n\n//         // Some fields only have inputtype\n//         let fieldClass = inputType == type ? inputType : (type ? `${inputType}-${type}` : `${inputType}`);\n\n//         // labelCol should only be passed if form is horizontal\n//         // otherwise the control does not go to the next line\n//         // Allow field item layout options to override form layout options\n\n//         let labelAlign = field.itemLayoutOptions.labelAlign || form.itemLayoutOptions.labelAlign || 'left';\n//         let itemLayout: IItemLayoutOptions = field.itemLayoutOptions || form.itemLayoutOptions || {};\n\n//         return <div id={`fl-field-${field.id}`} data-uuid={field.uuid} className={`fl-field fl-field-${fieldClass}`}>\n//             { !field.isDisabled && <Form.Item label={field.label} labelAlign={labelAlign}\n//             hasFeedback={store.touched[id] && store.errors[id] ? true : null}\n//             validateStatus={store.touched[id] && store.errors[id] ?  \"error\" : \"validating\"}\n//             wrapperCol={itemLayout.wrapperCol}\n//             labelCol={layout == \"horizontal\" ? itemLayout.labelCol : null}\n//             extra={field.helpText}\n//             help={store.touched[id] ? (store.errors[id] ? store.errors[id] : field.helpText): ''}\n//             required={field.isRequired}>\n//                 {inputType == \"input\" && <InputView field={props.field} onChange={onChange} onBlur={onBlur}/>}\n//                 {inputType == \"radio\" && <RadioView field={props.field} onChange={onChange} />}\n//                 {inputType == \"checkbox\" && <CheckboxView field={props.field} onChange={onChange}  />}\n//                 {inputType == \"number\" && <NumberView field={props.field} onChange={onChange} onBlur={onBlur}  />}\n//                 {inputType == \"select\" && <SelectView field={props.field} onChange={onChange} onBlur={onBlur}  />}\n//                 {inputType == \"cascader\" && <CascaderView field={props.field}  onChange={onChange} />}\n//                 {inputType == \"radiogroup\" && <RadioGroupView field={props.field} onChange={onChange}  />}\n//                 {inputType == \"checkboxgroup\" && <CheckboxGroupView field={props.field} onChange={onChange}   />}\n//                 {inputType == \"textarea\" && <TextAreaView field={props.field} onChange={onChange}/>}\n//                 {inputType == \"daterange\" && <DateRangeView field={props.field}  onChange={onChange} />}\n//                 {inputType == \"datepicker\" && <DatePickerView field={props.field}  onChange={onChange} />}\n//                 {inputType == \"monthpicker\" && <DatePickerView field={props.field} onChange={onChange} />}\n//                 {inputType == \"timepicker\" && <DatePickerView field={props.field}  onChange={onChange} />}\n//                 {inputType == \"yearpicker\" && <DatePickerView field={props.field}  onChange={onChange} />}\n//                 {inputType == 'starrating' && <StarRatingView field={props.field} onChange={onChange} />}\n//                 {inputType == 'switch' && <SwitchView field={props.field} onChange={onChange} />}\n//                 {inputType == 'transfer' && <TransferView field={props.field} onChange={onChange} />}\n//                 {inputType == 'slider' && <SliderView field={props.field} onChange={onChange}/>}\n//                 {inputType == \"textblock\" && <TextBlockView field={props.field} onChange={onChange}/>}\n//                 {inputType == \"htmlfragment\" && <HtmlFragmentView field={props.field}/>}\n//                 </Form.Item> }\n//         </div>\n//     }\n// }","import { Col, PageHeader, Row, Statistic } from \"antd\";\nimport * as React from \"react\";\nimport { observer, useObserver } from 'mobx-react';\nimport { formStoreContext } from '../store/FormStoreProvider';\n\nexport const FormHeaderView : React.FC<{desc: string, title: string, subtitle: string, showSteps: boolean, currentPage: number, numPages: number}> = (props) => {\n    const store = React.useContext(formStoreContext);\n    if(!store) throw new Error(\"Store is  null\");\n    return useObserver(() => {\n        return <div className=\"fl-shadow-bottom\" style={{ marginBottom: '2px'}}>\n            <PageHeader className=\"fl-ph\" style={{'minHeight': '68px', border: 'none'}} title={props.title} subTitle={props.subtitle}\n                extra={(props.showSteps && <div>\n                <Statistic title=\"Page\" value={store.currentPage.get() + 1} suffix={\"/ \" + store.numPages} />\n                </div>)} />\n            {props.title && <Row>\n                <Col span={24}>\n                    <div className=\"fl-ph-wrap\">\n                        <div className=\"fl-ph-content fl-ph-padding\">{props.desc}</div>\n                    </div>\n                </Col>\n            </Row>\n            }\n        </div>\n    });\n}\n// export interface IFormHeaderViewProps {\n//     desc: string;\n//     title: string;\n//     subtitle: string;\n//     showSteps: boolean;\n//     currentPage: number;\n//     numPages: number;\n// }\n\n// @observer\n// export class FormHeaderView extends React.Component<IFormHeaderViewProps, any> {\n//     render() {\n//         let {title, subtitle, desc, currentPage, numPages, showSteps} = this.props;\n\n//         return <div className=\"fl-shadow-bottom\" style={{ marginBottom: '2px'}}>\n//         <PageHeader className=\"fl-ph\" style={{'minHeight': '68px', border: 'none'}} title={title} subTitle={subtitle}\n//             extra={(showSteps && <div>\n//             <Statistic title=\"Page\" value={currentPage + 1} suffix={\"/ \" + numPages} />\n//             </div>)} />\n//         {title && <Row>\n//             <Col span={24}>\n//                 <div className=\"fl-ph-wrap\">\n//                     <div className=\"fl-ph-content fl-ph-padding\">{desc}</div>\n//                 </div>\n//             </Col>\n//         </Row>\n//         }\n//     </div>\n//     }\n\n// }","import { Button, Card, Col, Form, Icon, Layout, Row } from \"antd\";\nimport { useObserver } from \"mobx-react\";\nimport * as React from \"react\";\nimport { Page } from \"../models/page\";\nimport { formStoreContext } from '../store/FormStoreProvider';\nimport { FormHeaderView } from './FormHeaderView';\nimport { PageView } from \"./PageView\";\n\nexport const FormView : React.FC<any> = () => {\n    const store = React.useContext(formStoreContext);\n    if(!store) throw new Error(\"Store is  null\");\n    return useObserver(() => {\n        return <Layout style={{height: '100%', overflow: 'hidden'}} className=\"fl-form-container\">\n                <FormHeaderView title={store.form.content.title} subtitle={store.form.content.subtitle} desc={store.form.desc}\n                    currentPage={store.currentPage.get()} numPages={store.numPages} showSteps={store.form.formLayoutOptions.showSteps} />\n                <Layout style={{overflow: 'hidden', border: '1px solid #ededed'}}>\n                    {store.isReady.get() && <Form onSubmit={(e) => store.form.handleSubmit(e)} layout={store.form.layout} style={{height: '100%'}} wrapperCol={store.form.formLayoutOptions.wrapperCol} labelCol={store.form.formLayoutOptions.labelCol} labelAlign={store.form.formLayoutOptions.labelAlign}>\n                        <Layout.Content style={{overflowY: 'scroll', height: 'calc(100% - 68px)', backgroundColor: 'white' }}>\n                            <PageView page={store.form.content.pages[store.currentPage.get()] as Page}></PageView>\n                        </Layout.Content>\n                        <Layout.Footer style={{padding: '0px', width: '100%', marginTop:'1px'}}>\n                            <div className=\"fl-form-actions fl-shadow-top\">\n                                <Card bordered={false}>\n                                    <Row>\n                                        <Col span={24} style={{ textAlign: 'right' }}>\n                                            { store.currentPage.get() == store.numPages -1 && <Button disabled={Object.keys(store.touched).length == 0 || !store.isValid|| store.isSubmitting } type=\"primary\" style={{ marginLeft: 8 }} htmlType=\"submit\" className=\"action-button\">Submit</Button>}\n                                            { store.currentPage.get() < store.numPages -1 && <Button type=\"primary\" style={{ marginLeft: 8 }} className=\"action-button\" onClick={() => store.nextPage()}><Icon type=\"right\" />Next</Button> }\n                                            { store.currentPage.get() > 0 && store.numPages > 1 && <Button type=\"primary\" className=\"action-button\" onClick={() => store.prevPage()}><Icon type=\"left\" />Prev</Button> }\n                                        </Col>\n                                    </Row>\n                                </Card>\n                            </div>\n                        </Layout.Footer>\n                    </Form>}\n                </Layout>\n        </Layout>\n    });\n}\n\n\n\n// @observer\n// export class FormView extends React.Component<FormComponentProps, any> {\n//     props: FormComponentProps\n//     constructor(props: any) {\n//         super(props);\n//         this.props = props;\n//     }\n\n//     render() {\n//         const {store: formStore} = this.props;\n\n//         let {form, numPages} = formStore;\n//         let {store.form.content, formLayoutOptions} = form;\n//         let {currentPage, touched, isValid, isSubmitting} = formStore;\n\n//         return (\n//             <Layout style={{height: '100%', overflow: 'hidden'}} className=\"fl-form-container\">\n//                 <FormHeaderView title={store.form.content.title} subtitle={store.form.content.subtitle} desc={form.desc}\n//                     currentPage={formStore.currentPage} numPages={formStore.numPages} showSteps={formLayoutOptions.showSteps} />\n//                 <Layout style={{overflow: 'hidden', border: '1px solid #ededed'}}>\n//                     <Form onSubmit={(e) => form.handleSubmit(e)} layout={form.layout} style={{height: '100%'}} wrapperCol={formLayoutOptions.wrapperCol} labelCol={formLayoutOptions.labelCol} labelAlign={formLayoutOptions.labelAlign}>\n//                         <Layout.Content style={{overflowY: 'scroll', height: 'calc(100% - 68px)', backgroundColor: 'white' }}>\n//                             <PageView page={store.form.content.pages[currentPage] as Page} store={formStore}></PageView>\n//                         </Layout.Content>\n//                         <Layout.Footer style={{padding: '0px', width: '100%', marginTop:'1px'}}>\n//                             <div className=\"fl-form-actions fl-shadow-top\">\n//                                 <Card bordered={false}>\n//                                     <Row>\n//                                         <Col span={24} style={{ textAlign: 'right' }}>\n//                                             { currentPage == numPages -1 && <Button disabled={Object.keys(touched).length == 0 || !isValid || isSubmitting } type=\"primary\" style={{ marginLeft: 8 }} htmlType=\"submit\" className=\"action-button\">Submit</Button>}\n//                                             { currentPage < numPages -1 && <Button type=\"primary\" style={{ marginLeft: 8 }} className=\"action-button\" onClick={() => formStore.nextPage()}><Icon type=\"right\" />Next</Button> }\n//                                             { currentPage > 0 && numPages > 1 && <Button type=\"primary\" className=\"action-button\" onClick={() => formStore.prevPage()}><Icon type=\"left\" />Prev</Button> }\n//                                         </Col>\n//                                     </Row>\n//                                 </Card>\n//                             </div>\n//                         </Layout.Footer>\n//                     </Form>\n//                 </Layout>\n//         </Layout>\n//         )\n//     }\n// }\n\n\n","import { Card } from \"antd\";\nimport { observer, useObserver } from \"mobx-react\";\nimport * as React from \"react\";\nimport { Page } from \"../models/page\";\nimport { Section } from \"../models/section\";\n// import { FormStore } from \"../store/FormStore\";\nimport { SectionView } from \"./SectionView\";\nimport { formStoreContext } from '../store/FormStoreProvider';\n\n\n// export interface PageProps {\n//     store: FormStore;\n//     page: Page;\n// }\n\nexport const PageView: React.FC<{page: Page}> = (props) => {\n    const store = React.useContext(formStoreContext);\n    if(!store) throw new Error(\"Store is  null\");\n    if(!store) throw new Error(\"Store is  null\");\n    return useObserver(() => {\n        return <div className=\"fl-page-wrap\">\n        <Card style={{padding:\"0\"}} bordered={false} title={store.form.formLayoutOptions.showPageTitles ? props.page.title : ''}>\n            <div id={`fl-page-${props.page.id || store.currentPage}`} className=\"fl-page\" data-uuid={`fl-page-${props.page.uuid}`}>\n                {props.page.sections.map((section: Section, sn: number) => {\n                    return <SectionView key={section.uuid} section={section}></SectionView>\n                })}\n            </div>\n        </Card>\n    </div>\n    });\n}\n\n// @observer\n// export class PageView extends React.Component<PageProps, any> {\n\n//     state: any;\n//     props: PageProps;\n\n//     constructor(props: PageProps) {\n//         super(props);\n//         this.props = props;\n//     }\n\n//     render() {\n//         let {store, page} = this.props;\n//         let {showPageTitles} = store.form.formLayoutOptions;\n        // return <div className=\"fl-page-wrap\">\n        //     <Card style={{padding:\"0\"}} bordered={false} title={showPageTitles ? page.title : ''}>\n        //         <div id={`fl-page-${page.id || store.currentPage}`} className=\"fl-page\" data-uuid={`fl-page-${page.uuid}`}>\n        //             {page.sections.map((section: Section, sn: number) => {\n        //                 return <SectionView key={section.uuid} store={store} section={section}></SectionView>\n        //             })}\n        //         </div>\n        //     </Card>\n        // </div>\n//     }\n// }","import { Card, Row } from \"antd\";\nimport { observer, useObserver } from \"mobx-react\";\nimport * as React from \"react\";\nimport { Column } from \"../models/column\";\nimport { Section } from \"../models/section\";\n// import { FormStore } from \"../store/FormStore\";\nimport { ColumnView } from \"./ColumnView\";\nimport { formStoreContext } from '../store/FormStoreProvider';\n\n// export interface SectionProps {\n//     section: Section;\n//     store: FormStore;\n// }\n\nexport const SectionView: React.FC<{section: Section, key: string}> = (props) => {\n    const store = React.useContext(formStoreContext);\n    if(!store) throw new Error(\"Store is  null\");\n    const numColumns = props.section.columns.length;\n    let span = numColumns <= 1 ? 24 : 24 / numColumns;\n    return useObserver(() => {\n        return <div className=\"fl-section\" data-uuid={props.section.uuid} id={`fl-section-${props.section.id}`}>\n        <Card bordered={store.form.formLayoutOptions.showSectionBorders} title={store.form.formLayoutOptions.showSectionTitles ? props.section.title : \"\"} style={{padding: \"1px\"}} size=\"small\">\n            <Row gutter={props.section.gutter}>\n                {props.section.columns.map((column: Column) => {\n                    return <ColumnView key={column.uuid} column={column} span={span}/>\n                })}\n            </Row>\n        </Card>\n    </div>\n    });\n}\n\n// @observer\n// export class SectionView extends React.Component<SectionProps, any> {\n\n//     props: SectionProps;\n//     constructor(props: SectionProps) {\n//         super(props);\n//         this.props = props;\n//     }\n\n//     render() {\n//         let {store, section} = this.props;\n//         const numColumns = section.columns.length;\n//         let span = numColumns <= 1 ? 24 : 24 / numColumns;\n\n//         return <div className=\"fl-section\" data-uuid={section.uuid} id={`fl-section-${section.id}`}>\n//             <Card bordered={store.form.formLayoutOptions.showSectionBorders} title={store.form.formLayoutOptions.showSectionTitles ? section.title : \"\"} style={{padding: \"1px\"}} size=\"small\">\n//                 <Row gutter={section.gutter}>\n//                     {section.columns.map((column: Column) => {\n//                         return <ColumnView store={store} key={column.uuid} column={column} span={span}/>\n//                     })}\n//                 </Row>\n//             </Card>\n//         </div>\n//     }\n// }"],"sourceRoot":""}