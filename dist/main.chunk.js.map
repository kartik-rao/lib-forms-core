{"version":3,"sources":["webpack://Forms/./src/app.tsx","webpack://Forms/./src/config.ts","webpack://Forms/./src/models/column.ts","webpack://Forms/./src/models/common.ts","webpack://Forms/./src/models/condition.predicate.ts","webpack://Forms/./src/models/condition.ts","webpack://Forms/./src/models/factory.ts","webpack://Forms/./src/models/field.ts","webpack://Forms/./src/models/form.ts","webpack://Forms/./src/models/layout.ts","webpack://Forms/./src/models/page.ts","webpack://Forms/./src/models/section.ts","webpack://Forms/./src/models/validation.ts","webpack://Forms/./src/models/validator.ts","webpack://Forms/./src/store/FormStore.ts","webpack://Forms/./src/store/FormStoreProvider.tsx","webpack://Forms/external \"antd\"","webpack://Forms/external \"moment\"","webpack://Forms/external \"React\"","webpack://Forms/external \"ReactDOM\""],"names":["renderForm","selector","initialState","console","log","env","version","FormView","lazy","then","module","default","style","height","overflow","Suspense","fallback","document","querySelector","debug","hostname","Column","data","store","_type","this","initialize","fields","reduce","all","f","concat","validator","errors","every","i","isValid","id","uuid","length","field","index","splice","push","forEach","addField","index1","index2","atIndex","toIndex","map","asPlainObject","span","name","title","valueOrDefault","value","defaultValue","Predicate","operator","condition","PredicateConditions","indexOf","Error","PredicateOperators","Condition","predicates","p","ancestors","self","lhs","rhs","op","state","conditionsDisabled","currentValue","values","result","uuidv1","EmptyForm","description","formLayoutOptions","showPageTitles","showSteps","showSectionBorders","showPageBorders","showSectionTitles","validationDisablesPaging","layout","itemLayoutOptions","labelAlign","labelCol","offset","wrapperCol","content","subtitle","Factory","item","Math","random","toFixed","response","predicate","ensureIds","makePredicates","r","columns","c","makeFields","floor","column","sections","s","makeColumns","pages","page","makeSections","formData","form","makePages","_formData","Field","label","helpText","placeholder","fieldOptions","valuePropName","componentProps","type","inputType","Object","assign","validation","rule","storage","children","location","touched","setValue","setCondition","conditionState","validate","isValidateable","presence","setFieldValue","setFieldTouched","_dispose","change","setConditionState","newValue","clone","recurseEverything","detectCycles","JSON","stringify","Form","exid","labels","width","sidebar","scripts","styles","datasets","paginate","css","inline","external","header","rows","footer","trackingPixels","total","numFields","validTarget","stopSubmit","idFieldMap","uuidFieldMap","keys","submitTarget","errorRedirect","successRedirect","e","preventDefault","stopPropagation","setSubmitting","meta","payload","key","isSubmittable","a","post","catch","reason","submitError","setTimeout","window","href","dir","bound","AllScreenWidths","LayoutOption","props","filter","d","dimension","colspan","FormLayoutOptions","ItemLayoutOptions","Page","fieldNames","section","fieldIds","icon","Section","gutter","ValidationAllowedRules","ValidationRuleNames","ValidationRuleMap","ValidationRule","date","datetime","email","equality","exclusion","format","inclusion","numericality","url","settings","extend","validators","parse","options","utc","dateOnly","Validator","validationErrors","prefixedMessage","error","unPrefixedMessage","replace","attribute","toUpperCase","message","validationDisabled","isHidden","constraints","formatters","custom","formatError","bind","setFieldError","undefined","createFormStore","currentPage","isReady","submitting","numPages","isSubmitting","nextPage","prevPage","setForm","formStoreContext","FormStoreProvider","formStore","makeForm","Provider","exports","antd","moment","React","ReactDOM"],"mappings":"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","file":"main.chunk.js","sourcesContent":["import { Layout } from \"antd\";\nimport React from 'react';\nimport { render } from 'react-dom';\nimport \"./forms.core.m.css\";\nimport { FormStoreProvider } from \"./store/FormStoreProvider\";\nimport config from \"./config\";\n\nexport function renderForm(selector:string, initialState: any) {\n    console.log(`lib-forms-core [${config.env}] [${config.version}]`);\n    const FormView = React.lazy(() => import(/* webpackChunkName: \"core\" */ \"./views/FormView\").then((module) => {return {default: module.FormView}}));\n    render(\n        <Layout style={{height: '100vh', overflow: 'hidden'}}>\n            <React.Suspense fallback=\"Loading\">\n                <FormStoreProvider initialState={initialState}>\n                    <FormView />\n                </FormStoreProvider>\n            </React.Suspense>\n    </Layout>, document.querySelector(selector)\n    )\n};","declare var __DEBUG__   : boolean;\ndeclare var __ENV__     : string;\ndeclare var __VERSION__ : string;\ndeclare var __HOSTNAME__: string;\n\nexport default {\n    env: __ENV__,\n    debug: __DEBUG__,\n    version: __VERSION__,\n    hostname: __HOSTNAME__\n}","import { action, computed, observable, toJS } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { valueOrDefault } from \"./common\";\nimport { Field } from \"./field\";\nimport { IFieldProps } from \"./field.properties\";\nimport { IValidationError } from \"./validation\";\n\nexport interface IColumn {\n    id  :string;\n    uuid?:string;\n    _type?: string;\n    name?:string;\n    title?:string;\n    span?:number;\n    fields?: IFieldProps[];\n}\n\nexport class Column implements IColumn {\n    readonly _type : string = \"Column\";\n    @observable uuid: string;\n    @observable id: string;\n    @observable name: string;\n    @observable span: number;\n    @observable title: string;\n    @observable fields: Field[];\n    store: FormStoreType;\n\n    @computed get errors() : IValidationError[] {\n        return this.fields.reduce((all: any[], f: Field)=>{\n            return all.concat(f.validator.errors);\n        }, <any[]>[]);\n    }\n\n    @computed get isValid() : boolean {\n        return this.fields.every((f, i) => {\n            return f.isValid;\n        });\n    }\n\n    @computed get idFieldMap() : { [key:string]:Field; } {\n        return this.fields.reduce((all: {}, f: Field)=>{\n            all[f.id] = f;\n            return all;\n        }, {});\n    }\n\n    @computed get uuidFieldMap() : { [key:string]:Field; } {\n        return this.fields.reduce((all: {}, f: Field)=>{\n            all[f.uuid] = f;\n            return all;\n        }, {});\n    }\n\n    @computed get numFields() : number {\n        return this.fields.length;\n    }\n\n    @action addField(field: Field, index?: number) : void {\n        if (typeof index != 'undefined' && index != null && index > -1) {\n            this.fields.splice(index, 0, field);\n        } else {\n            this.fields.push(field);\n        }\n    }\n\n    @action addFields(...fields: Field[]) {\n        fields.forEach((f: Field) => this.addField(f));\n    }\n\n    @action removeField(index: number) {\n        this.fields.splice(index, 1)\n    }\n\n    @action swapFields(index1: number, index2: number): void {\n        let { fields } = this;\n        [fields[index1], fields[index2]] = [fields[index2], fields[index1]];\n    }\n\n    @action moveField(atIndex: number, toIndex: number) {\n        this.fields.splice(toIndex, 0, this.fields.splice(atIndex, 1)[0]);\n    }\n\n    constructor(data: IColumn, store) {\n        this.initialize(data, store);\n    }\n\n    @computed get asPlainObject() : IColumn {\n        let fields = this.fields ?  this.fields.map((f) => {\n            return f.asPlainObject\n        }) : [];\n        return {\n            ...toJS({id: this.id,uuid: this.uuid,span: this.span,name: this.name,title: this.title}),\n            fields: fields\n        };\n    }\n\n    @action initialize(data: IColumn, store: FormStoreType) {\n        this.uuid = data.uuid;\n        this.store = store;\n        this.id = data.id;\n        this.span = data.span;\n        this.name = valueOrDefault(data.name, `${this._type}-${data.id}`);\n        this.title = valueOrDefault(data.title, '');\n        this.fields = valueOrDefault(<Field[]>data.fields, <Field[]>[]);\n    }\n}","const uuidv1 = require('uuid/v1');\n\nexport function valueOrDefault<T>(value: T, defaultValue: T|null): T {\n    return (typeof(value) !== 'undefined' && value !== null ? value : defaultValue);\n}\n","import { action, observable } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\n\nexport interface IPredicate {\n    uuid?: string;\n    field: string;\n    condition: any;\n    value?: any;\n    operator?: string;\n}\n\nexport class Predicate implements IPredicate {\n    static readonly PredicateConditions = [\"eq\",  \"neq\",  \"gt\",  \"lt\", \"gteq\", \"lteq\", \"hasval\", \"nothasval\"];\n    static readonly PredicateOperators = [\"or\", \"and\"];\n    uuid: string;\n    @observable field: string;\n    @observable condition: string;\n    @observable value: any;\n    @observable operator: string = \"or\";\n    store: FormStoreType;\n\n    @action initialize(data: IPredicate, store: FormStoreType) {\n        if (!data.condition || Predicate.PredicateConditions.indexOf(data.condition) == -1) {\n            throw new Error(`InvalidPredicateCondition - ${data.condition}`);\n        }\n        if(data.operator && Predicate.PredicateOperators.indexOf(data.operator) == -1) {\n            throw new Error(`InvalidPredicateOperator - ${data.operator}`);\n        }\n        this.uuid = data.uuid;\n        this.store = store;\n        this.field = data.field;\n        this.condition = data.condition;\n        this.value = data.value;\n        this.operator = data.operator;\n    }\n\n    constructor(data:IPredicate, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n}","import { action, computed, observable, observe } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { IPredicate, Predicate } from \"./condition.predicate\";\n\nexport interface ICondition {\n    predicates: IPredicate[],\n    ancestors?: string[],\n}\n\nexport class Condition {\n    @observable predicates: Predicate[];\n    @observable ancestors?: string[];\n    store: FormStoreType;\n\n    @action initialize(data: ICondition, store: FormStoreType) {\n        let predicates : Predicate[] = [];\n        data.predicates.forEach((p: IPredicate)=> {\n            predicates.push(new Predicate(p, store));\n        })\n        this.predicates = predicates;\n        this.ancestors = [];\n        this.store = store;\n        let self = this;\n\n        this.predicates.forEach((p) => {\n            self.ancestors.push(p.field);\n        });\n    }\n\n    constructor(data: ICondition, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n\n    @action addPredicates(...p : IPredicate[]) {\n        p.forEach((p) => {\n            this.predicates.push(new Predicate(p, this.store));\n            this.ancestors.push(p.field);\n        });\n    }\n\n    reduce(lhs:any, rhs:any, op: string) : boolean {\n        if (op == 'and') {\n            return lhs && rhs;\n        } else {\n            return lhs || rhs;\n        }\n    }\n\n    @computed get value() : boolean {\n        var state: boolean;\n        let self = this;\n\n        if (self.store.conditionsDisabled || !this.predicates || this.predicates.length == 0){\n            return true;\n        }\n\n        this.predicates.forEach((p, i) => {\n            let currentValue = self.store.values[p.field];\n            var result: any = null;\n            switch(p.condition) {\n                case \"eq\":\n                    result = currentValue == p.value;\n                    break;\n                case \"neq\":\n                    result = currentValue != p.value;\n                    break;\n                case \"gt\":\n                    result = currentValue > p.value;\n                    break;\n                case \"lt\":\n                    result = currentValue < p.value;\n                    break;\n                case \"gteq\":\n                    result = currentValue >= p.value;\n                    break;\n                case \"lteq\":\n                    result = currentValue <= p.value;\n                    break;\n                case \"hasval\":\n                    result = typeof(currentValue) != 'undefined' && currentValue != null && currentValue !== \"\";\n                    break;\n                case \"nothasval\":\n                    result = typeof(currentValue) == 'undefined' || currentValue == null || currentValue == \"\";\n                    break;\n                default:\n                    result = false;\n            }\n            state = (i == 0) ? result : this.reduce(state, result, p.operator);\n        });\n        return state;\n    }\n}","import { FormStoreType } from \"../store/FormStore\";\nimport { Column, IColumn } from \"./column\";\nimport { Condition, ICondition } from \"./condition\";\nimport { IPredicate, Predicate } from \"./condition.predicate\";\nimport { Field } from \"./field\";\nimport { IFieldProps } from \"./field.properties\";\nimport { Form } from \"./form\";\nimport { IFormProps } from \"./form.properties\";\nimport { IPage, Page } from \"./page\";\nimport { ISection, Section } from \"./section\";\nconst uuidv1 = require('uuid/v1');\n\nexport const EmptyForm : IFormProps = {\n    id: null,\n    name: \"Untitled Form\",\n    description: \"Form description\",\n    formLayoutOptions : {\n        showPageTitles : true,\n        showSteps: true,\n        showSectionBorders: false,\n        showPageBorders: false,\n        showSectionTitles: false,\n        validationDisablesPaging: true\n    },\n    layout : \"vertical\",\n    itemLayoutOptions : {\n        labelAlign : \"left\",\n        labelCol : {\"xl\" : {offset:0, span: 8}},\n        wrapperCol : {\"xl\" : {offset:0, span: 16}}\n    },\n    content: {\n        title: \"Form title\",\n        subtitle: \"Form subtitle\"\n    }\n}\n\nexport class Factory {\n    static ensureIds<T>(item: T) {\n        if (!item['uuid']) {\n            item['uuid'] = uuidv1();\n        }\n\n        if(!item['id']) {\n            item['id'] = (1e6 * Math.random()).toFixed(0) + \"\";\n        }\n    }\n\n    static makePredicates(store: FormStoreType, ...predicates: IPredicate[]) : Predicate[] {\n        let response: Predicate[] = [];\n        predicates.forEach((predicate: IPredicate) => {\n            Factory.ensureIds(predicate);\n            response.push(new Predicate(predicate, store));\n        });\n        return response;\n\n    }\n\n    static makeCondition(store: FormStoreType, condition: ICondition) : Condition {\n        let predicates = Factory.makePredicates(store, ...condition.predicates);\n        return new Condition({predicates: predicates}, store);\n    }\n\n    static makeFields(store: FormStoreType, ...fields: IFieldProps[]) : Field[] {\n        if (!fields || fields.length == 0) {\n            return <Field[]>[];\n        }\n        return fields.reduce((r: Field[], f: IFieldProps) => {\n            Factory.ensureIds(f);\n            r.push(new Field({...f, condition: f.condition}, store));\n            return r;\n        }, <Field[]>[]);\n    }\n\n    static makeColumns(store: FormStoreType, ...columns: IColumn[]) : Column[] {\n        let response : Column[] = [];\n        if (!columns || columns.length == 0) {\n            return response;\n        }\n\n        columns.forEach((c: IColumn) => {\n            Factory.ensureIds(c);\n            let fields = c.fields && c.fields.length > 0 ? Factory.makeFields(store, ...c.fields) : <Field[]>[];\n            if (!c.span) {\n                c.span = Math.floor(24/columns.length);\n            }\n            let column = new Column({...c, fields: fields}, store);\n            response.push(column);\n        })\n        return response;\n    }\n\n    static makeSections(store: FormStoreType, ...sections: ISection[]) : Section[] {\n        let response: Section[] = [];\n        if (!sections || sections.length == 0) {\n            return <Section[]>[];\n        }\n        sections.forEach((s: ISection) => {\n            Factory.ensureIds(s);\n            let columns = s.columns && s.columns.length > 0 ? Factory.makeColumns(store, ...s.columns) : <Column[]>[];\n            response.push(new Section({...s, columns: columns}, store));\n        });\n        return response;\n    }\n\n    static makePages(store: FormStoreType, ...pages: IPage[]) : Page[] {\n        if (!pages || pages.length == 0) {\n            return <Page[]>[];\n        }\n        let response: Page[] = [];\n        pages.forEach((page: IPage) => {\n            Factory.ensureIds(page);\n            let sections = page.sections && page.sections.length > 0 ? Factory.makeSections(store, ...page.sections) : <Section[]>[];\n            response.push(new Page({...page, sections: sections}, store));\n        });\n        return response;\n    }\n\n    static makeForm(store: FormStoreType, formData: IFormProps) : Form {\n        let form: Form;\n        if (formData && formData.content && formData.content.pages) {\n            formData.content.pages = Factory.makePages(store, ...formData.content.pages)\n            form = new Form(formData, store);\n        } else {\n            let _formData = formData ? formData : {id: null, content: {pages: []}}\n            form = new Form(_formData, store);\n        }\n        return form;\n    }\n}","import { action, computed, observable, observe, toJS, autorun } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { Condition, ICondition } from \"./condition\";\nimport { IFieldOptions } from \"./field.options\";\nimport { IComponentProps, IFieldProps, IFieldRuntimeProps, IFieldStorage } from \"./field.properties\";\nimport { ItemLayoutOptions } from './layout';\nimport { IValidationRule, ValidationRule } from \"./validation\";\nimport { Validator } from \"./validator\";\nimport { observer } from 'mobx-react-lite';\n\n\nexport class Field implements IFieldProps, IFieldRuntimeProps {\n    readonly _type : string = \"Field\";\n    uuid: string;\n    @observable id: string;\n    @observable name: string;\n\n    @observable type: string;\n    @observable label: string;\n    @observable value : any;\n    @observable touched: boolean;\n    @observable inputType: string;\n    @observable helpText: string;\n    @observable placeholder: string;\n    fieldOptions: IFieldOptions;\n    children: any;\n    @observable condition: Condition;\n    @observable storage: IFieldStorage;\n    store: FormStoreType;\n    @observable location: any;\n    @observable conditionState: boolean;\n    @observable validator : Validator;\n    validation: IValidationRule;\n    @observable componentProps: IComponentProps;\n    @observable itemLayoutOptions : ItemLayoutOptions;\n    _dispose : any;\n\n    @action mergeUpdate(data: Partial<IFieldProps>) {\n        this.id = data.id ? data.id : this.id;\n        this.name = data.name;\n        this.label = data.label;\n        this.helpText = data.helpText;\n        this.placeholder = data.placeholder;\n        let {fieldOptions} = data;\n        this.fieldOptions = {...this.fieldOptions, ...{valuePropName: fieldOptions ? fieldOptions.valuePropName : this.fieldOptions.valuePropName}};\n        this.componentProps = <IComponentProps>{...this.componentProps, ...data.componentProps};\n        return;\n    }\n\n    @action initialize(data: IFieldProps, store: FormStoreType) {\n        this.store = store;\n        this.id = data.id;\n        this.uuid = data.uuid;\n        this.name = data.name || `${this._type}_${data.id}`;\n        this.type = data.type;\n        this.label = data.label;\n        this.inputType = data.inputType;\n        this.fieldOptions = data.fieldOptions ? Object.assign({id: data.id}, {...data.fieldOptions}) : {id: data.id};\n        this.fieldOptions.valuePropName = (data.fieldOptions||{}).valuePropName || this.name;\n        this.validation = data.validation;\n        this.validator = new Validator({rule: new ValidationRule(data.validation), field: this, store: store});\n        this.storage = data.storage;\n        this.label = data.label;\n        this.helpText = data.helpText;\n        this.placeholder = data.placeholder;\n        this.children = data.children || {};\n        this.componentProps = data.componentProps || {};\n        this.location = data.location || {};\n        this.touched = false;\n        this.itemLayoutOptions = new ItemLayoutOptions(data.itemLayoutOptions);\n\n        if (this.componentProps && this.componentProps['defaultValue']) {\n            this.setValue(this.componentProps['defaultValue']);\n        } else if (this.componentProps && this.componentProps['defaultChecked']) {\n            this.setValue(this.componentProps['defaultChecked']);\n        }\n\n        if (!this.fieldOptions.valuePropName) {\n            this.fieldOptions.valuePropName = `${this.id}_value`;\n        }\n\n        if(this.inputType == 'daterange') {\n            this.componentProps[\"startValuePropsName\"] = !!this.componentProps[\"startValuePropsName\"] ? this.componentProps[\"startValuePropsName\"] : `start_date`;\n            this.componentProps[\"endValuePropsName\"] = !!this.componentProps[\"endValuePropsName\"] ? this.componentProps[\"endValuePropsName\"] : `end_date`;\n        }\n\n        if (data.condition) {\n            this.setCondition(data.condition);\n        } else {\n            this.condition = null;\n            this.conditionState = true;\n        }\n        this.validate();\n        return;\n    }\n\n    @computed get className() : string {\n        return `.fl-field .fl-${this.inputType}${this.type?'-'+this.type:''}`;\n    }\n\n    @computed get isTouched() : boolean {\n        return this.store.touched[this.id];\n    }\n\n    @computed get isValidateable() {\n        return this.validator.isValidateable;\n    }\n\n    @computed get isValid() : boolean {\n        return this.validator.isValid;\n    }\n\n    @computed get isHidden() : boolean {\n        return this.inputType == \"hidden\";\n    }\n\n    @computed get isRequired() : boolean {\n        return !!this.validator.rule.presence;\n    }\n\n    @computed get currentValue() {\n        return this.value\n    }\n\n    @computed get isDisabled() : boolean {\n        return !this.conditionState;\n    }\n\n    @action setValue(value: any) {\n        this.value = value;\n        this.store.setFieldValue(this.id, value);\n        this.validate();\n    }\n\n    @action setTouched() {\n        this.touched = true;\n        this.store.setFieldTouched(this.id);\n        this.validate();\n    }\n\n    @action setConditionState(value: boolean) {\n        this.conditionState = value;\n        this.validate();\n    }\n\n    @action setCondition(condition: ICondition) {\n        if(condition == null || !condition.predicates || condition.predicates.length == 0) {\n            this.condition = null;\n            this.conditionState = true;\n            if(this._dispose) {\n                this._dispose();\n            }\n            this.validate();\n            return;\n        }\n\n        this.condition = new Condition(condition, this.store);\n        this.conditionState = this.condition.value;\n\n        this._dispose = observe(this.condition, \"value\", (change) => {\n            this.setConditionState(change.newValue)\n            if(change.newValue == true) {\n                this.validate();\n            }\n        }, true);\n    }\n\n    @action validate() {\n\n       this.validator.validate();\n    }\n\n    @computed get asPlainObject() : IFieldProps {\n        let clone = {...this};\n        delete clone.store;\n        delete clone.validator;\n        clone.value = null;\n        clone.conditionState = false;\n        return toJS(clone, {recurseEverything: true, detectCycles: true});\n    }\n\n    @computed get serialize(): string  {\n        let clone = this.asPlainObject;\n        return JSON.stringify(clone);\n    }\n\n    constructor(data: IFieldProps, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n}","import axios from \"axios\";\nimport { action, computed, observable, toJS } from \"mobx\";\nimport { FormEvent } from \"react\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { valueOrDefault } from \"./common\";\nimport { Field } from \"./field\";\nimport { IFormContent, IFormProps, IFormStatus, IFormTenant } from \"./form.properties\";\nimport { FormLayoutOptions, ItemLayoutOptions } from './layout';\nimport {Page} from \"./page\";\nimport { IValidationError } from \"./validation\";\n\n\nexport class Form implements IFormProps {\n    store: FormStoreType\n    uuid: string;\n\n    @observable id: string;\n    @observable exid: string;\n    @observable description: string;\n    @observable name: string;\n    @observable tenant: IFormTenant;\n    @observable status: IFormStatus;\n    @observable content: IFormContent;\n    @observable layout: any;\n    @observable stopSubmit: boolean;\n    @observable submitTarget: string;\n    @observable submitError: string;\n    @observable formLayoutOptions: FormLayoutOptions;\n    @observable itemLayoutOptions: ItemLayoutOptions;\n    @observable successRedirect: string;\n    @observable errorRedirect: string;\n\n    @action initialize(data: IFormProps, store: FormStoreType) {\n        this.store = store;\n        this.id = data.id;\n        this.name = data.name;\n        this.uuid = data.uuid;\n        this.exid = valueOrDefault(data.exid, null);\n        this.description = valueOrDefault(data.description, null);\n\n        if (data.content) {\n            this.content = {\n                title: valueOrDefault(data.content.title, null),\n                subtitle: valueOrDefault(data.content.subtitle, null),\n                labels: valueOrDefault(data.content.labels, null),\n                offset: valueOrDefault(data.content.offset, null),\n                width: valueOrDefault(data.content.width, null),\n                sidebar: valueOrDefault(data.content.sidebar, null),\n                scripts: valueOrDefault(data.content.scripts, null),\n                styles: valueOrDefault(data.content.styles, null),\n                datasets: valueOrDefault(data.content.datasets, null),\n                pages: valueOrDefault(<Page[]>data.content.pages, []),\n                paginate: valueOrDefault(data.content.paginate, false)\n            }\n            if (data.content.css) {\n                this.content.css = {\n                    inline : valueOrDefault(data.content.css.inline, []),\n                    external: valueOrDefault(data.content.css.external, [])\n                }\n            } else {\n                this.content.css = {inline: null, external: null}\n            }\n            if (data.content.header) {\n                this.content.header = {\n                    rows: valueOrDefault(data.content.header.rows, [])\n                }\n            } else {\n                this.content.header = {rows: []}\n            }\n\n            if (data.content.footer) {\n                this.content.footer = {\n                    rows: valueOrDefault(data.content.footer.rows, [])\n                }\n            } else {\n                this.content.footer = {rows: []}\n            }\n\n            if (data.content.trackingPixels) {\n                this.content.trackingPixels = data.content.trackingPixels;\n            } else {\n                this.content.trackingPixels = []\n            }\n        } else {\n            this.content = {\n                title: null,\n                subtitle: null,\n                labels: null,\n                offset: null,\n                width: null,\n                sidebar: null,\n                scripts: [],\n                styles: [],\n                datasets: [],\n                pages: [],\n                paginate: true\n            }\n            this.content.css = {inline: null, external: null}\n            this.content.header = {rows: []}\n            this.content.footer = {rows: []}\n            this.content.trackingPixels = [];\n        }\n\n        this.layout = valueOrDefault(data.layout, \"vertical\");\n        this.formLayoutOptions = new FormLayoutOptions(data.formLayoutOptions);\n        this.itemLayoutOptions = new ItemLayoutOptions(data.itemLayoutOptions);\n    }\n\n    constructor(data: IFormProps, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n\n    @computed get isValid() : boolean {\n        return this.content.pages.every((p: Page) => {\n            return p.isValid;\n        })\n    }\n\n    @computed get numPages() : number {\n        return this.content.pages.length;\n    }\n\n    @computed get numFields() : number {\n        return this.content.pages.reduce((total: number, p: Page) => {\n            return total + p.numFields;\n        }, 0);\n    }\n\n    @action addPage(p : Page, index?: number) {\n        if (typeof index != 'undefined' && index != null && index > -1) {\n            this.content.pages.splice(index, 0, p);\n        } else {\n            this.content.pages.push(p)\n        }\n    }\n\n    @action removePage(index: number) : void {\n        this.content.pages.splice(index, 1);\n    }\n\n    @action swapPages(index1: number, index2: number): void {\n        let { pages } = this.content;\n        [pages[index1], pages[index2]] = [pages[index2], pages[index1]];\n    }\n\n    @action movePage(atIndex: number, toIndex: number) : void {\n        this.content.pages.splice(toIndex, 0, this.content.pages.splice(atIndex, 1)[0]);\n    }\n\n    @computed get isSubmittable() : boolean {\n        let validTarget =  !!this.stopSubmit ?  !this.stopSubmit : true\n        return this.errors.length == 0 && validTarget;\n    }\n\n    @computed get idFieldMap() : { [key:string]:Field; }  {\n        return this.content.pages.reduce((all: {}, s: Page)=>{\n            return {...all, ...s.idFieldMap}\n        }, {});\n    }\n\n    @computed get uuidFieldMap() : { [key:string]:Field; }  {\n        return this.content.pages.reduce((all: {}, s: Page)=>{\n            return {...all, ...s.uuidFieldMap}\n        }, {});\n    }\n\n    @computed get errors() : IValidationError[] {\n        return this.content.pages.reduce((all: any[], p: Page)=>{\n            return all.concat(p.errors);\n        }, <any[]>[]);\n    }\n\n    @computed get values() : { [key:string]: any; } {\n        return Object.keys(this.idFieldMap).reduce((all: {}, id: string) => {\n            let f: Field = this.idFieldMap[id];\n            // HTMLFragment and TextBlock have no value\n            if (f.inputType ==  'htmlfragment' || f.inputType == 'textblock') {\n                return all;\n            }\n            return {...all, [f.id]: f.value}\n        }, {});\n    }\n\n    @computed get asPlainObject() {\n        let clone : IFormProps = toJS({\n            id: this.id,\n            name: this.name,\n            uuid: this.uuid,\n            exid: this.exid,\n            description: this.description,\n            layout : this.layout,\n            formLayoutOptions : this.formLayoutOptions,\n            itemLayoutOptions : this.itemLayoutOptions,\n            submitTarget : this.submitTarget,\n            errorRedirect : this.errorRedirect,\n            successRedirect : this.successRedirect\n        }, {detectCycles : true, recurseEverything: true})\n\n        if (this.content) {\n            clone.content = {\n                ...toJS({\n                    title : this.content.title,\n                    subtitle : this.content.subtitle,\n                    labels : this.content.labels,\n                    offset : this.content.offset,\n                    width : this.content.width,\n                    sidebar : this.content.sidebar,\n                    scripts : this.content.scripts,\n                    styles : this.content.styles,\n                    datasets : this.content.datasets,\n                    paginate : this.content.paginate\n                }, {detectCycles : true, recurseEverything: true}),\n                pages : this.content.pages ? (this.content.pages as Page[]).map((p) => {return p.asPlainObject}) : []\n            }\n        }\n\n        return clone;\n    }\n\n    @action.bound handleSubmit(e: FormEvent) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.store.setSubmitting(true);\n        let meta = this.idFieldMap;\n        let payload = {};\n        let values = this.values;\n        Object.keys(values).forEach((id: string) => {\n            let key = meta[id].fieldOptions.valuePropName || meta[id].name;\n            payload[key] = values[id];\n        });\n\n        if(this.isSubmittable && !!this.submitTarget) {\n            axios.post(this.submitTarget, payload).catch((reason:any) => {\n                console.log('Submit Error', reason);\n                this.submitError = \"There was an error submitting this form\";\n                if (this.successRedirect) {\n                    setTimeout(()=> {\n                        window.location.href = this.successRedirect;\n                    }, 5000);\n                }\n            }).then(() => {\n                this.store.setSubmitting(false);\n                if (this.successRedirect) {\n                    setTimeout(()=> {\n                        window.location.href = this.errorRedirect;\n                    }, 5000);\n                }\n            })\n        } else {\n            console.dir(values);\n        }\n    }\n}","import { observable, action, computed } from \"mobx\";\nimport {valueOrDefault} from \"./common\";\n\nexport type ScreenWidth = \"xs\"|\"sm\"|\"md\"|\"lg\"|\"xl\";\nexport const AllScreenWidths: ScreenWidth[] = [\"xs\",\"sm\",\"md\",\"lg\",\"xl\"];\n\nexport interface ColSpanOffset {\n    span: number;\n    offset?: number;\n}\n\nexport interface ILayoutOption {\n    xs?  : ColSpanOffset;\n    sm?  : ColSpanOffset;\n    md?  : ColSpanOffset;\n    lg?  : ColSpanOffset;\n    xl?  : ColSpanOffset;\n}\nexport class LayoutOption implements ILayoutOption {\n    @observable xs  : ColSpanOffset;\n    @observable sm  : ColSpanOffset;\n    @observable md  : ColSpanOffset;\n    @observable lg  : ColSpanOffset;\n    @observable xl  : ColSpanOffset;\n\n    constructor(props: {[key in ScreenWidth]?: ColSpanOffset}={}) {\n        Object.keys(props).map((width: ScreenWidth) => {\n            if(AllScreenWidths.indexOf(width) > -1 && props[width]){\n                this[width] = props[width];\n            }\n        })\n    }\n\n    @computed get unused() : ScreenWidth[] {\n        return AllScreenWidths.filter((d) => {\n            return typeof this[d] == 'undefined' || this[d] == null\n        })\n    }\n\n    @computed get used() : ScreenWidth[] {\n        return AllScreenWidths.filter((d) => {\n            return typeof this[d] != 'undefined' && this[d] != null\n        })\n    }\n\n    add(dimension: ScreenWidth, colspan: ColSpanOffset) {\n        this[dimension] = colspan;\n    }\n\n}\n\nexport interface IFormLayoutOptions {\n    showSteps?: boolean,\n    showPageTitles?: boolean,\n    showSectionTitles?: boolean,\n    showSectionBorders? : boolean,\n    showPageBorders?: boolean,\n    validationDisablesPaging?: boolean;\n    labelAlign?: \"left\" | \"right\";\n    wrapperCol?: ColSpanOffset;\n    labelCol?: ColSpanOffset;\n}\n\nexport class FormLayoutOptions implements IFormLayoutOptions {\n    @observable showSteps: boolean;\n    @observable showPageTitles: boolean\n    @observable showSectionTitles: boolean\n    @observable showSectionBorders : boolean\n    @observable showPageBorders: boolean\n    @observable validationDisablesPaging: boolean\n    @observable labelAlign: \"left\" | \"right\"\n    @observable wrapperCol: ColSpanOffset\n    @observable labelCol: ColSpanOffset\n\n    constructor(props: IFormLayoutOptions) {\n        this.initialize(props);\n    }\n\n    @action initialize(props: IFormLayoutOptions) {\n        if(!props) {\n            return;\n        }\n        this.showSteps = valueOrDefault(props.showSteps, true);\n        this.showPageTitles = valueOrDefault(props.showPageTitles, true);\n        this.showSectionTitles = valueOrDefault(props.showSectionTitles, false);\n        this.showSectionBorders = valueOrDefault(props.showSectionBorders, false);\n        this.showPageBorders = valueOrDefault(props.showPageBorders, false);\n        this.validationDisablesPaging = valueOrDefault(props.validationDisablesPaging, true);\n        this.labelAlign = valueOrDefault(props.labelAlign, \"left\");\n        this.wrapperCol = valueOrDefault(props.wrapperCol, {span: 8});\n        this.labelCol = valueOrDefault(props.labelCol, {span: 6});\n    }\n}\n\nexport interface IItemLayoutOptions {\n    labelAlign? : \"left\"|\"right\";\n    labelCol?: ILayoutOption;\n    wrapperCol?: ILayoutOption;\n}\n\nexport class ItemLayoutOptions implements IItemLayoutOptions {\n    @observable labelAlign : \"left\"|\"right\";\n    @observable labelCol: LayoutOption;\n    @observable wrapperCol: LayoutOption;\n\n    @action initialize(props: IItemLayoutOptions) {\n        if(!props) {\n            return;\n        }\n        this.labelAlign = valueOrDefault(props.labelAlign, \"left\");\n        this.wrapperCol = new LayoutOption(props.wrapperCol);\n        this.labelCol = new LayoutOption(props.labelCol);\n    }\n\n    constructor(props: IItemLayoutOptions) {\n        this.initialize(props);\n    }\n}\n\n// export type ColumnLayout = { [key in ScreenWidth]?: ColSpanOffset };","import { action, computed, observable, toJS } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { Column } from \"./column\";\nimport { valueOrDefault } from \"./common\";\nimport { Field } from \"./field\";\nimport { ISection, Section } from \"./section\";\nimport { IValidationError } from \"./validation\";\n\nexport interface IPage {\n    id: string;\n    uuid?:string;\n    name: string;\n    icon?: string;\n    sections: ISection[];\n    title?: string;\n    subtitle?: string;\n}\n\nexport class Page implements IPage {\n    readonly _type : string = \"Page\";\n    @observable id: string;\n    @observable uuid: string;\n    @observable name: string;\n    @observable icon: string;\n    @observable sections: Section[];\n    @observable title: string;\n    @observable subtitle: string;\n    store: FormStoreType;\n\n    @computed get fieldNames() : string[] {\n        let fieldNames: string[] = [];\n        if (!this.sections || this.sections.length == 0) {\n            return fieldNames;\n        }\n        this.sections.forEach((section: Section)=>{\n            if (section.columns && section.columns.length > 0) {\n                section.columns.forEach((column: Column) => {\n                    if (column.fields) {\n                        column.fields.forEach((field: Field)=> {\n                            fieldNames.push(field.name);\n                        });\n                    }\n                })\n            }\n        });\n        return fieldNames;\n    }\n\n\n    @computed get fieldIds() : string[] {\n        let fieldIds: string[] = [];\n        if (!this.sections || this.sections.length == 0) {\n            return fieldIds;\n        }\n        this.sections.forEach((section: Section)=>{\n            if (section.columns && section.columns.length > 0) {\n                section.columns.forEach((column: Column) => {\n                    if (column.fields) {\n                        column.fields.forEach((field: Field)=> {\n                            fieldIds.push(field.id);\n                        });\n                    }\n                })\n            }\n        });\n        return fieldIds;\n    }\n\n    @computed get idFieldMap() : { [key:string]:Field; }  {\n        return this.sections.reduce((all: {}, s: Section)=>{\n            return {...all, ...s.idFieldMap}\n        }, {});\n    }\n\n    @computed get uuidFieldMap() : { [key:string]:Field; }  {\n        return this.sections.reduce((all: {}, s: Section)=>{\n            return {...all, ...s.uuidFieldMap}\n        }, {});\n    }\n\n    @computed get errors() : IValidationError[] {\n        return this.sections.reduce((all: any[], s: Section)=>{\n            return all.concat(s.errors);\n        }, <any[]>[]);\n    }\n\n    @computed get isValid() : boolean {\n        return this.sections.every((s) => {\n            return s.isValid;\n        });\n    }\n\n    @computed get numSections() : number {\n        return this.sections.length;\n    }\n\n    @computed get numFields() : number {\n        return this.sections.reduce((total: number, s : Section) => {\n            return total + s.numFields;\n        }, 0);\n    }\n\n    @action addSection(section: Section, index?: number) : void {\n        if (typeof index != 'undefined' && index != null && index > -1) {\n            this.sections.splice(index, 0, section);\n        } else {\n            this.sections.push(section);\n        }\n    }\n\n    @action removeSection(index: number) {\n        this.sections.splice(index, 1)\n    }\n\n    @action swapSections(index1: number, index2: number): void {\n        let { sections } = this;\n        [sections[index1], sections[index2]] = [sections[index2], sections[index1]];\n    }\n\n    @action moveSection(atIndex: number, toIndex: number) {\n        this.sections.splice(toIndex, 0, this.sections.splice(atIndex, 1)[0]);\n    }\n\n    @computed get asPlainObject() : IPage {\n        let sections = this.sections ? this.sections.map((s) => {return s.asPlainObject}) : [];\n\n        return {\n            ...toJS({id : this.id,\n                uuid : this.uuid,\n                name : this.name,\n                title : this.title,\n                subtitle : this.subtitle,\n                icon : this.icon\n            }),\n            sections: sections\n        }\n    }\n\n    @action private initialize(data: IPage, store: FormStoreType) {\n        this.id = data.id;\n        this.store = store;\n        this.uuid = data.uuid;\n        this.name = valueOrDefault(data.name, `${this._type}-${data.id}`);\n        this.icon = valueOrDefault(data.name, \"\");\n        this.sections = valueOrDefault(<Section[]>data.sections, <Section[]>[]);\n        this.title = valueOrDefault(data.title, \"\");\n        this.subtitle = valueOrDefault(data.subtitle, \"\");\n    }\n\n    constructor (data: IPage, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n}","import { action, computed, observable, toJS } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { Column, IColumn } from \"./column\";\nimport { valueOrDefault } from \"./common\";\nimport { Field } from \"./field\";\nimport { IValidationError } from \"./validation\";\n\nexport interface ISection {\n    id: string;\n    uuid?:string;\n    name: string;\n    title?: string;\n    gutter?:number;\n    columns: IColumn[];\n}\n\nexport class Section implements ISection {\n    readonly _type : string = \"Section\";\n    @observable id: string;\n    @observable uuid:string;\n    @observable name: string;\n    @observable title: string;\n    @observable gutter: number;\n    @observable columns: Column[];\n    store: FormStoreType;\n\n    @computed get errors() : IValidationError[] {\n        return this.columns.reduce((all: any[], c: Column) => {\n            return all.concat(c.errors);\n        }, <any[]>[]);\n    }\n\n    @computed get numFields() : number {\n        return this.columns.reduce((total: number, column: Column) => {\n            total = total + column.numFields;\n            return total;\n        }, 0);\n    }\n\n    @action addColumn(column: Column, index?: number) : void {\n        if(!column.span) {\n            column.span = 6;\n        }\n        if (typeof index != 'undefined' && index != null && index > -1) {\n            this.columns.splice(index, 0, column);\n        } else {\n            this.columns.push(column);\n        }\n    }\n\n    @action removeColumn(index: number) {\n        this.columns.splice(index, 1)\n    }\n\n    @action swapColumns(index1: number, index2: number): void {\n        let { columns } = this;\n        [columns[index1], columns[index2]] = [columns[index2], columns[index1]];\n    }\n\n    @action moveColumn(atIndex: number, toIndex: number) {\n        this.columns.splice(toIndex, 0, this.columns.splice(atIndex, 1)[0]);\n    }\n\n    @computed get numColumns() : number {\n        return this.columns.length;\n    }\n\n    @computed get isValid() : boolean {\n        return this.columns.every((c) => {\n            return c.isValid;\n        });\n    }\n\n    @computed get idFieldMap() : { [key:string]: Field; } {\n        return this.columns.reduce((all: {}, c: Column)=>{\n            return {...all, ...c.idFieldMap}\n        }, {});\n    }\n\n    @computed get uuidFieldMap() : { [key:string]: Field; } {\n        return this.columns.reduce((all: {}, c: Column)=>{\n            return {...all, ...c.uuidFieldMap}\n        }, {});\n    }\n\n    @computed get asPlainObject() : ISection {\n        let columns = this.columns ? this.columns.map((c) => {\n            return c.asPlainObject\n        }) : [];\n        return {\n            ...toJS({id: this.\n                id,uuid:\n                this.uuid,\n                name: this.name,\n                title: this.title,\n                gutter: this.gutter\n            })\n            , columns: columns\n        };\n    }\n\n    @action initialize(data: ISection, store: FormStoreType) {\n        this.id = data.id;\n        this.uuid = data.uuid;\n        this.name = valueOrDefault(data.name, `${this._type}-${data.id}`);\n        this.title = valueOrDefault(data.title, '');\n        this.gutter = valueOrDefault(data.gutter, 16);\n        this.columns = valueOrDefault(<Column[]>data.columns, <Column[]>[]);\n        this.store = store;\n    }\n\n    constructor(data: ISection, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n}","import { action, computed, observable, toJS } from \"mobx\";\nimport { DateConstraint, DateTimeConstraint, EmailConstraint, EqualityConstraint, ExclusionConstraint, FormatConstraint, GenericConstraint, InclusionConstraint, LengthConstraint, NumericalityConstraint, PresenceConstraint, URLConstraint } from \"./validation.constraints\";\n\n\nexport interface IValidationRule {\n    date? : DateConstraint,\n    datetime? : DateTimeConstraint,\n    email?: EmailConstraint,\n    equality?: EqualityConstraint,\n    exclusion?: ExclusionConstraint,\n    format?: FormatConstraint,\n    inclusion?: InclusionConstraint,\n    length?: LengthConstraint,\n    numericality?: NumericalityConstraint,\n    presence?: PresenceConstraint,\n    url?: URLConstraint\n}\n\nexport const ValidationAllowedRules = {\n    \"input\"       : [\"email\", \"equality\", \"format\", \"inclusion\", \"length\", \"presence\", \"url\"],\n    \"checkbox\"    : [\"presence\"],\n    \"number\"      : [\"presence\", \"equality\", \"format\"],\n    \"select\"      : [\"presence\"],\n    \"cascader\"    : [\"presence\"],\n    \"radiogroup\"  : [\"presence\"],\n    \"checkboxgroup\": [\"presence\"],\n    \"textarea\"    : [\"email\", \"equality\", \"format\", \"inclusion\", \"length\", \"presence\", \"url\"],\n    \"daterange\"   : [\"presence\", \"date\", \"datetime\"],\n    \"datepicker\"  : [\"presence\", \"date\", \"datetime\"],\n    \"monthpicker\" : [\"presence\", \"date\", \"datetime\"],\n    \"timepicker\"  : [\"presence\", \"date\", \"datetime\"],\n    \"yearpicker\"  : [\"presence\", \"date\", \"datetime\"],\n    \"starrating\"  : [\"presence\"],\n    \"switch\"      : [\"presence\"],\n    \"transfer\"    : [\"presence\"],\n    \"slider\"      : [\"presence\"],\n    \"textblock\"   : [],\n    \"hidden\"      : [],\n    \"htmlfragment\": [],\n}\n\nexport const ValidationRuleNames = [\n    {key: \"date\", label: \"Date\", value: \"date\"},\n    {key: \"datetime\", label: \"Datetime\", value: \"datetime\"},\n    {key: \"email\", label: \"Email\", value: \"email\"},\n    {key: \"equality\", label: \"Equals\", value: \"equality\"},\n    {key: \"exclusion\", label: \"Excludes\", value: \"exclusion\"},\n    {key: \"format\", label: \"Matches\", value: \"format\"},\n    {key: \"inclusion\", label: \"Includes\", value: \"inclusion\"},\n    {key: \"length\", label: \"Length\", value: \"length\"},\n    {key: \"numericality\", label: \"Numeric\", value: \"numericality\"},\n    {key: \"presence\", label: \"Present\", value: \"presence\"},\n    {key: \"url\", label: \"URL\", value: \"url\"}\n];\n\nexport const ValidationRuleMap = {\n    \"date\": \"Date\",\n    \"datetime\": \"Datetime\",\n    \"email\": \"Email\",\n    \"equality\": \"Equals\",\n    \"exclusion\": \"Excludes\",\n    \"format\": \"Matches\",\n    \"inclusion\": \"Includes\",\n    \"length\": \"Length\",\n    \"numericality\": \"Numeric\",\n    \"presence\": \"Present\",\n    \"url\": \"URL\"\n};\n\nexport interface IValidationError {\n    id: string,\n    name: string,\n    message: string,\n    prefixedMessage: string,\n    validator: string\n}\n\nexport class ValidationRule implements IValidationRule {\n    @observable date : DateConstraint\n    @observable datetime : DateTimeConstraint\n    @observable email: EmailConstraint\n    @observable equality: EqualityConstraint\n    @observable exclusion: ExclusionConstraint\n    @observable format: FormatConstraint\n    @observable inclusion: InclusionConstraint\n    @observable length: LengthConstraint\n    @observable numericality: NumericalityConstraint\n    @observable presence: PresenceConstraint\n    @observable url: URLConstraint\n\n    constructor(rule: IValidationRule) {\n        this.initialize(rule);\n    }\n\n    @action initialize(rule: IValidationRule = {}) {\n        this.date = rule.date;\n        this.datetime = rule.datetime;\n        this.email = rule.email;\n        this.equality = rule.equality;\n        this.exclusion = rule.exclusion;\n        this.format = rule.format;\n        this.inclusion = rule.inclusion;\n        this.length = rule.length;\n        this.numericality = rule.numericality;\n        this.presence = rule.presence;\n        this.url = rule.url;\n    }\n\n    @computed get constraints() : IValidationRule {\n        let c = {};\n        Object.keys(ValidationRuleMap).forEach((rule: string) => {\n            if (this[rule]) {\n                c[rule] = toJS(this[rule]);\n            }\n        })\n        return c;\n    }\n    @action addConstraint(key: string, settings: GenericConstraint) {\n        this[key] = settings;\n    }\n\n    @action updateConstraint(key: string, settings: GenericConstraint) {\n        this[key] = settings;\n    }\n\n    @action removeConstraint(key: string) {\n        this[key] = null;\n    }\n}","import {action, decorate, observable, computed, toJS} from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport moment from 'moment'\nimport {Field} from \"./field\";\nimport {ValidationRule, IValidationError, IValidationRule} from \"./validation\";\n\nvar validate = require(\"validate.js\");\n\nvalidate.extend(validate.validators.datetime, {\n    // The value is guaranteed not to be null or undefined but otherwise it\n    // could be anything.\n    parse: function(value, options) : number {\n      return +moment.utc(value);\n    },\n    // Input is a unix timestamp\n    format: function(value: moment.MomentInput, options: any = {}) : string {\n      var format = options.dateOnly ? \"YYYY-MM-DD\" : \"YYYY-MM-DD hh:mm:ss\";\n      return moment.utc(value).format(format);\n    }\n});\n\nexport interface IValidationProps {\n    store: FormStoreType,\n    field: Field,\n    rule: IValidationRule\n}\n\nexport class Validator {\n    store: FormStoreType;\n    field: Field;\n    @observable rule : ValidationRule;\n    @observable validationErrors: IValidationError[] = [];\n\n    @computed get isValid() : boolean {\n        return this.validationErrors.length == 0;\n    }\n\n    @computed get errors() : IValidationError[] {\n        return this.validationErrors;\n    }\n\n    formatError(errors: any): IValidationError {\n        return errors.map((e: any) => {\n            let prefixedMessage = e.error || \"\";\n            let unPrefixedMessage = e.error ? e.error.replace(`${e.attribute.toUpperCase()} `, \"\") : e.options.message;\n            return {id: this.field.id,\n                name: e.attribute,\n                message: unPrefixedMessage,\n                prefixedMessage: prefixedMessage,\n                validator: e.validator\n            };\n        });\n    }\n\n    @computed get isValidateable() {\n        let {field} = this;\n        return !this.store.validationDisabled && !field.isHidden && field.conditionState && !!this.rule && Object.keys(this.rule).length > 0;\n    }\n\n    @action validate() {\n        if (this.isValidateable == true) {\n            let {field, store} = this;\n            let {id} = field;\n            let constraints = {};\n            constraints[field.id] = this.rule.constraints;\n            validate.formatters.custom = this.formatError.bind(this);\n            let values = toJS(store.values);\n\n            this.validationErrors = validate(values, constraints, {format: \"custom\"}) || [];\n            if (this.validationErrors.length > 0) {\n                this.store.setFieldError(id, this.validationErrors[0].message);\n            } else {\n                this.store.setFieldError(id, undefined);\n            }\n        } else {\n            this.validationErrors = [];\n        }\n    }\n\n    @computed get isRequired() : boolean {\n        return !!this.rule.presence;\n    }\n\n    @action initialize(data: IValidationProps) {\n        this.rule = new ValidationRule(data.rule || {} as IValidationRule);\n        this.store = data.store;\n        this.field = data.field;\n    }\n\n    constructor(data: IValidationProps) {\n        this.initialize(data);\n    }\n}","import { observable } from \"mobx\";\nimport { Field } from \"../models/field\";\nimport { Form } from \"../models/form\";\nimport { Page } from \"../models/page\";\n\nexport const createFormStore = () => {\n    const store = {\n        errors : {},\n        values: {},\n        touched: {},\n        currentPage: 0,\n        debug : (window && window.location.hostname.indexOf('localhost') > -1) ? true : false,\n        form :<Form> null,\n        isReady: false,\n        submitting: false,\n        validationDisabled: false,\n        conditionsDisabled: false,\n        get idFieldMap() : { [key:string]:Field; } {\n            if (!this.form) {\n                return {}\n            }\n            return this.form.content.pages.reduce((all: {}, p: Page) => {\n                return {...all, ...p.idFieldMap};\n            }, {});\n        },\n        get uuidFieldMap() : { [key:string]:Field; } {\n            if (!this.form) {\n                return {}\n            }\n            return this.form.content.pages.reduce((all: {}, p: Page) => {\n                return {...all, ...p.uuidFieldMap};\n            }, {});\n        },\n        get fieldNames() : string[] {\n            if (!this.form) {\n                return []\n            }\n            return this.form.content.pages.reduce((all: string[], p: Page) => {\n                return all.concat(p.fieldNames);\n            }, <string[]>[])\n        },\n        get isValid() : boolean {\n            if (this.form && this.form.content && this.form.content.pages && this.form.content.pages.length > 0) {\n                return this.form.content.pages.every((p: Page) => {\n                    return p.isValid\n                })\n            } else {\n                return true;\n            }\n        },\n        setSubmitting(value: boolean) {\n            this.submitting = value;\n        },\n        get isSubmitting() : boolean {\n            return this.submitting;\n        },\n        get numPages() : number {\n            return this.form ? this.form.content.pages.length : 0;\n        },\n        get hasNextPage() : boolean {\n            return this.currentPage < this.numPages -1;\n        },\n        get hasPrevPage() : boolean {\n            return this.currentPage > 0 && this.numPages > 1\n        },\n        get isSubmittable() : boolean {\n            return !(Object.keys(this.touched).length == 0 || !this.isValid|| this.isSubmitting);\n        },\n        nextPage : function () {\n            if(!this.form) {\n                return;\n            }\n            let currentPage = this.form.content.pages[this.currentPage] as Page;\n            let errors = currentPage.errors;\n            let {validationDisablesPaging} = this.form.formLayoutOptions;\n            // Highlight all errors\n            currentPage.fieldIds.forEach((id: string) => {\n                this.touched[id] = true;\n            });\n            if (!errors || errors.length == 0||validationDisablesPaging == false) {\n                this.currentPage = this.currentPage + 1;\n            }\n        },\n        prevPage : function() {\n            this.currentPage = this.currentPage - 1;\n        },\n        setForm : function (form: Form) {\n            this.form = form;\n        },\n        setFieldValue: function (id: string, value: any) {\n            this.values[id] = value;\n        },\n        setFieldTouched: function (id: string) {\n            this.touched[id] = true;\n        },\n        setFieldError: function (id: string, error: any) {\n            this.errors[id] = error;\n        }\n    }\n    return observable(store);\n}\n\nexport type FormStoreType = ReturnType<typeof createFormStore>;","import * as React from \"react\";\nimport {FormStoreType, createFormStore} from \"./FormStore\";\nimport { useLocalStore } from \"mobx-react\";\nimport { IFormProps } from '../models/form.properties';\nimport { Factory } from '../models/factory';\nexport const formStoreContext = React.createContext<FormStoreType | null>(null);\n\nexport interface FormStoreProviderProps {\n  initialState?: IFormProps;\n  formStore?: FormStoreType;\n}\n\nexport const FormStoreProvider: React.FC<FormStoreProviderProps> = (props) => {\n    let store;\n    if (props.formStore) {\n        store = props.formStore;\n    } else if (props.initialState) {\n        store = useLocalStore(createFormStore);\n        store.setForm(Factory.makeForm(store, props.initialState));\n    } else {\n      throw new Error(\"FormStoreProvider - Pass initialState or formStore\")\n    }\n    return (\n      <formStoreContext.Provider value={store}>\n        {props.children}\n      </formStoreContext.Provider>\n    )\n}","module.exports = antd;","module.exports = moment;","module.exports = React;","module.exports = ReactDOM;"],"sourceRoot":""}