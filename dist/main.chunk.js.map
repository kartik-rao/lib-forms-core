{"version":3,"sources":["webpack://Forms/./src/app.tsx","webpack://Forms/./src/config.ts","webpack://Forms/./src/models/column.ts","webpack://Forms/./src/models/common.ts","webpack://Forms/./src/models/condition.predicate.ts","webpack://Forms/./src/models/condition.ts","webpack://Forms/./src/models/factory.ts","webpack://Forms/./src/models/field.ts","webpack://Forms/./src/models/form.ts","webpack://Forms/./src/models/layout.ts","webpack://Forms/./src/models/page.ts","webpack://Forms/./src/models/section.ts","webpack://Forms/./src/models/validation.ts","webpack://Forms/./src/models/validator.ts","webpack://Forms/./src/store/FormStore.ts","webpack://Forms/./src/store/FormStoreProvider.tsx","webpack://Forms/external \"moment\"","webpack://Forms/external \"React\"","webpack://Forms/external \"ReactDOM\""],"names":["FormView","lazy","then","module","default","FormWrapper","props","localStore","isLoading","response","this","error","hasEnded","name","isRemoteError","isThrownError","useEffect","formId","_response","fetch","apiHost","json","redirect","window","location","console","fetchData","style","height","overflow","backgroundColor","active","status","title","message","Suspense","fallback","initialState","renderForm","selector","log","env","version","document","querySelector","matches","hostname","match","port","length","debug","Column","data","store","_type","initialize","fields","reduce","all","f","concat","validator","errors","every","i","isValid","id","uuid","field","index","splice","push","forEach","addField","index1","index2","atIndex","toIndex","map","asPlainObject","span","valueOrDefault","value","defaultValue","Predicate","operator","condition","PredicateConditions","indexOf","Error","PredicateOperators","Condition","predicates","p","ancestors","self","lhs","rhs","op","state","conditionsDisabled","currentValue","values","result","uuidv1","EmptyForm","description","formLayoutOptions","showPageTitles","showSteps","showSectionBorders","showPageBorders","showSectionTitles","validationDisablesPaging","layout","itemLayoutOptions","labelAlign","labelCol","offset","wrapperCol","content","subtitle","Factory","item","Math","random","toFixed","predicate","ensureIds","makePredicates","r","columns","c","makeFields","floor","column","sections","s","makeColumns","pages","page","makeSections","formData","form","makePages","_formData","Field","label","helpText","placeholder","fieldOptions","valuePropName","componentProps","type","inputType","Object","assign","validation","rule","storage","children","touched","setValue","setCondition","conditionState","validate","isValidateable","presence","setFieldValue","setFieldTouched","_dispose","change","setConditionState","newValue","clone","recurseEverything","detectCycles","JSON","stringify","SubmitState","SubmitResultType","Form","submitState","NOT_SUBMITTED","exid","submitTarget","successRedirect","errorRedirect","submitErrorMessage","submitSuccessMessage","labels","width","sidebar","scripts","styles","datasets","paginate","css","inline","external","header","rows","footer","trackingPixels","total","numFields","preventSubmit","ERROR","idFieldMap","uuidFieldMap","keys","SUBMITTING","AWAITING_SUBMIT","SUCCESS","USER_SUCCESS_MESSAGE","DEFAULT_SUCCESS_MESSAGE","USER_ERROR_MESSAGE","DEFAULT_ERROR_MESSAGE","e","preventDefault","stopPropagation","setSubmitting","meta","payload","key","isSubmittable","a","post","preventRedirects","href","submitError","bound","AllScreenWidths","LayoutOption","filter","d","dimension","colspan","FormLayoutOptions","ItemLayoutOptions","Page","fieldNames","section","fieldIds","icon","Section","gutter","ValidationAllowedRules","ValidationRuleNames","ValidationRuleMap","ValidationRule","date","datetime","email","equality","exclusion","format","inclusion","numericality","url","settings","extend","validators","parse","options","utc","dateOnly","Validator","validationErrors","prefixedMessage","unPrefixedMessage","replace","attribute","toUpperCase","validationDisabled","isHidden","constraints","formatters","custom","formatError","bind","setFieldError","undefined","createFormStore","currentPage","showDebug","isReady","submitting","toggleShowDebug","numPages","nextPage","prevPage","setForm","formStoreContext","FormStoreProvider","formStore","makeForm","Provider","exports","moment","React","ReactDOM"],"mappings":";;;;i+BAcA,MAAMA,EAAW,IAAMC,KAAK,IAAM,yIAA0DC,KAAMC,IAAmB,CAACC,QAASD,EAAOH,aAEhIK,EAA4CC,IAE9C,MAAMC,EAAa,wBAAc,KAAM,CACnCC,WAAW,EACXC,SAAW,KACX,aACI,OAAIC,KAAKF,YAAcE,KAAKD,UAAaC,KAAKD,WAAaC,KAAKD,SAASE,MAC9D,UAEmB,gBAAvBD,KAAKD,SAASE,MAA0B,UAAY,SAE/D,cACI,OAAKD,KAAKD,UAAaC,KAAKD,SAASE,MAGV,gBAAvBD,KAAKD,SAASE,MACPD,KAAKD,SAASG,YAAcF,KAAKD,SAASI,yCAA2CH,KAAKD,SAASI,yCAEvG,+DALI,IAOfC,eAAe,EACfC,eAAe,KA4BnB,OAzBA,IAAMC,UAAU,KAoBTV,EAAMW,QAnBO,W,mDACZ,IACI,IAAIC,QAAuBC,WAAW,UAAOC,qBAAqBd,EAAMW,UACpER,QAAiBS,EAAUG,OAE/B,GADAd,EAAWE,SAAWA,EAClBA,EAASE,MAAO,CAChB,GAAsB,gBAAlBF,EAASE,OAA2BF,EAASa,SAE7C,YADAC,OAAOC,SAAWf,EAASa,UAG/Bf,EAAWO,eAAgB,GAEjC,MAAOH,GACLJ,EAAWQ,eAAgB,EAC3BU,QAAQd,MAAMA,GAElBJ,EAAWC,WAAY,IAIvBkB,IAEL,IAEI,sBAAY,IACR,kBAAC,UAAM,CAACC,MAAO,CAACC,OAAQ,QAASC,SAAU,SAAUC,gBAAiB,UAC3EvB,EAAWC,UAAY,kBAAC,UAAQ,CAACuB,QAAQ,IAAU,oCAChDxB,EAAWO,eAAiB,kBAAC,UAAM,CAACkB,OAAQzB,EAAWyB,OAAQC,MAAO1B,EAAW2B,UACjF3B,EAAWQ,eAAiB,kBAAC,UAAM,CAACiB,OAAO,QAAQC,MAAM,qEACzD1B,EAAWE,UAAY,kBAAC,IAAM0B,SAAQ,CAACC,SAAS,WAC7C,kBAAC,oBAAiB,CAACC,aAAc,eAAK9B,EAAWE,WAC7C,kBAACT,EAAQ,YAOtB,SAAesC,EAAWC,EAAiBtB,EAAgBoB,G,0DAC9DZ,QAAQe,uBAAuB,UAAOC,SAAS,UAAOC,YAClDL,EACA,iBACI,kBAAC,UAAM,CAACV,MAAO,CAACC,OAAQ,QAASC,SAAU,WACvC,kBAAC,IAAMM,SAAQ,CAACC,SAAS,WACrB,kBAAC,oBAAiB,CAACC,aAAcA,GAC7B,kBAACrC,EAAQ,SAGV2C,SAASC,cAAcL,IAGtC,iBAAQ,kBAAClC,EAAW,CAACY,OAAQA,IAAW0B,SAASC,cAAcL,Q;;;;6DCvFvE,aAAMM,EAAUrB,SAASsB,SAASC,MAAM,4BAElCC,GAD2B,aAArBxB,SAASsB,UAAmCD,GAAWA,EAAQI,QAAU,GAAIJ,EAAQ,GACpFrB,SAASwB,MAAQxB,SAASwB,KAAKC,OAAS,MAAQzB,SAASwB,OAAS,IAC/DxB,SAASsB,SAEV,WACXL,IAAqC,cACrCS,OAAyC,EACzCR,QAA6C,QAC7CtB,QAA+C,qB;;;;;;;;oQCG5C,MAAM+B,EAiET,YAAYC,EAAeC,GAhElB,KAAAC,MAAiB,SAiEtB5C,KAAK6C,WAAWH,EAAMC,GAxDhB,aACN,OAAO3C,KAAK8C,OAAOC,OAAO,CAACC,EAAYC,IAC5BD,EAAIE,OAAOD,EAAEE,UAAUC,QACxB,IAGJ,cACN,OAAOpD,KAAK8C,OAAOO,MAAM,CAACJ,EAAGK,IAClBL,EAAEM,SAIP,iBACN,OAAOvD,KAAK8C,OAAOC,OAAO,CAACC,EAASC,KAChCD,EAAIC,EAAEO,IAAMP,EACLD,GACR,IAGG,mBACN,OAAOhD,KAAK8C,OAAOC,OAAO,CAACC,EAASC,KAChCD,EAAIC,EAAEQ,MAAQR,EACPD,GACR,IAGG,gBACN,OAAOhD,KAAK8C,OAAOP,OAGf,SAASmB,EAAcC,QACP,IAATA,GAAiC,MAATA,GAAiBA,GAAS,EACzD3D,KAAK8C,OAAOc,OAAOD,EAAO,EAAGD,GAE7B1D,KAAK8C,OAAOe,KAAKH,GAIjB,aAAaZ,GACjBA,EAAOgB,QAASb,GAAajD,KAAK+D,SAASd,IAGvC,YAAYU,GAChB3D,KAAK8C,OAAOc,OAAOD,EAAO,GAGtB,WAAWK,EAAgBC,GAC/B,IAAI,OAAEnB,GAAW9C,MAChB8C,EAAOkB,GAASlB,EAAOmB,IAAW,CAACnB,EAAOmB,GAASnB,EAAOkB,IAGvD,UAAUE,EAAiBC,GAC/BnE,KAAK8C,OAAOc,OAAOO,EAAS,EAAGnE,KAAK8C,OAAOc,OAAOM,EAAS,GAAG,IAOxD,oBACN,IAAIpB,EAAS9C,KAAK8C,OAAU9C,KAAK8C,OAAOsB,IAAKnB,GAClCA,EAAEoB,eACR,GACL,OAAO,OAAP,wBACO,eAAK,CAACb,GAAIxD,KAAKwD,GAAGC,KAAMzD,KAAKyD,KAAKa,KAAMtE,KAAKsE,KAAKnE,KAAMH,KAAKG,KAAKoB,MAAOvB,KAAKuB,SAAO,CACxFuB,OAAQA,IAIR,WAAWJ,EAAeC,GAC9B3C,KAAKyD,KAAOf,EAAKe,KACjBzD,KAAK2C,MAAQA,EACb3C,KAAKwD,GAAKd,EAAKc,GACfxD,KAAKsE,KAAO5B,EAAK4B,KACjBtE,KAAKG,KAAO,yBAAeuC,EAAKvC,QAASH,KAAK4C,SAASF,EAAKc,MAC5DxD,KAAKuB,MAAQ,yBAAemB,EAAKnB,MAAO,IACxCvB,KAAK8C,OAAS,yBAAwBJ,EAAKI,OAAiB,KApFpD,sBAAX,c,2BACW,sBAAX,c,yBACW,sBAAX,c,2BACW,sBAAX,c,2BACW,sBAAX,c,4BACW,sBAAX,c,6BAGS,sBAAT,Y,2BAMS,sBAAT,Y,4BAMS,sBAAT,Y,+BAOS,sBAAT,Y,iCAOS,sBAAT,Y,8BAIO,sBAAP,U,6BAQO,sBAAP,U,8BAIO,sBAAP,U,gCAIO,sBAAP,U,+BAKO,sBAAP,U,8BAQS,sBAAT,Y,kCAUO,sBAAP,U;;;;oEChGL,oDAAe,gBAAQ,6BAEhB,SAASyB,EAAkBC,EAAUC,GACxC,OAAQ,MAAM,EAA4CD,EAAQC,I;;;;6NCQ/D,MAAMC,EAyBT,YAAYhC,EAAiBC,GAlBjB,KAAAgC,SAAmB,KAmB3B3E,KAAK6C,WAAWH,EAAMC,GAhBlB,WAAWD,EAAkBC,GACjC,IAAKD,EAAKkC,YAAuE,GAA1DF,EAAUG,oBAAoBC,QAAQpC,EAAKkC,WAC9D,MAAM,IAAIG,qCAAqCrC,EAAKkC,aAExD,GAAGlC,EAAKiC,WAAoE,GAAxDD,EAAUM,mBAAmBF,QAAQpC,EAAKiC,UAC1D,MAAM,IAAII,oCAAoCrC,EAAKiC,YAEvD3E,KAAKyD,KAAOf,EAAKe,KACjBzD,KAAK2C,MAAQA,EACb3C,KAAK0D,MAAQhB,EAAKgB,MAClB1D,KAAK4E,UAAYlC,EAAKkC,UACtB5E,KAAKwE,MAAQ9B,EAAK8B,MAClBxE,KAAK2E,SAAWjC,EAAKiC,UArBTD,EAAAG,oBAAsB,CAAC,KAAO,MAAQ,KAAO,KAAM,OAAQ,OAAQ,SAAU,aAC7EH,EAAAM,mBAAqB,CAAC,KAAM,OAEhC,sBAAX,c,4BACW,sBAAX,c,gCACW,sBAAX,c,4BACW,sBAAX,c,+BAGO,sBAAP,U;;;;oSCZE,MAAMC,EAoBT,YAAYvC,EAAkBC,GAC1B3C,KAAK6C,WAAWH,EAAMC,GAhBlB,WAAWD,EAAkBC,GACjC,IAAIuC,EAA2B,GAC/BxC,EAAKwC,WAAWpB,QAASqB,IACrBD,EAAWrB,KAAK,IAAI,YAAUsB,EAAGxC,MAErC3C,KAAKkF,WAAaA,EAClBlF,KAAKoF,UAAY,GACjBpF,KAAK2C,MAAQA,EACb,IAAI0C,EAAOrF,KAEXA,KAAKkF,WAAWpB,QAASqB,IACrBE,EAAKD,UAAUvB,KAAKsB,EAAEzB,SAQtB,iBAAiByB,GACrBA,EAAErB,QAASqB,IACPnF,KAAKkF,WAAWrB,KAAK,IAAI,YAAUsB,EAAGnF,KAAK2C,QAC3C3C,KAAKoF,UAAUvB,KAAKsB,EAAEzB,SAI9B,OAAO4B,EAASC,EAASC,GACrB,MAAU,OAANA,EACOF,GAAOC,EAEPD,GAAOC,EAIZ,YACN,IAAIE,EACJ,IAAIJ,EAAOrF,KAEX,SAAIqF,EAAK1C,MAAM+C,oBAAuB1F,KAAKkF,YAAwC,GAA1BlF,KAAKkF,WAAW3C,UAIzEvC,KAAKkF,WAAWpB,QAAQ,CAACqB,EAAG7B,KACxB,IAAIqC,EAAeN,EAAK1C,MAAMiD,OAAOT,EAAEzB,OACvC,IAAImC,EAAc,KAClB,OAAOV,EAAEP,WACL,IAAK,KACDiB,EAASF,GAAgBR,EAAEX,MAC3B,MACJ,IAAK,MACDqB,EAASF,GAAgBR,EAAEX,MAC3B,MACJ,IAAK,KACDqB,EAASF,EAAeR,EAAEX,MAC1B,MACJ,IAAK,KACDqB,EAASF,EAAeR,EAAEX,MAC1B,MACJ,IAAK,OACDqB,EAASF,GAAgBR,EAAEX,MAC3B,MACJ,IAAK,OACDqB,EAASF,GAAgBR,EAAEX,MAC3B,MACJ,IAAK,SACDqB,OAAiC,IAAlB,GAAiD,MAAhBF,GAAyC,KAAjBA,EACxE,MACJ,IAAK,YACDE,OAAiC,IAAlB,GAAiD,MAAhBF,GAAwC,IAAhBA,EACxE,MACJ,QACIE,GAAS,EAEjBJ,EAAc,GAALnC,EAAUuC,EAAS7F,KAAK+C,OAAO0C,EAAOI,EAAQV,EAAER,YAEtDc,IA/EC,sBAAX,c,iCACW,sBAAX,c,gCAGO,sBAAP,U,+BAmBO,sBAAP,U,kCAeS,sBAAT,Y;;;;wEC/CL,4aASA,MAAMK,EAAS,gBAAQ,6BAEVC,EAAyB,CAClCvC,GAAI,KACJrD,KAAM,gBACN6F,YAAa,mBACbC,kBAAoB,CAChBC,gBAAiB,EACjBC,WAAW,EACXC,oBAAoB,EACpBC,iBAAiB,EACjBC,mBAAmB,EACnBC,0BAA0B,GAE9BC,OAAS,WACTC,kBAAoB,CAChBC,WAAa,OACbC,SAAW,CAAC,GAAO,CAACC,OAAO,EAAGtC,KAAM,IACpCuC,WAAa,CAAC,GAAO,CAACD,OAAO,EAAGtC,KAAM,MAE1CwC,QAAS,CACLvF,MAAO,aACPwF,SAAU,kBAIX,MAAMC,EACT,iBAAoBC,GACXA,EAAW,OACZA,EAAW,KAAInB,KAGfmB,EAAS,KACTA,EAAS,IAAK,IAAMC,KAAKC,UAAUC,QAAQ,GAAK,IAIxD,sBAAsBzE,KAAyBuC,GAC3C,IAAInF,EAAwB,GAK5B,OAJAmF,EAAWpB,QAASuD,IAChBL,EAAQM,UAAUD,GAClBtH,EAAS8D,KAAK,IAAI,YAAUwD,EAAW1E,MAEpC5C,EAIX,qBAAqB4C,EAAsBiC,GACvC,IAAIM,EAAa8B,EAAQO,eAAe5E,KAAUiC,EAAUM,YAC5D,OAAO,IAAI,YAAU,CAACA,WAAYA,GAAavC,GAGnD,kBAAkBA,KAAyBG,GACvC,OAAKA,GAA2B,GAAjBA,EAAOP,OAGfO,EAAOC,OAAO,CAACyE,EAAYvE,KAC9B+D,EAAQM,UAAUrE,GAClBuE,EAAE3D,KAAK,IAAI,QAAM,OAAD,wBAAKZ,GAAC,CAAE2B,UAAW3B,EAAE2B,YAAYjC,IAC1C6E,GACC,IANQ,GASxB,mBAAmB7E,KAAyB8E,GACxC,IAAI1H,EAAsB,GAC1B,OAAK0H,GAA6B,GAAlBA,EAAQlF,QAIxBkF,EAAQ3D,QAAS4D,IACbV,EAAQM,UAAUI,GAClB,IAAI5E,EAAS4E,EAAE5E,QAAU4E,EAAE5E,OAAOP,OAAS,EAAIyE,EAAQW,WAAWhF,KAAU+E,EAAE5E,QAAmB,GAC5F4E,EAAEpD,OACHoD,EAAEpD,KAAO4C,KAAKU,MAAM,GAAGH,EAAQlF,SAEnC,IAAIsF,EAAS,IAAI,SAAO,OAAD,wBAAKH,GAAC,CAAE5E,OAAQA,IAASH,GAChD5C,EAAS8D,KAAKgE,KAEX9H,GAZIA,EAef,oBAAoB4C,KAAyBmF,GACzC,IAAI/H,EAAsB,GAC1B,OAAK+H,GAA+B,GAAnBA,EAASvF,QAG1BuF,EAAShE,QAASiE,IACdf,EAAQM,UAAUS,GAClB,IAAIN,EAAUM,EAAEN,SAAWM,EAAEN,QAAQlF,OAAS,EAAIyE,EAAQgB,YAAYrF,KAAUoF,EAAEN,SAAqB,GACvG1H,EAAS8D,KAAK,IAAI,UAAQ,OAAD,wBAAKkE,GAAC,CAAEN,QAASA,IAAU9E,MAEjD5C,GAPe,GAU1B,iBAAiB4C,KAAyBsF,GACtC,IAAKA,GAAyB,GAAhBA,EAAM1F,OAChB,MAAe,GAEnB,IAAIxC,EAAmB,GAMvB,OALAkI,EAAMnE,QAASoE,IACXlB,EAAQM,UAAUY,GAClB,IAAIJ,EAAWI,EAAKJ,UAAYI,EAAKJ,SAASvF,OAAS,EAAIyE,EAAQmB,aAAaxF,KAAUuF,EAAKJ,UAAuB,GACtH/H,EAAS8D,KAAK,IAAI,OAAK,OAAD,wBAAKqE,GAAI,CAAEJ,SAAUA,IAAWnF,MAEnD5C,EAGX,gBAAgB4C,EAAsByF,GAClC,IAAIC,EACJ,GAAID,GAAYA,EAAStB,SAAWsB,EAAStB,QAAQmB,MACjDG,EAAStB,QAAQmB,MAAQjB,EAAQsB,UAAU3F,KAAUyF,EAAStB,QAAQmB,OACtEI,EAAO,IAAI,OAAKD,EAAUzF,OACvB,CACH,IAAI4F,EAAYH,GAAsB,CAAC5E,GAAI,KAAMsD,QAAS,CAACmB,MAAO,KAClEI,EAAO,IAAI,OAAKE,EAAW5F,GAE/B,OAAO0F,K;;;;6ZCnHR,MAAMG,EA+KT,YAAY9F,EAAmBC,GA9KtB,KAAAC,MAAiB,QA+KtB5C,KAAK6C,WAAWH,EAAMC,GAtJlB,YAAYD,GAChB1C,KAAKwD,GAAKd,EAAKc,GAAKd,EAAKc,GAAKxD,KAAKwD,GACnCxD,KAAKG,KAAOuC,EAAKvC,KACjBH,KAAKyI,MAAQ/F,EAAK+F,MAClBzI,KAAK0I,SAAWhG,EAAKgG,SACrB1I,KAAK2I,YAAcjG,EAAKiG,YACxB,IAAI,aAACC,GAAgBlG,EACrB1C,KAAK4I,aAAe,OAAH,wBAAO5I,KAAK4I,cAAiB,CAACC,cAAeD,EAAeA,EAAaC,cAAgB7I,KAAK4I,aAAaC,gBAC5H7I,KAAK8I,eAAiB,+BAAqB9I,KAAK8I,gBAAmBpG,EAAKoG,gBAIpE,WAAWpG,EAAmBC,GAClC3C,KAAK2C,MAAQA,EACb3C,KAAKwD,GAAKd,EAAKc,GACfxD,KAAKyD,KAAOf,EAAKe,KACjBzD,KAAKG,KAAOuC,EAAKvC,SAAWH,KAAK4C,SAASF,EAAKc,KAC/CxD,KAAK+I,KAAOrG,EAAKqG,KACjB/I,KAAKyI,MAAQ/F,EAAK+F,MAClBzI,KAAKgJ,UAAYtG,EAAKsG,UACtBhJ,KAAK4I,aAAelG,EAAKkG,aAAeK,OAAOC,OAAO,CAAC1F,GAAId,EAAKc,IAAK,OAAF,UAAMd,EAAKkG,eAAiB,CAACpF,GAAId,EAAKc,IACzGxD,KAAK4I,aAAaC,eAAiBnG,EAAKkG,cAAc,IAAIC,eAAiB7I,KAAKG,KAChFH,KAAKmJ,WAAazG,EAAKyG,WACvBnJ,KAAKmD,UAAY,IAAI,YAAU,CAACiG,KAAM,IAAI,iBAAe1G,EAAKyG,YAAazF,MAAO1D,KAAM2C,MAAOA,IAC/F3C,KAAKqJ,QAAU3G,EAAK2G,QACpBrJ,KAAKyI,MAAQ/F,EAAK+F,MAClBzI,KAAK0I,SAAWhG,EAAKgG,SACrB1I,KAAK2I,YAAcjG,EAAKiG,YACxB3I,KAAKsJ,SAAW5G,EAAK4G,UAAY,GACjCtJ,KAAK8I,eAAiBpG,EAAKoG,gBAAkB,GAC7C9I,KAAKc,SAAW4B,EAAK5B,UAAY,GACjCd,KAAKuJ,SAAU,EACfvJ,KAAKyG,kBAAoB,IAAI,oBAAkB/D,EAAK+D,mBAEhDzG,KAAK8I,gBAAkB9I,KAAK8I,eAA6B,aACzD9I,KAAKwJ,SAASxJ,KAAK8I,eAA6B,cACzC9I,KAAK8I,gBAAkB9I,KAAK8I,eAA+B,gBAClE9I,KAAKwJ,SAASxJ,KAAK8I,eAA+B,gBAGjD9I,KAAK4I,aAAaC,gBACnB7I,KAAK4I,aAAaC,iBAAmB7I,KAAKwD,YAGzB,aAAlBxD,KAAKgJ,YACJhJ,KAAK8I,eAAoC,oBAAM9I,KAAK8I,eAAoC,oBAAI9I,KAAK8I,eAAoC,oBAAI,aACzI9I,KAAK8I,eAAkC,kBAAM9I,KAAK8I,eAAkC,kBAAI9I,KAAK8I,eAAkC,kBAAI,YAGnIpG,EAAKkC,UACL5E,KAAKyJ,aAAa/G,EAAKkC,YAEvB5E,KAAK4E,UAAY,KACjB5E,KAAK0J,gBAAiB,GAE1B1J,KAAK2J,WAIC,gBACN,uBAAwB3J,KAAKgJ,YAAYhJ,KAAK+I,KAAK,IAAI/I,KAAK+I,KAAK,KAG3D,gBACN,OAAO/I,KAAK2C,MAAM4G,QAAQvJ,KAAKwD,IAGzB,qBACN,OAAOxD,KAAKmD,UAAUyG,eAGhB,cACN,OAAO5J,KAAKmD,UAAUI,QAGhB,eACN,MAAyB,UAAlBvD,KAAKgJ,UAGN,iBACN,QAAShJ,KAAKmD,UAAUiG,KAAKS,SAGvB,mBACN,OAAO7J,KAAKwE,MAGN,iBACN,OAAQxE,KAAK0J,eAGT,SAASlF,GACbxE,KAAKwE,MAAQA,EACbxE,KAAK2C,MAAMmH,cAAc9J,KAAKwD,GAAIgB,GAClCxE,KAAK2J,WAGD,aACJ3J,KAAKuJ,SAAU,EACfvJ,KAAK2C,MAAMoH,gBAAgB/J,KAAKwD,IAChCxD,KAAK2J,WAGD,kBAAkBnF,GACtBxE,KAAK0J,eAAiBlF,EACtBxE,KAAK2J,WAGD,aAAa/E,GACjB,GAAgB,MAAbA,IAAsBA,EAAUM,YAA6C,GAA/BN,EAAUM,WAAW3C,OAOlE,OANAvC,KAAK4E,UAAY,KACjB5E,KAAK0J,gBAAiB,EACnB1J,KAAKgK,UACJhK,KAAKgK,gBAEThK,KAAK2J,WAIT3J,KAAK4E,UAAY,IAAI,YAAUA,EAAW5E,KAAK2C,OAC/C3C,KAAK0J,eAAiB1J,KAAK4E,UAAUJ,MAErCxE,KAAKgK,SAAW,kBAAQhK,KAAK4E,UAAW,QAAUqF,IAC9CjK,KAAKkK,kBAAkBD,EAAOE,UACR,GAAnBF,EAAOE,UACNnK,KAAK2J,aAEV,GAGC,WAEL3J,KAAKmD,UAAUwG,WAGR,oBACN,IAAIS,EAAQ,OAAH,UAAOpK,MAKhB,cAJOoK,EAAMzH,aACNyH,EAAMjH,UACbiH,EAAM5F,MAAQ,KACd4F,EAAMV,gBAAiB,EAChB,eAAKU,EAAO,CAACC,mBAAmB,EAAMC,cAAc,IAGrD,gBACN,IAAIF,EAAQpK,KAAKqE,cACjB,OAAOkG,KAAKC,UAAUJ,IAzKd,sBAAX,c,yBACW,sBAAX,c,2BAEW,sBAAX,c,2BACW,sBAAX,c,4BACW,sBAAX,c,4BACW,sBAAX,c,8BACW,sBAAX,c,gCACW,sBAAX,c,+BACW,sBAAX,c,kCAGW,sBAAX,c,gCACW,sBAAX,c,8BAEW,sBAAX,c,+BACW,sBAAX,c,qCACW,sBAAX,c,gCAEW,sBAAX,c,qCACW,sBAAX,c,wCAGO,sBAAP,U,gCAYO,sBAAP,U,+BA+CS,sBAAT,Y,8BAIS,sBAAT,Y,8BAIS,sBAAT,Y,mCAIS,sBAAT,Y,4BAIS,sBAAT,Y,6BAIS,sBAAT,Y,+BAIS,sBAAT,Y,iCAIS,sBAAT,Y,+BAIO,sBAAP,U,6BAMO,sBAAP,U,+BAMO,sBAAP,U,sCAKO,sBAAP,U,iCAsBO,sBAAP,U,6BAKS,sBAAT,Y,kCASS,sBAAT,Y;;;;gOC1KOK,EAOAC,E,gQAPZ,SAAYD,GACR,gCACA,0BACA,oBACA,gBAJJ,CAAYA,MAAW,KAOvB,SAAYC,GACR,oCACA,sCACA,kCACA,oDACA,gDACA,8CACA,0CAPJ,CAAYA,MAAgB,KAUrB,MAAMC,EAsGT,YAAYjI,EAAkBC,GAlFlB,KAAAiI,YAA2BH,EAAYI,cAmF/C7K,KAAK6C,WAAWH,EAAMC,GAjFlB,WAAWD,EAAkBC,GACjC3C,KAAK2C,MAAQA,EACb3C,KAAKwD,GAAKd,EAAKc,GACfxD,KAAKG,KAAOuC,EAAKvC,KACjBH,KAAKyD,KAAOf,EAAKe,KACjBzD,KAAK8K,KAAO,yBAAepI,EAAKoI,KAAM,MACtC9K,KAAKgG,YAAc,yBAAetD,EAAKsD,YAAa,MACpDhG,KAAK+K,aAAerI,EAAKqI,aACzB/K,KAAKgL,gBAAkBtI,EAAKsI,gBAC5BhL,KAAKiL,cAAgBvI,EAAKuI,cAC1BjL,KAAKkL,mBAAqBxI,EAAKwI,mBAC/BlL,KAAKmL,qBAAuBzI,EAAKwI,mBAC7BxI,EAAKoE,SACL9G,KAAK8G,QAAU,CACXvF,MAAO,yBAAemB,EAAKoE,QAAQvF,MAAO,MAC1CwF,SAAU,yBAAerE,EAAKoE,QAAQC,SAAU,MAChDqE,OAAQ,yBAAe1I,EAAKoE,QAAQsE,OAAQ,MAC5CxE,OAAQ,yBAAelE,EAAKoE,QAAQF,OAAQ,MAC5CyE,MAAO,yBAAe3I,EAAKoE,QAAQuE,MAAO,MAC1CC,QAAS,yBAAe5I,EAAKoE,QAAQwE,QAAS,MAC9CC,QAAS,yBAAe7I,EAAKoE,QAAQyE,QAAS,MAC9CC,OAAQ,yBAAe9I,EAAKoE,QAAQ0E,OAAQ,MAC5CC,SAAU,yBAAe/I,EAAKoE,QAAQ2E,SAAU,MAChDxD,MAAO,yBAAuBvF,EAAKoE,QAAQmB,MAAO,IAClDyD,SAAU,yBAAehJ,EAAKoE,QAAQ4E,UAAU,IAEhDhJ,EAAKoE,QAAQ6E,IACb3L,KAAK8G,QAAQ6E,IAAM,CACfC,OAAS,yBAAelJ,EAAKoE,QAAQ6E,IAAIC,OAAQ,IACjDC,SAAU,yBAAenJ,EAAKoE,QAAQ6E,IAAIE,SAAU,KAGxD7L,KAAK8G,QAAQ6E,IAAM,CAACC,OAAQ,KAAMC,SAAU,MAE5CnJ,EAAKoE,QAAQgF,OACb9L,KAAK8G,QAAQgF,OAAS,CAClBC,KAAM,yBAAerJ,EAAKoE,QAAQgF,OAAOC,KAAM,KAGnD/L,KAAK8G,QAAQgF,OAAS,CAACC,KAAM,IAG7BrJ,EAAKoE,QAAQkF,OACbhM,KAAK8G,QAAQkF,OAAS,CAClBD,KAAM,yBAAerJ,EAAKoE,QAAQkF,OAAOD,KAAM,KAGnD/L,KAAK8G,QAAQkF,OAAS,CAACD,KAAM,IAG7BrJ,EAAKoE,QAAQmF,eACbjM,KAAK8G,QAAQmF,eAAiBvJ,EAAKoE,QAAQmF,eAE3CjM,KAAK8G,QAAQmF,eAAiB,KAGlCjM,KAAK8G,QAAU,CACXvF,MAAO,KACPwF,SAAU,KACVqE,OAAQ,KACRxE,OAAQ,KACRyE,MAAO,KACPC,QAAS,KACTC,QAAS,GACTC,OAAQ,GACRC,SAAU,GACVxD,MAAO,GACPyD,UAAU,GAEd1L,KAAK8G,QAAQ6E,IAAM,CAACC,OAAQ,KAAMC,SAAU,MAC5C7L,KAAK8G,QAAQgF,OAAS,CAACC,KAAM,IAC7B/L,KAAK8G,QAAQkF,OAAS,CAACD,KAAM,IAC7B/L,KAAK8G,QAAQmF,eAAiB,IAGlCjM,KAAKwG,OAAS,yBAAe9D,EAAK8D,OAAQ,YAC1CxG,KAAKiG,kBAAoB,IAAI,oBAAkBvD,EAAKuD,mBACpDjG,KAAKyG,kBAAoB,IAAI,oBAAkB/D,EAAK+D,mBAO9C,cACN,OAAOzG,KAAK8G,QAAQmB,MAAM5E,MAAO8B,GACtBA,EAAE5B,SAIP,eACN,OAAOvD,KAAK8G,QAAQmB,MAAM1F,OAGpB,gBACN,OAAOvC,KAAK8G,QAAQmB,MAAMlF,OAAO,CAACmJ,EAAe/G,IACtC+G,EAAQ/G,EAAEgH,UAClB,GAGC,QAAQhH,EAAUxB,QACF,IAATA,GAAiC,MAATA,GAAiBA,GAAS,EACzD3D,KAAK8G,QAAQmB,MAAMrE,OAAOD,EAAO,EAAGwB,GAEpCnF,KAAK8G,QAAQmB,MAAMpE,KAAKsB,GAIxB,WAAWxB,GACf3D,KAAK8G,QAAQmB,MAAMrE,OAAOD,EAAO,GAG7B,UAAUK,EAAgBC,GAC9B,IAAI,MAAEgE,GAAUjI,KAAK8G,SACpBmB,EAAMjE,GAASiE,EAAMhE,IAAW,CAACgE,EAAMhE,GAASgE,EAAMjE,IAGnD,SAASE,EAAiBC,GAC9BnE,KAAK8G,QAAQmB,MAAMrE,OAAOO,EAAS,EAAGnE,KAAK8G,QAAQmB,MAAMrE,OAAOM,EAAS,GAAG,IAGtE,oBACN,GAAGlE,KAAK2C,MAAMyJ,cACV,OAAO,EAGX,OADuBpM,KAAK4K,aAAeH,EAAY4B,OAASrM,KAAK4K,aAAeH,EAAYI,kBACnE7K,KAAK+K,cAAsC,GAAtB/K,KAAKoD,OAAOb,OAGxD,iBACN,OAAOvC,KAAK8G,QAAQmB,MAAMlF,OAAO,CAACC,EAAS+E,IAChC,OAAP,wBAAW/E,GAAQ+E,EAAEuE,YACtB,IAGG,mBACN,OAAOtM,KAAK8G,QAAQmB,MAAMlF,OAAO,CAACC,EAAS+E,IAChC,OAAP,wBAAW/E,GAAQ+E,EAAEwE,cACtB,IAGG,aACN,OAAOvM,KAAK8G,QAAQmB,MAAMlF,OAAO,CAACC,EAAYmC,IACnCnC,EAAIE,OAAOiC,EAAE/B,QACd,IAGJ,aACN,OAAO6F,OAAOuD,KAAKxM,KAAKsM,YAAYvJ,OAAO,CAACC,EAASQ,KACjD,IAAIP,EAAWjD,KAAKsM,WAAW9I,GAE/B,MAAoB,gBAAhBP,EAAE+F,WAA+C,aAAf/F,EAAE+F,UAC7BhG,EAEJ,OAAP,wBAAWA,GAAG,CAAE,CAACC,EAAEO,IAAKP,EAAEuB,SAC3B,IAGG,oBACN,IAAI4F,EAAqB,eAAK,CAC1B5G,GAAIxD,KAAKwD,GACTrD,KAAMH,KAAKG,KACXsD,KAAMzD,KAAKyD,KACXqH,KAAM9K,KAAK8K,KACX9E,YAAahG,KAAKgG,YAClBQ,OAASxG,KAAKwG,OACdP,kBAAoBjG,KAAKiG,kBACzBQ,kBAAoBzG,KAAKyG,kBACzBsE,aAAe/K,KAAK+K,aACpBE,cAAgBjL,KAAKiL,cACrBD,gBAAkBhL,KAAKgL,gBACvBE,mBAAqBlL,KAAKkL,mBAC1BC,qBAAuBnL,KAAKkL,oBAC7B,CAACZ,cAAe,EAAMD,mBAAmB,IAmB5C,OAjBIrK,KAAK8G,UACLsD,EAAMtD,QAAU,OAAH,wBACN,eAAK,CACJvF,MAAQvB,KAAK8G,QAAQvF,MACrBwF,SAAW/G,KAAK8G,QAAQC,SACxBqE,OAASpL,KAAK8G,QAAQsE,OACtBxE,OAAS5G,KAAK8G,QAAQF,OACtByE,MAAQrL,KAAK8G,QAAQuE,MACrBC,QAAUtL,KAAK8G,QAAQwE,QACvBC,QAAUvL,KAAK8G,QAAQyE,QACvBC,OAASxL,KAAK8G,QAAQ0E,OACtBC,SAAWzL,KAAK8G,QAAQ2E,SACxBC,SAAW1L,KAAK8G,QAAQ4E,UACzB,CAACpB,cAAe,EAAMD,mBAAmB,KAAM,CAClDpC,MAAQjI,KAAK8G,QAAQmB,MAASjI,KAAK8G,QAAQmB,MAAiB7D,IAAKe,GAAcA,EAAEd,eAAkB,MAGpG+F,EAGD,uBACN,OAAIpK,KAAK4K,aAAeH,EAAYI,eAAiB7K,KAAK4K,aAAeH,EAAYgC,WAC1E/B,EAAiBgC,gBAEzB1M,KAAK4K,aAAeH,EAAYkC,QACxB3M,KAAKmL,qBAAuBT,EAAiBkC,qBAAuBlC,EAAiBmC,wBAErF7M,KAAKkL,mBAAqBR,EAAiBoC,mBAAqBpC,EAAiBqC,sBAI5E,aAAaC,G,0DAC7BA,EAAEC,iBACFD,EAAEE,kBACFlN,KAAK2C,MAAMwK,eAAc,GACzB,IAAIC,EAAOpN,KAAKsM,WACZe,EAAU,GACVzH,EAAS5F,KAAK4F,OAClBqD,OAAOuD,KAAK5G,GAAQ9B,QAASN,IACzB,IAAI8J,EAAMF,EAAK5J,GAAIoF,aAAaC,eAAiBuE,EAAK5J,GAAIrD,KAC1DkN,EAAQC,GAAO1H,EAAOpC,KAE1B,IAAI6B,EAAOrF,KACX,GAAGA,KAAKuN,eAAmBvN,KAAK+K,aAAc,CAC1C1F,EAAKuF,YAAcH,EAAYgC,WAC/B,UACU,EAAAe,EAAMC,KAAKpI,EAAK0F,aAAcsC,IAChChI,EAAK1C,MAAM+K,kBAAoBrI,EAAK2F,gBACpCnK,OAAOC,SAAS6M,KAAOtI,EAAK2F,iBAE5B3F,EAAKuF,YAAcH,EAAYkC,QAC/BtH,EAAKuI,YAAc,MAEzB,MAAO3N,IACAoF,EAAK1C,MAAM+K,kBAAoBrI,EAAK4F,cACrCpK,OAAOC,SAAS6M,KAAOtI,EAAK4F,eAE5B5F,EAAKuF,YAAcH,EAAY4B,MAC/BhH,EAAKuI,YAAc3N,QA3PvB,sBAAX,c,yBACW,sBAAX,c,2BACW,sBAAX,c,kCACW,sBAAX,c,2BACW,sBAAX,c,6BACW,sBAAX,c,6BACW,sBAAX,c,8BACW,sBAAX,c,6BACW,sBAAX,c,mCACW,sBAAX,c,kCACW,sBAAX,c,wCACW,sBAAX,c,wCACW,sBAAX,c,sCACW,sBAAX,c,oCACW,sBAAX,c,2CACW,sBAAX,c,yCACW,sBAAX,c,kCAEO,sBAAP,U,+BAoFS,sBAAT,Y,4BAMS,sBAAT,Y,6BAIS,sBAAT,Y,8BAMO,sBAAP,U,4BAQO,sBAAP,U,+BAIO,sBAAP,U,8BAKO,sBAAP,U,6BAIS,sBAAT,Y,kCAQS,sBAAT,Y,+BAMS,sBAAT,Y,iCAMS,sBAAT,Y,2BAMS,sBAAT,Y,2BAWS,sBAAT,Y,kCAqCS,sBAAT,Y,qCAWa,sBAAb,SAAO4N,O;;;;qdC5PL,MAAMC,EAAiC,CAAC,KAAK,KAAK,KAAK,KAAK,MAc5D,MAAMC,EAOT,YAAYnO,EAA8C,IACtDqJ,OAAOuD,KAAK5M,GAAOwE,IAAKiH,IACjByC,EAAgBhJ,QAAQuG,IAAU,GAAKzL,EAAMyL,KAC5CrL,KAAKqL,GAASzL,EAAMyL,MAKtB,aACN,OAAOyC,EAAgBE,OAAQC,QACF,IAAXjO,KAAKiO,IAAgC,MAAXjO,KAAKiO,IAI3C,WACN,OAAOH,EAAgBE,OAAQC,QACF,IAAXjO,KAAKiO,IAAgC,MAAXjO,KAAKiO,IAIrD,IAAIC,EAAwBC,GACxBnO,KAAKkO,GAAaC,GA3BV,sBAAX,c,yBACW,sBAAX,c,yBACW,sBAAX,c,yBACW,sBAAX,c,yBACW,sBAAX,c,yBAUS,sBAAT,Y,2BAMS,sBAAT,Y,yBAwBE,MAAMC,EAWT,YAAYxO,GACRI,KAAK6C,WAAWjD,GAGZ,WAAWA,GACXA,IAGJI,KAAKmG,UAAY,yBAAevG,EAAMuG,WAAW,GACjDnG,KAAKkG,eAAiB,yBAAetG,EAAMsG,gBAAgB,GAC3DlG,KAAKsG,kBAAoB,yBAAe1G,EAAM0G,mBAAmB,GACjEtG,KAAKoG,mBAAqB,yBAAexG,EAAMwG,oBAAoB,GACnEpG,KAAKqG,gBAAkB,yBAAezG,EAAMyG,iBAAiB,GAC7DrG,KAAKuG,yBAA2B,yBAAe3G,EAAM2G,0BAA0B,GAC/EvG,KAAK0G,WAAa,yBAAe9G,EAAM8G,WAAY,QACnD1G,KAAK6G,WAAa,yBAAejH,EAAMiH,WAAY,CAACvC,KAAM,IAC1DtE,KAAK2G,SAAW,yBAAe/G,EAAM+G,SAAU,CAACrC,KAAM,MA1B9C,sBAAX,c,gCACW,sBAAX,c,qCACW,sBAAX,c,wCACW,sBAAX,c,yCACW,sBAAX,c,sCACW,sBAAX,c,+CACW,sBAAX,c,iCACW,sBAAX,c,iCACW,sBAAX,c,+BAMO,sBAAP,U,+BAsBE,MAAM+J,EAcT,YAAYzO,GACRI,KAAK6C,WAAWjD,GAVZ,WAAWA,GACXA,IAGJI,KAAK0G,WAAa,yBAAe9G,EAAM8G,WAAY,QACnD1G,KAAK6G,WAAa,IAAIkH,EAAanO,EAAMiH,YACzC7G,KAAK2G,SAAW,IAAIoH,EAAanO,EAAM+G,YAV/B,sBAAX,c,iCACW,sBAAX,c,+BACW,sBAAX,c,iCAEO,sBAAP,U;;;;gQCvFE,MAAM2H,EAmIT,YAAa5L,EAAaC,GAlIjB,KAAAC,MAAiB,OAmItB5C,KAAK6C,WAAWH,EAAMC,GAzHhB,iBACN,IAAI4L,EAAuB,GAC3B,OAAKvO,KAAK8H,UAAoC,GAAxB9H,KAAK8H,SAASvF,QAGpCvC,KAAK8H,SAAShE,QAAS0K,IACfA,EAAQ/G,SAAW+G,EAAQ/G,QAAQlF,OAAS,GAC5CiM,EAAQ/G,QAAQ3D,QAAS+D,IACjBA,EAAO/E,QACP+E,EAAO/E,OAAOgB,QAASJ,IACnB6K,EAAW1K,KAAKH,EAAMvD,YAMnCoO,GAbIA,EAiBL,eACN,IAAIE,EAAqB,GACzB,OAAKzO,KAAK8H,UAAoC,GAAxB9H,KAAK8H,SAASvF,QAGpCvC,KAAK8H,SAAShE,QAAS0K,IACfA,EAAQ/G,SAAW+G,EAAQ/G,QAAQlF,OAAS,GAC5CiM,EAAQ/G,QAAQ3D,QAAS+D,IACjBA,EAAO/E,QACP+E,EAAO/E,OAAOgB,QAASJ,IACnB+K,EAAS5K,KAAKH,EAAMF,UAMjCiL,GAbIA,EAgBL,iBACN,OAAOzO,KAAK8H,SAAS/E,OAAO,CAACC,EAAS+E,IAC3B,OAAP,wBAAW/E,GAAQ+E,EAAEuE,YACtB,IAGG,mBACN,OAAOtM,KAAK8H,SAAS/E,OAAO,CAACC,EAAS+E,IAC3B,OAAP,wBAAW/E,GAAQ+E,EAAEwE,cACtB,IAGG,aACN,OAAOvM,KAAK8H,SAAS/E,OAAO,CAACC,EAAY+E,IAC9B/E,EAAIE,OAAO6E,EAAE3E,QACd,IAGJ,cACN,OAAOpD,KAAK8H,SAASzE,MAAO0E,GACjBA,EAAExE,SAIP,kBACN,OAAOvD,KAAK8H,SAASvF,OAGf,gBACN,OAAOvC,KAAK8H,SAAS/E,OAAO,CAACmJ,EAAenE,IACjCmE,EAAQnE,EAAEoE,UAClB,GAGC,WAAWqC,EAAkB7K,QACb,IAATA,GAAiC,MAATA,GAAiBA,GAAS,EACzD3D,KAAK8H,SAASlE,OAAOD,EAAO,EAAG6K,GAE/BxO,KAAK8H,SAASjE,KAAK2K,GAInB,cAAc7K,GAClB3D,KAAK8H,SAASlE,OAAOD,EAAO,GAGxB,aAAaK,EAAgBC,GACjC,IAAI,SAAE6D,GAAa9H,MAClB8H,EAAS9D,GAAS8D,EAAS7D,IAAW,CAAC6D,EAAS7D,GAAS6D,EAAS9D,IAG/D,YAAYE,EAAiBC,GACjCnE,KAAK8H,SAASlE,OAAOO,EAAS,EAAGnE,KAAK8H,SAASlE,OAAOM,EAAS,GAAG,IAG5D,oBACN,IAAI4D,EAAW9H,KAAK8H,SAAW9H,KAAK8H,SAAS1D,IAAK2D,GAAcA,EAAE1D,eAAkB,GAEpF,OAAO,OAAP,wBACO,eAAK,CAACb,GAAKxD,KAAKwD,GACfC,KAAOzD,KAAKyD,KACZtD,KAAOH,KAAKG,KACZoB,MAAQvB,KAAKuB,MACbwF,SAAW/G,KAAK+G,SAChB2H,KAAO1O,KAAK0O,QACd,CACF5G,SAAUA,IAIF,WAAWpF,EAAaC,GACpC3C,KAAKwD,GAAKd,EAAKc,GACfxD,KAAK2C,MAAQA,EACb3C,KAAKyD,KAAOf,EAAKe,KACjBzD,KAAKG,KAAO,yBAAeuC,EAAKvC,QAASH,KAAK4C,SAASF,EAAKc,MAC5DxD,KAAK0O,KAAO,yBAAehM,EAAKvC,KAAM,IACtCH,KAAK8H,SAAW,yBAA0BpF,EAAKoF,SAAqB,IACpE9H,KAAKuB,MAAQ,yBAAemB,EAAKnB,MAAO,IACxCvB,KAAK+G,SAAW,yBAAerE,EAAKqE,SAAU,KA9HtC,sBAAX,c,yBACW,sBAAX,c,2BACW,sBAAX,c,2BACW,sBAAX,c,2BACW,sBAAX,c,+BACW,sBAAX,c,4BACW,sBAAX,c,+BAGS,sBAAT,Y,+BAoBS,sBAAT,Y,6BAmBS,sBAAT,Y,+BAMS,sBAAT,Y,iCAMS,sBAAT,Y,2BAMS,sBAAT,Y,4BAMS,sBAAT,Y,gCAIS,sBAAT,Y,8BAMO,sBAAP,U,+BAQO,sBAAP,U,kCAIO,sBAAP,U,iCAKO,sBAAP,U,gCAIS,sBAAT,Y,kCAeO,sBAAP,U;;;;sQC1HE,MAAM4H,EA+FT,YAAYjM,EAAgBC,GA9FnB,KAAAC,MAAiB,UA+FtB5C,KAAK6C,WAAWH,EAAMC,GAtFhB,aACN,OAAO3C,KAAKyH,QAAQ1E,OAAO,CAACC,EAAY0E,IAC7B1E,EAAIE,OAAOwE,EAAEtE,QACd,IAGJ,gBACN,OAAOpD,KAAKyH,QAAQ1E,OAAO,CAACmJ,EAAerE,IACvCqE,GAAgBrE,EAAOsE,UAExB,GAGC,UAAUtE,EAAgBlE,GAC1BkE,EAAOvD,OACPuD,EAAOvD,KAAO,QAEE,IAATX,GAAiC,MAATA,GAAiBA,GAAS,EACzD3D,KAAKyH,QAAQ7D,OAAOD,EAAO,EAAGkE,GAE9B7H,KAAKyH,QAAQ5D,KAAKgE,GAIlB,aAAalE,GACjB3D,KAAKyH,QAAQ7D,OAAOD,EAAO,GAGvB,YAAYK,EAAgBC,GAChC,IAAI,QAAEwD,GAAYzH,MACjByH,EAAQzD,GAASyD,EAAQxD,IAAW,CAACwD,EAAQxD,GAASwD,EAAQzD,IAG3D,WAAWE,EAAiBC,GAChCnE,KAAKyH,QAAQ7D,OAAOO,EAAS,EAAGnE,KAAKyH,QAAQ7D,OAAOM,EAAS,GAAG,IAG1D,iBACN,OAAOlE,KAAKyH,QAAQlF,OAGd,cACN,OAAOvC,KAAKyH,QAAQpE,MAAOqE,GAChBA,EAAEnE,SAIP,iBACN,OAAOvD,KAAKyH,QAAQ1E,OAAO,CAACC,EAAS0E,IAC1B,OAAP,wBAAW1E,GAAQ0E,EAAE4E,YACtB,IAGG,mBACN,OAAOtM,KAAKyH,QAAQ1E,OAAO,CAACC,EAAS0E,IAC1B,OAAP,wBAAW1E,GAAQ0E,EAAE6E,cACtB,IAGG,oBACN,IAAI9E,EAAUzH,KAAKyH,QAAUzH,KAAKyH,QAAQrD,IAAKsD,GACpCA,EAAErD,eACR,GACL,OAAO,OAAP,wBACO,eAAK,CAACb,GAAIxD,KACTwD,GAAGC,KACHzD,KAAKyD,KACLtD,KAAMH,KAAKG,KACXoB,MAAOvB,KAAKuB,MACZqN,OAAQ5O,KAAK4O,UACf,CACAnH,QAASA,IAIX,WAAW/E,EAAgBC,GAC/B3C,KAAKwD,GAAKd,EAAKc,GACfxD,KAAKyD,KAAOf,EAAKe,KACjBzD,KAAKG,KAAO,yBAAeuC,EAAKvC,QAASH,KAAK4C,SAASF,EAAKc,MAC5DxD,KAAKuB,MAAQ,yBAAemB,EAAKnB,MAAO,IACxCvB,KAAK4O,OAAS,yBAAelM,EAAKkM,OAAQ,IAC1C5O,KAAKyH,QAAU,yBAAyB/E,EAAK+E,QAAmB,IAChEzH,KAAK2C,MAAQA,GA1FL,sBAAX,c,yBACW,sBAAX,c,2BACW,sBAAX,c,2BACW,sBAAX,c,4BACW,sBAAX,c,6BACW,sBAAX,c,8BAGS,sBAAT,Y,2BAMS,sBAAT,Y,8BAOO,sBAAP,U,8BAWO,sBAAP,U,iCAIO,sBAAP,U,gCAKO,sBAAP,U,+BAIS,sBAAT,Y,+BAIS,sBAAT,Y,4BAMS,sBAAT,Y,+BAMS,sBAAT,Y,iCAMS,sBAAT,Y,kCAgBO,sBAAP,U;;;;8bCnFE,MAAMkM,EAAyB,CAClC,MAAgB,CAAC,QAAS,WAAY,SAAU,YAAa,SAAU,WAAY,OACnF,SAAgB,CAAC,YACjB,OAAgB,CAAC,WAAY,WAAY,UACzC,OAAgB,CAAC,YACjB,SAAgB,CAAC,YACjB,WAAgB,CAAC,YACjB,cAAiB,CAAC,YAClB,SAAgB,CAAC,QAAS,WAAY,SAAU,YAAa,SAAU,WAAY,OACnF,UAAgB,CAAC,WAAY,OAAQ,YACrC,WAAgB,CAAC,WAAY,OAAQ,YACrC,YAAgB,CAAC,WAAY,OAAQ,YACrC,WAAgB,CAAC,WAAY,OAAQ,YACrC,WAAgB,CAAC,WAAY,OAAQ,YACrC,WAAgB,CAAC,YACjB,OAAgB,CAAC,YACjB,SAAgB,CAAC,YACjB,OAAgB,CAAC,YACjB,UAAgB,GAChB,OAAgB,GAChB,aAAgB,IAGPC,EAAsB,CAC/B,CAACxB,IAAK,OAAQ7E,MAAO,OAAQjE,MAAO,QACpC,CAAC8I,IAAK,WAAY7E,MAAO,WAAYjE,MAAO,YAC5C,CAAC8I,IAAK,QAAS7E,MAAO,QAASjE,MAAO,SACtC,CAAC8I,IAAK,WAAY7E,MAAO,SAAUjE,MAAO,YAC1C,CAAC8I,IAAK,YAAa7E,MAAO,WAAYjE,MAAO,aAC7C,CAAC8I,IAAK,SAAU7E,MAAO,UAAWjE,MAAO,UACzC,CAAC8I,IAAK,YAAa7E,MAAO,WAAYjE,MAAO,aAC7C,CAAC8I,IAAK,SAAU7E,MAAO,SAAUjE,MAAO,UACxC,CAAC8I,IAAK,eAAgB7E,MAAO,UAAWjE,MAAO,gBAC/C,CAAC8I,IAAK,WAAY7E,MAAO,UAAWjE,MAAO,YAC3C,CAAC8I,IAAK,MAAO7E,MAAO,MAAOjE,MAAO,QAGzBuK,EAAoB,CAC7B,KAAQ,OACR,SAAY,WACZ,MAAS,QACT,SAAY,SACZ,UAAa,WACb,OAAU,UACV,UAAa,WACb,OAAU,SACV,aAAgB,UAChB,SAAY,UACZ,IAAO,OAWJ,MAAMC,EAaT,YAAY5F,GACRpJ,KAAK6C,WAAWuG,GAGZ,WAAWA,EAAwB,IACvCpJ,KAAKiP,KAAO7F,EAAK6F,KACjBjP,KAAKkP,SAAW9F,EAAK8F,SACrBlP,KAAKmP,MAAQ/F,EAAK+F,MAClBnP,KAAKoP,SAAWhG,EAAKgG,SACrBpP,KAAKqP,UAAYjG,EAAKiG,UACtBrP,KAAKsP,OAASlG,EAAKkG,OACnBtP,KAAKuP,UAAYnG,EAAKmG,UACtBvP,KAAKuC,OAAS6G,EAAK7G,OACnBvC,KAAKwP,aAAepG,EAAKoG,aACzBxP,KAAK6J,SAAWT,EAAKS,SACrB7J,KAAKyP,IAAMrG,EAAKqG,IAGV,kBACN,IAAI/H,EAAI,GAMR,OALAuB,OAAOuD,KAAKuC,GAAmBjL,QAASsF,IAChCpJ,KAAKoJ,KACL1B,EAAE0B,GAAQ,eAAKpJ,KAAKoJ,OAGrB1B,EAEH,cAAc4F,EAAaoC,GAC/B1P,KAAKsN,GAAOoC,EAGR,iBAAiBpC,EAAaoC,GAClC1P,KAAKsN,GAAOoC,EAGR,iBAAiBpC,GACrBtN,KAAKsN,GAAO,MAhDJ,sBAAX,c,2BACW,sBAAX,c,+BACW,sBAAX,c,4BACW,sBAAX,c,+BACW,sBAAX,c,gCACW,sBAAX,c,6BACW,sBAAX,c,gCACW,sBAAX,c,6BACW,sBAAX,c,mCACW,sBAAX,c,+BACW,sBAAX,c,0BAMO,sBAAP,U,+BAcS,sBAAT,Y,gCASO,sBAAP,U,kCAIO,sBAAP,U,qCAIO,sBAAP,U;;;;sTCvHD3D,EAAW,oBAAQ,0CAEvBA,EAASgG,OAAOhG,EAASiG,WAAWV,SAAU,CAG1CW,MAAO,SAASrL,EAAOsL,GACrB,OAAQ,IAAOC,IAAIvL,IAGrB8K,OAAQ,SAAS9K,EAA2BsL,EAAe,IACzD,IAAIR,EAASQ,EAAQE,SAAW,aAAe,sBAC/C,OAAO,IAAOD,IAAIvL,GAAO8K,OAAOA,MAU/B,MAAMW,EA8DT,YAAYvN,GA1DA,KAAAwN,iBAAuC,GA2D/ClQ,KAAK6C,WAAWH,GAzDV,cACN,OAAuC,GAAhC1C,KAAKkQ,iBAAiB3N,OAGvB,aACN,OAAOvC,KAAKkQ,iBAGhB,YAAY9M,GACR,OAAOA,EAAOgB,IAAK4I,IACf,IAAImD,EAAkBnD,EAAE/M,OAAS,GAC7BmQ,EAAoBpD,EAAE/M,MAAQ+M,EAAE/M,MAAMoQ,WAAWrD,EAAEsD,UAAUC,iBAAkB,IAAMvD,EAAE8C,QAAQtO,QACnG,MAAO,CAACgC,GAAIxD,KAAK0D,MAAMF,GACnBrD,KAAM6M,EAAEsD,UACR9O,QAAS4O,EACTD,gBAAiBA,EACjBhN,UAAW6J,EAAE7J,aAKf,qBACN,IAAI,MAACO,GAAS1D,KACd,OAAQA,KAAK2C,MAAM6N,qBAAuB9M,EAAM+M,UAAY/M,EAAMgG,kBAAoB1J,KAAKoJ,MAAQH,OAAOuD,KAAKxM,KAAKoJ,MAAM7G,OAAS,EAG/H,WACJ,GAA2B,GAAvBvC,KAAK4J,eAAwB,CAC7B,IAAI,MAAClG,EAAK,MAAEf,GAAS3C,MACjB,GAACwD,GAAME,EACPgN,EAAc,GAClBA,EAAYhN,EAAMF,IAAMxD,KAAKoJ,KAAKsH,YAClC/G,EAASgH,WAAWC,OAAS5Q,KAAK6Q,YAAYC,KAAK9Q,MACnD,IAAI4F,EAAS,eAAKjD,EAAMiD,QAExB5F,KAAKkQ,iBAAmBvG,EAAS/D,EAAQ8K,EAAa,CAACpB,OAAQ,YAAc,GACzEtP,KAAKkQ,iBAAiB3N,OAAS,EAC/BvC,KAAK2C,MAAMoO,cAAcvN,EAAIxD,KAAKkQ,iBAAiB,GAAG1O,SAEtDxB,KAAK2C,MAAMoO,cAAcvN,OAAIwN,QAGjChR,KAAKkQ,iBAAmB,GAItB,iBACN,QAASlQ,KAAKoJ,KAAKS,SAGf,WAAWnH,GACf1C,KAAKoJ,KAAO,IAAI,iBAAe1G,EAAK0G,MAAQ,IAC5CpJ,KAAK2C,MAAQD,EAAKC,MAClB3C,KAAK0D,MAAQhB,EAAKgB,OAxDV,sBAAX,c,2BACW,sBAAX,c,uCAES,sBAAT,Y,4BAIS,sBAAT,Y,2BAiBS,sBAAT,Y,mCAKO,sBAAP,U,6BAoBS,sBAAT,Y,+BAIO,sBAAP,U;;;;qECnFL,sJAMO,MAAMuN,EAAkB,KAC3B,MAAMtO,EAAQ,CACVZ,IAAM,UAAOA,IACbS,MAAQ,UAAOA,MACfR,QAAS,UAAOA,QAChBtB,QAAS,UAAOA,QAChB0C,OAAS,GACTwC,OAAQ,GACR2D,QAAS,GACT2H,YAAa,EACbC,WAAW,EACX9I,KAAa,KACb+I,SAAS,EACTC,YAAY,EACZb,oBAAoB,EACpB9K,oBAAoB,EACpBgI,kBAAmB,EACnBtB,eAAgB,EAChBkF,gBAAiB,WACbtR,KAAKmR,WAAanR,KAAKmR,WAE3B,iBACI,OAAKnR,KAAKqI,KAGHrI,KAAKqI,KAAKvB,QAAQmB,MAAMlF,OAAO,CAACC,EAASmC,IACrC,OAAP,wBAAWnC,GAAQmC,EAAEmH,YACtB,IAJQ,IAMf,mBACI,OAAKtM,KAAKqI,KAGHrI,KAAKqI,KAAKvB,QAAQmB,MAAMlF,OAAO,CAACC,EAASmC,IACrC,OAAP,wBAAWnC,GAAQmC,EAAEoH,cACtB,IAJQ,IAMf,iBACI,OAAKvM,KAAKqI,KAGHrI,KAAKqI,KAAKvB,QAAQmB,MAAMlF,OAAO,CAACC,EAAemC,IAC3CnC,EAAIE,OAAOiC,EAAEoJ,YACX,IAJF,IAMf,cACI,QAAIvO,KAAKqI,MAAQrI,KAAKqI,KAAKvB,SAAW9G,KAAKqI,KAAKvB,QAAQmB,OAASjI,KAAKqI,KAAKvB,QAAQmB,MAAM1F,OAAS,IACvFvC,KAAKqI,KAAKvB,QAAQmB,MAAM5E,MAAO8B,GAC3BA,EAAE5B,UAMrB,cAAciB,GACVxE,KAAKqR,WAAa7M,GAEtB,mBACI,OAAOxE,KAAKqR,YAEhB,eACI,OAAOrR,KAAKqI,KAAOrI,KAAKqI,KAAKvB,QAAQmB,MAAM1F,OAAS,GAExD,kBACI,OAAOvC,KAAKkR,YAAclR,KAAKuR,SAAU,GAE7C,kBACI,OAAOvR,KAAKkR,YAAc,GAAKlR,KAAKuR,SAAW,GAEnD,oBACI,QAAOvR,KAAKqI,MAAOrI,KAAKqI,KAAKkF,eAEjCiE,SAAW,WACP,IAAIxR,KAAKqI,KACL,OAEJ,IAAI6I,EAAclR,KAAKqI,KAAKvB,QAAQmB,MAAMjI,KAAKkR,aAC3C9N,EAAS8N,EAAY9N,QACrB,yBAACmD,GAA4BvG,KAAKqI,KAAKpC,kBAE3CiL,EAAYzC,SAAS3K,QAASN,IAC1BxD,KAAKuJ,QAAQ/F,IAAM,IAElBJ,GAA2B,GAAjBA,EAAOb,QAAyC,GAA5BgE,IAC/BvG,KAAKkR,YAAclR,KAAKkR,YAAc,IAG9CO,SAAW,WACPzR,KAAKkR,YAAclR,KAAKkR,YAAc,GAE1CQ,QAAU,SAAUrJ,GAChBrI,KAAKqI,KAAOA,GAGhByB,cAAe,SAAUtG,EAAYgB,GACjCxE,KAAK4F,OAAOpC,GAAMgB,GAEtBuF,gBAAiB,SAAUvG,GACvBxD,KAAKuJ,QAAQ/F,IAAM,GAEvBuN,cAAe,SAAUvN,EAAYvD,GACjCD,KAAKoD,OAAOI,GAAMvD,IAG1B,OAAO,qBAAW0C,K;;;;yFC9GtB,wTAKO,MAAMgP,EAAmB,gBAA0C,MAO7DC,EAAuDhS,IAChE,IAAI+C,EACJ,GAAI/C,EAAMiS,UACNlP,EAAQ/C,EAAMiS,cACX,KAAIjS,EAAM+B,aAIf,MAAM,IAAIoD,MAAM,uDAHdpC,EAAQ,wBAAc,oBAChB+O,QAAQ,UAAQI,SAASnP,EAAO/C,EAAM+B,eAIhD,OACE,gBAACgQ,EAAiBI,SAAQ,CAACvN,MAAO7B,GAC/B/C,EAAM0J,Y;;;;4CCxBf7J,EAAOuS,QAAUC,Q;;;;4CCAjBxS,EAAOuS,QAAUE,O;;;;4CCAjBzS,EAAOuS,QAAUG,W","file":"main.chunk.js","sourcesContent":["import { Layout, Result, Skeleton } from \"antd\";\nimport { toJS } from 'mobx';\nimport { useLocalStore, useObserver } from 'mobx-react';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport config from \"./config\";\nimport \"./forms.core.m.css\";\nimport { FormStoreProvider } from \"./store/FormStoreProvider\";\n\nexport interface IFormRenderProps {\n    formId: string;\n    initialState? : any;\n}\n\nconst FormView = React.lazy(() => import(/* webpackChunkName: \"core\" */ \"./views/FormView\").then((module) => {return {default: module.FormView}}));\n\nconst FormWrapper : React.FC<IFormRenderProps> = (props: IFormRenderProps) => {\n\n    const localStore = useLocalStore(() => ({\n        isLoading: true as boolean,\n        response : null as any,\n        get status () : \"warning\"|\"error\"|\"success\" {\n            if (this.isLoading || !this.response || (this.response && !this.response.error)) {\n                return \"success\";\n            }\n            return this.response.error == \"InactiveForm\" ? \"warning\" : \"error\";\n        },\n        get message () : string {\n            if (!this.response || !this.response.error) {\n                return \"\";\n            }\n            if (this.response.error == \"InactiveForm\") {\n                return this.response.hasEnded ? `${this.response.name} is no longer accepting entries` : `${this.response.name} hasn't starting accepting entries`\n            }\n            return \"No content available at this location, please check the URL.\"\n        },\n        isRemoteError: false as boolean,\n        isThrownError: false as boolean\n    }));\n\n    React.useEffect(() => {\n        let fetchData = async function() {\n            try {\n                let _response: any = await fetch(`//${config.apiHost}/form/json/${props.formId}`);\n                let response = await _response.json();\n                localStore.response = response;\n                if (response.error) {\n                    if (response.error == \"InactiveForm\" && response.redirect) {\n                        window.location = response.redirect;\n                        return;\n                    }\n                    localStore.isRemoteError = true;\n                }\n            } catch (error) {\n                localStore.isThrownError = true;\n                console.error(error);\n            }\n            localStore.isLoading = false;\n        }\n\n        if(props.formId) {\n            fetchData();\n        }\n    }, []);\n\n    return useObserver(() => {\n        return <Layout style={{height: '100vh', overflow: 'hidden', backgroundColor: \"#ffff\"}}>\n        { localStore.isLoading ? <Skeleton active={true}/> : <>\n            {localStore.isRemoteError && <Result status={localStore.status} title={localStore.message}/>}\n            {localStore.isThrownError && <Result status=\"error\" title=\"There was an error fetching this content, please try again later\"/>}\n            {localStore.response && <React.Suspense fallback=\"Loading\">\n                <FormStoreProvider initialState={toJS(localStore.response)}>\n                    <FormView />\n                </FormStoreProvider>\n            </React.Suspense>}\n        </> }\n    </Layout>});\n}\n\nexport async function renderForm(selector:string, formId: string, initialState?: any) {\n    console.log(`lib-forms-core [${config.env}] [${config.version}]`);\n    if (initialState) {\n        render(\n            <Layout style={{height: '100vh', overflow: 'hidden'}}>\n                <React.Suspense fallback=\"Loading\">\n                    <FormStoreProvider initialState={initialState}>\n                        <FormView />\n                    </FormStoreProvider>\n                </React.Suspense>\n            </Layout>, document.querySelector(selector)\n        )\n    } else {\n        render (<FormWrapper formId={formId}/>, document.querySelector(selector))\n    }\n};","declare var __VERSION__ : string;\ndeclare var __API_HOST__ : string;\ndeclare var __DEBUG__ : boolean;\ndeclare var __ENV__ : string;\n\nconst matches = location.hostname.match(/^(dev|stage)-.*forms.li$/);\nconst env = location.hostname == \"localhost\" ? \"dev\" : (matches && matches.length >= 1 ? matches[1] : \"prod\");\nconst port = location.port && location.port.length > 0 ? `:${location.port}` : \"\";\nconst host = `${location.hostname}${port}`\n\nexport default {\n    env: typeof __ENV__ != \"undefined\" ? __ENV__ :env,\n    debug: typeof __DEBUG__ != \"undefined\" ? __DEBUG__ : (env == \"dev\" || env == \"stage\" || location.search.indexOf(\"$$debug\")),\n    version: typeof __VERSION__ != \"undefined\" ? __VERSION__ : \"6.6.2\",\n    apiHost : typeof __API_HOST__ != \"undefined\" ? __API_HOST__ : host\n}","import { action, computed, observable, toJS } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { valueOrDefault } from \"./common\";\nimport { Field } from \"./field\";\nimport { IFieldProps } from \"./field.properties\";\nimport { IValidationError } from \"./validation\";\n\nexport interface IColumn {\n    id  :string;\n    uuid?:string;\n    _type?: string;\n    name?:string;\n    title?:string;\n    span?:number;\n    fields?: IFieldProps[];\n}\n\nexport class Column implements IColumn {\n    readonly _type : string = \"Column\";\n    @observable uuid: string;\n    @observable id: string;\n    @observable name: string;\n    @observable span: number;\n    @observable title: string;\n    @observable fields: Field[];\n    store: FormStoreType;\n\n    @computed get errors() : IValidationError[] {\n        return this.fields.reduce((all: any[], f: Field)=>{\n            return all.concat(f.validator.errors);\n        }, <any[]>[]);\n    }\n\n    @computed get isValid() : boolean {\n        return this.fields.every((f, i) => {\n            return f.isValid;\n        });\n    }\n\n    @computed get idFieldMap() : { [key:string]:Field; } {\n        return this.fields.reduce((all: {}, f: Field)=>{\n            all[f.id] = f;\n            return all;\n        }, {});\n    }\n\n    @computed get uuidFieldMap() : { [key:string]:Field; } {\n        return this.fields.reduce((all: {}, f: Field)=>{\n            all[f.uuid] = f;\n            return all;\n        }, {});\n    }\n\n    @computed get numFields() : number {\n        return this.fields.length;\n    }\n\n    @action addField(field: Field, index?: number) : void {\n        if (typeof index != 'undefined' && index != null && index > -1) {\n            this.fields.splice(index, 0, field);\n        } else {\n            this.fields.push(field);\n        }\n    }\n\n    @action addFields(...fields: Field[]) {\n        fields.forEach((f: Field) => this.addField(f));\n    }\n\n    @action removeField(index: number) {\n        this.fields.splice(index, 1)\n    }\n\n    @action swapFields(index1: number, index2: number): void {\n        let { fields } = this;\n        [fields[index1], fields[index2]] = [fields[index2], fields[index1]];\n    }\n\n    @action moveField(atIndex: number, toIndex: number) {\n        this.fields.splice(toIndex, 0, this.fields.splice(atIndex, 1)[0]);\n    }\n\n    constructor(data: IColumn, store) {\n        this.initialize(data, store);\n    }\n\n    @computed get asPlainObject() : IColumn {\n        let fields = this.fields ?  this.fields.map((f) => {\n            return f.asPlainObject\n        }) : [];\n        return {\n            ...toJS({id: this.id,uuid: this.uuid,span: this.span,name: this.name,title: this.title}),\n            fields: fields\n        };\n    }\n\n    @action initialize(data: IColumn, store: FormStoreType) {\n        this.uuid = data.uuid;\n        this.store = store;\n        this.id = data.id;\n        this.span = data.span;\n        this.name = valueOrDefault(data.name, `${this._type}-${data.id}`);\n        this.title = valueOrDefault(data.title, '');\n        this.fields = valueOrDefault(<Field[]>data.fields, <Field[]>[]);\n    }\n}","const uuidv1 = require('uuid/v1');\n\nexport function valueOrDefault<T>(value: T, defaultValue: T|null): T {\n    return (typeof(value) !== 'undefined' && value !== null ? value : defaultValue);\n}\n","import { action, observable } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\n\nexport interface IPredicate {\n    uuid?: string;\n    field: string;\n    condition: any;\n    value?: any;\n    operator?: string;\n}\n\nexport class Predicate implements IPredicate {\n    static readonly PredicateConditions = [\"eq\",  \"neq\",  \"gt\",  \"lt\", \"gteq\", \"lteq\", \"hasval\", \"nothasval\"];\n    static readonly PredicateOperators = [\"or\", \"and\"];\n    uuid: string;\n    @observable field: string;\n    @observable condition: string;\n    @observable value: any;\n    @observable operator: string = \"or\";\n    store: FormStoreType;\n\n    @action initialize(data: IPredicate, store: FormStoreType) {\n        if (!data.condition || Predicate.PredicateConditions.indexOf(data.condition) == -1) {\n            throw new Error(`InvalidPredicateCondition - ${data.condition}`);\n        }\n        if(data.operator && Predicate.PredicateOperators.indexOf(data.operator) == -1) {\n            throw new Error(`InvalidPredicateOperator - ${data.operator}`);\n        }\n        this.uuid = data.uuid;\n        this.store = store;\n        this.field = data.field;\n        this.condition = data.condition;\n        this.value = data.value;\n        this.operator = data.operator;\n    }\n\n    constructor(data:IPredicate, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n}","import { action, computed, observable, observe } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { IPredicate, Predicate } from \"./condition.predicate\";\n\nexport interface ICondition {\n    predicates: IPredicate[],\n    ancestors?: string[],\n}\n\nexport class Condition {\n    @observable predicates: Predicate[];\n    @observable ancestors?: string[];\n    store: FormStoreType;\n\n    @action initialize(data: ICondition, store: FormStoreType) {\n        let predicates : Predicate[] = [];\n        data.predicates.forEach((p: IPredicate)=> {\n            predicates.push(new Predicate(p, store));\n        })\n        this.predicates = predicates;\n        this.ancestors = [];\n        this.store = store;\n        let self = this;\n\n        this.predicates.forEach((p) => {\n            self.ancestors.push(p.field);\n        });\n    }\n\n    constructor(data: ICondition, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n\n    @action addPredicates(...p : IPredicate[]) {\n        p.forEach((p) => {\n            this.predicates.push(new Predicate(p, this.store));\n            this.ancestors.push(p.field);\n        });\n    }\n\n    reduce(lhs:any, rhs:any, op: string) : boolean {\n        if (op == 'and') {\n            return lhs && rhs;\n        } else {\n            return lhs || rhs;\n        }\n    }\n\n    @computed get value() : boolean {\n        var state: boolean;\n        let self = this;\n\n        if (self.store.conditionsDisabled || !this.predicates || this.predicates.length == 0){\n            return true;\n        }\n\n        this.predicates.forEach((p, i) => {\n            let currentValue = self.store.values[p.field];\n            var result: any = null;\n            switch(p.condition) {\n                case \"eq\":\n                    result = currentValue == p.value;\n                    break;\n                case \"neq\":\n                    result = currentValue != p.value;\n                    break;\n                case \"gt\":\n                    result = currentValue > p.value;\n                    break;\n                case \"lt\":\n                    result = currentValue < p.value;\n                    break;\n                case \"gteq\":\n                    result = currentValue >= p.value;\n                    break;\n                case \"lteq\":\n                    result = currentValue <= p.value;\n                    break;\n                case \"hasval\":\n                    result = typeof(currentValue) != 'undefined' && currentValue != null && currentValue !== \"\";\n                    break;\n                case \"nothasval\":\n                    result = typeof(currentValue) == 'undefined' || currentValue == null || currentValue == \"\";\n                    break;\n                default:\n                    result = false;\n            }\n            state = (i == 0) ? result : this.reduce(state, result, p.operator);\n        });\n        return state;\n    }\n}","import { FormStoreType } from \"../store/FormStore\";\nimport { Column, IColumn } from \"./column\";\nimport { Condition, ICondition } from \"./condition\";\nimport { IPredicate, Predicate } from \"./condition.predicate\";\nimport { Field } from \"./field\";\nimport { IFieldProps } from \"./field.properties\";\nimport { Form } from \"./form\";\nimport { IFormProps } from \"./form.properties\";\nimport { IPage, Page } from \"./page\";\nimport { ISection, Section } from \"./section\";\nconst uuidv1 = require('uuid/v1');\n\nexport const EmptyForm : IFormProps = {\n    id: null,\n    name: \"Untitled Form\",\n    description: \"Form description\",\n    formLayoutOptions : {\n        showPageTitles : true,\n        showSteps: true,\n        showSectionBorders: false,\n        showPageBorders: false,\n        showSectionTitles: false,\n        validationDisablesPaging: true\n    },\n    layout : \"vertical\",\n    itemLayoutOptions : {\n        labelAlign : \"left\",\n        labelCol : {\"xl\" : {offset:0, span: 8}},\n        wrapperCol : {\"xl\" : {offset:0, span: 16}}\n    },\n    content: {\n        title: \"Form title\",\n        subtitle: \"Form subtitle\"\n    }\n}\n\nexport class Factory {\n    static ensureIds<T>(item: T) {\n        if (!item['uuid']) {\n            item['uuid'] = uuidv1();\n        }\n\n        if(!item['id']) {\n            item['id'] = (1e6 * Math.random()).toFixed(0) + \"\";\n        }\n    }\n\n    static makePredicates(store: FormStoreType, ...predicates: IPredicate[]) : Predicate[] {\n        let response: Predicate[] = [];\n        predicates.forEach((predicate: IPredicate) => {\n            Factory.ensureIds(predicate);\n            response.push(new Predicate(predicate, store));\n        });\n        return response;\n\n    }\n\n    static makeCondition(store: FormStoreType, condition: ICondition) : Condition {\n        let predicates = Factory.makePredicates(store, ...condition.predicates);\n        return new Condition({predicates: predicates}, store);\n    }\n\n    static makeFields(store: FormStoreType, ...fields: IFieldProps[]) : Field[] {\n        if (!fields || fields.length == 0) {\n            return <Field[]>[];\n        }\n        return fields.reduce((r: Field[], f: IFieldProps) => {\n            Factory.ensureIds(f);\n            r.push(new Field({...f, condition: f.condition}, store));\n            return r;\n        }, <Field[]>[]);\n    }\n\n    static makeColumns(store: FormStoreType, ...columns: IColumn[]) : Column[] {\n        let response : Column[] = [];\n        if (!columns || columns.length == 0) {\n            return response;\n        }\n\n        columns.forEach((c: IColumn) => {\n            Factory.ensureIds(c);\n            let fields = c.fields && c.fields.length > 0 ? Factory.makeFields(store, ...c.fields) : <Field[]>[];\n            if (!c.span) {\n                c.span = Math.floor(24/columns.length);\n            }\n            let column = new Column({...c, fields: fields}, store);\n            response.push(column);\n        })\n        return response;\n    }\n\n    static makeSections(store: FormStoreType, ...sections: ISection[]) : Section[] {\n        let response: Section[] = [];\n        if (!sections || sections.length == 0) {\n            return <Section[]>[];\n        }\n        sections.forEach((s: ISection) => {\n            Factory.ensureIds(s);\n            let columns = s.columns && s.columns.length > 0 ? Factory.makeColumns(store, ...s.columns) : <Column[]>[];\n            response.push(new Section({...s, columns: columns}, store));\n        });\n        return response;\n    }\n\n    static makePages(store: FormStoreType, ...pages: IPage[]) : Page[] {\n        if (!pages || pages.length == 0) {\n            return <Page[]>[];\n        }\n        let response: Page[] = [];\n        pages.forEach((page: IPage) => {\n            Factory.ensureIds(page);\n            let sections = page.sections && page.sections.length > 0 ? Factory.makeSections(store, ...page.sections) : <Section[]>[];\n            response.push(new Page({...page, sections: sections}, store));\n        });\n        return response;\n    }\n\n    static makeForm(store: FormStoreType, formData: IFormProps) : Form {\n        let form: Form;\n        if (formData && formData.content && formData.content.pages) {\n            formData.content.pages = Factory.makePages(store, ...formData.content.pages)\n            form = new Form(formData, store);\n        } else {\n            let _formData = formData ? formData : {id: null, content: {pages: []}}\n            form = new Form(_formData, store);\n        }\n        return form;\n    }\n}","import { action, computed, observable, observe, toJS, autorun } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { Condition, ICondition } from \"./condition\";\nimport { IFieldOptions } from \"./field.options\";\nimport { IComponentProps, IFieldProps, IFieldRuntimeProps, IFieldStorage } from \"./field.properties\";\nimport { ItemLayoutOptions } from './layout';\nimport { IValidationRule, ValidationRule } from \"./validation\";\nimport { Validator } from \"./validator\";\nimport { observer } from 'mobx-react-lite';\n\n\nexport class Field implements IFieldProps, IFieldRuntimeProps {\n    readonly _type : string = \"Field\";\n    uuid: string;\n    @observable id: string;\n    @observable name: string;\n\n    @observable type: string;\n    @observable label: string;\n    @observable value : any;\n    @observable touched: boolean;\n    @observable inputType: string;\n    @observable helpText: string;\n    @observable placeholder: string;\n    fieldOptions: IFieldOptions;\n    children: any;\n    @observable condition: Condition;\n    @observable storage: IFieldStorage;\n    store: FormStoreType;\n    @observable location: any;\n    @observable conditionState: boolean;\n    @observable validator : Validator;\n    validation: IValidationRule;\n    @observable componentProps: IComponentProps;\n    @observable itemLayoutOptions : ItemLayoutOptions;\n    _dispose : any;\n\n    @action mergeUpdate(data: Partial<IFieldProps>) {\n        this.id = data.id ? data.id : this.id;\n        this.name = data.name;\n        this.label = data.label;\n        this.helpText = data.helpText;\n        this.placeholder = data.placeholder;\n        let {fieldOptions} = data;\n        this.fieldOptions = {...this.fieldOptions, ...{valuePropName: fieldOptions ? fieldOptions.valuePropName : this.fieldOptions.valuePropName}};\n        this.componentProps = <IComponentProps>{...this.componentProps, ...data.componentProps};\n        return;\n    }\n\n    @action initialize(data: IFieldProps, store: FormStoreType) {\n        this.store = store;\n        this.id = data.id;\n        this.uuid = data.uuid;\n        this.name = data.name || `${this._type}_${data.id}`;\n        this.type = data.type;\n        this.label = data.label;\n        this.inputType = data.inputType;\n        this.fieldOptions = data.fieldOptions ? Object.assign({id: data.id}, {...data.fieldOptions}) : {id: data.id};\n        this.fieldOptions.valuePropName = (data.fieldOptions||{}).valuePropName || this.name;\n        this.validation = data.validation;\n        this.validator = new Validator({rule: new ValidationRule(data.validation), field: this, store: store});\n        this.storage = data.storage;\n        this.label = data.label;\n        this.helpText = data.helpText;\n        this.placeholder = data.placeholder;\n        this.children = data.children || {};\n        this.componentProps = data.componentProps || {};\n        this.location = data.location || {};\n        this.touched = false;\n        this.itemLayoutOptions = new ItemLayoutOptions(data.itemLayoutOptions);\n\n        if (this.componentProps && this.componentProps['defaultValue']) {\n            this.setValue(this.componentProps['defaultValue']);\n        } else if (this.componentProps && this.componentProps['defaultChecked']) {\n            this.setValue(this.componentProps['defaultChecked']);\n        }\n\n        if (!this.fieldOptions.valuePropName) {\n            this.fieldOptions.valuePropName = `${this.id}_value`;\n        }\n\n        if(this.inputType == 'daterange') {\n            this.componentProps[\"startValuePropsName\"] = !!this.componentProps[\"startValuePropsName\"] ? this.componentProps[\"startValuePropsName\"] : `start_date`;\n            this.componentProps[\"endValuePropsName\"] = !!this.componentProps[\"endValuePropsName\"] ? this.componentProps[\"endValuePropsName\"] : `end_date`;\n        }\n\n        if (data.condition) {\n            this.setCondition(data.condition);\n        } else {\n            this.condition = null;\n            this.conditionState = true;\n        }\n        this.validate();\n        return;\n    }\n\n    @computed get className() : string {\n        return `.fl-field .fl-${this.inputType}${this.type?'-'+this.type:''}`;\n    }\n\n    @computed get isTouched() : boolean {\n        return this.store.touched[this.id];\n    }\n\n    @computed get isValidateable() {\n        return this.validator.isValidateable;\n    }\n\n    @computed get isValid() : boolean {\n        return this.validator.isValid;\n    }\n\n    @computed get isHidden() : boolean {\n        return this.inputType == \"hidden\";\n    }\n\n    @computed get isRequired() : boolean {\n        return !!this.validator.rule.presence;\n    }\n\n    @computed get currentValue() {\n        return this.value\n    }\n\n    @computed get isDisabled() : boolean {\n        return !this.conditionState;\n    }\n\n    @action setValue(value: any) {\n        this.value = value;\n        this.store.setFieldValue(this.id, value);\n        this.validate();\n    }\n\n    @action setTouched() {\n        this.touched = true;\n        this.store.setFieldTouched(this.id);\n        this.validate();\n    }\n\n    @action setConditionState(value: boolean) {\n        this.conditionState = value;\n        this.validate();\n    }\n\n    @action setCondition(condition: ICondition) {\n        if(condition == null || !condition.predicates || condition.predicates.length == 0) {\n            this.condition = null;\n            this.conditionState = true;\n            if(this._dispose) {\n                this._dispose();\n            }\n            this.validate();\n            return;\n        }\n\n        this.condition = new Condition(condition, this.store);\n        this.conditionState = this.condition.value;\n\n        this._dispose = observe(this.condition, \"value\", (change) => {\n            this.setConditionState(change.newValue)\n            if(change.newValue == true) {\n                this.validate();\n            }\n        }, true);\n    }\n\n    @action validate() {\n\n       this.validator.validate();\n    }\n\n    @computed get asPlainObject() : IFieldProps {\n        let clone = {...this};\n        delete clone.store;\n        delete clone.validator;\n        clone.value = null;\n        clone.conditionState = false;\n        return toJS(clone, {recurseEverything: true, detectCycles: true});\n    }\n\n    @computed get serialize(): string  {\n        let clone = this.asPlainObject;\n        return JSON.stringify(clone);\n    }\n\n    constructor(data: IFieldProps, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n}","import axios from \"axios\";\nimport { action, computed, observable, toJS } from \"mobx\";\nimport { FormEvent } from \"react\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { valueOrDefault } from \"./common\";\nimport { Field } from \"./field\";\nimport { IFormContent, IFormProps, IFormStatus, IFormTenant } from \"./form.properties\";\nimport { FormLayoutOptions, ItemLayoutOptions } from './layout';\nimport { Page } from \"./page\";\nimport { IValidationError } from \"./validation\";\n\nexport enum SubmitState {\n    NOT_SUBMITTED = \"Not Submitted\",\n    SUBMITTING = \"Submitting\",\n    SUCCESS = \"Success\",\n    ERROR = \"Error\"\n}\n\nexport enum SubmitResultType {\n    AWAITING_SUBMIT = \"Awaiting Submit\",\n    SUCCESS_REDIRECT = \"Success Redirect\",\n    ERROR_REDIRECT = \"Error Redirect\",\n    DEFAULT_SUCCESS_MESSAGE = \"Default Success Message\",\n    DEFAULT_ERROR_MESSAGE = \"Default Error Message\",\n    USER_SUCCESS_MESSAGE = \"User Success Message\",\n    USER_ERROR_MESSAGE = \"User Error Message\"\n}\n\nexport class Form implements IFormProps {\n    store: FormStoreType\n    uuid: string;\n\n    @observable id: string;\n    @observable exid: string;\n    @observable description: string;\n    @observable name: string;\n    @observable tenant: IFormTenant;\n    @observable status: IFormStatus;\n    @observable content: IFormContent;\n    @observable layout: any;\n    @observable submitTarget: string;\n    @observable submitError: string;\n    @observable formLayoutOptions: FormLayoutOptions;\n    @observable itemLayoutOptions: ItemLayoutOptions;\n    @observable successRedirect: string;\n    @observable errorRedirect: string;\n    @observable submitSuccessMessage?: string;\n    @observable submitErrorMessage?: string;\n    @observable submitState: SubmitState = SubmitState.NOT_SUBMITTED;\n\n    @action initialize(data: IFormProps, store: FormStoreType) {\n        this.store = store;\n        this.id = data.id;\n        this.name = data.name;\n        this.uuid = data.uuid;\n        this.exid = valueOrDefault(data.exid, null);\n        this.description = valueOrDefault(data.description, null);\n        this.submitTarget = data.submitTarget;\n        this.successRedirect = data.successRedirect;\n        this.errorRedirect = data.errorRedirect;\n        this.submitErrorMessage = data.submitErrorMessage;\n        this.submitSuccessMessage = data.submitErrorMessage;\n        if (data.content) {\n            this.content = {\n                title: valueOrDefault(data.content.title, null),\n                subtitle: valueOrDefault(data.content.subtitle, null),\n                labels: valueOrDefault(data.content.labels, null),\n                offset: valueOrDefault(data.content.offset, null),\n                width: valueOrDefault(data.content.width, null),\n                sidebar: valueOrDefault(data.content.sidebar, null),\n                scripts: valueOrDefault(data.content.scripts, null),\n                styles: valueOrDefault(data.content.styles, null),\n                datasets: valueOrDefault(data.content.datasets, null),\n                pages: valueOrDefault(<Page[]>data.content.pages, []),\n                paginate: valueOrDefault(data.content.paginate, false)\n            }\n            if (data.content.css) {\n                this.content.css = {\n                    inline : valueOrDefault(data.content.css.inline, []),\n                    external: valueOrDefault(data.content.css.external, [])\n                }\n            } else {\n                this.content.css = {inline: null, external: null}\n            }\n            if (data.content.header) {\n                this.content.header = {\n                    rows: valueOrDefault(data.content.header.rows, [])\n                }\n            } else {\n                this.content.header = {rows: []}\n            }\n\n            if (data.content.footer) {\n                this.content.footer = {\n                    rows: valueOrDefault(data.content.footer.rows, [])\n                }\n            } else {\n                this.content.footer = {rows: []}\n            }\n\n            if (data.content.trackingPixels) {\n                this.content.trackingPixels = data.content.trackingPixels;\n            } else {\n                this.content.trackingPixels = []\n            }\n        } else {\n            this.content = {\n                title: null,\n                subtitle: null,\n                labels: null,\n                offset: null,\n                width: null,\n                sidebar: null,\n                scripts: [],\n                styles: [],\n                datasets: [],\n                pages: [],\n                paginate: true\n            }\n            this.content.css = {inline: null, external: null}\n            this.content.header = {rows: []}\n            this.content.footer = {rows: []}\n            this.content.trackingPixels = [];\n        }\n\n        this.layout = valueOrDefault(data.layout, \"vertical\");\n        this.formLayoutOptions = new FormLayoutOptions(data.formLayoutOptions);\n        this.itemLayoutOptions = new ItemLayoutOptions(data.itemLayoutOptions);\n    }\n\n    constructor(data: IFormProps, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n\n    @computed get isValid() : boolean {\n        return this.content.pages.every((p: Page) => {\n            return p.isValid;\n        })\n    }\n\n    @computed get numPages() : number {\n        return this.content.pages.length;\n    }\n\n    @computed get numFields() : number {\n        return this.content.pages.reduce((total: number, p: Page) => {\n            return total + p.numFields;\n        }, 0);\n    }\n\n    @action addPage(p : Page, index?: number) {\n        if (typeof index != 'undefined' && index != null && index > -1) {\n            this.content.pages.splice(index, 0, p);\n        } else {\n            this.content.pages.push(p)\n        }\n    }\n\n    @action removePage(index: number) : void {\n        this.content.pages.splice(index, 1);\n    }\n\n    @action swapPages(index1: number, index2: number): void {\n        let { pages } = this.content;\n        [pages[index1], pages[index2]] = [pages[index2], pages[index1]];\n    }\n\n    @action movePage(atIndex: number, toIndex: number) : void {\n        this.content.pages.splice(toIndex, 0, this.content.pages.splice(atIndex, 1)[0]);\n    }\n\n    @computed get isSubmittable() : boolean {\n        if(this.store.preventSubmit) {\n            return false;\n        }\n        let validSubmitState = this.submitState == SubmitState.ERROR || this.submitState == SubmitState.NOT_SUBMITTED;\n        return validSubmitState && !!this.submitTarget && this.errors.length == 0;\n    }\n\n    @computed get idFieldMap() : { [key:string]:Field; }  {\n        return this.content.pages.reduce((all: {}, s: Page)=>{\n            return {...all, ...s.idFieldMap}\n        }, {});\n    }\n\n    @computed get uuidFieldMap() : { [key:string]:Field; }  {\n        return this.content.pages.reduce((all: {}, s: Page)=>{\n            return {...all, ...s.uuidFieldMap}\n        }, {});\n    }\n\n    @computed get errors() : IValidationError[] {\n        return this.content.pages.reduce((all: any[], p: Page)=>{\n            return all.concat(p.errors);\n        }, <any[]>[]);\n    }\n\n    @computed get values() : { [key:string]: any; } {\n        return Object.keys(this.idFieldMap).reduce((all: {}, id: string) => {\n            let f: Field = this.idFieldMap[id];\n            // HTMLFragment and TextBlock have no value\n            if (f.inputType ==  'htmlfragment' || f.inputType == 'textblock') {\n                return all;\n            }\n            return {...all, [f.id]: f.value}\n        }, {});\n    }\n\n    @computed get asPlainObject() {\n        let clone : IFormProps = toJS({\n            id: this.id,\n            name: this.name,\n            uuid: this.uuid,\n            exid: this.exid,\n            description: this.description,\n            layout : this.layout,\n            formLayoutOptions : this.formLayoutOptions,\n            itemLayoutOptions : this.itemLayoutOptions,\n            submitTarget : this.submitTarget,\n            errorRedirect : this.errorRedirect,\n            successRedirect : this.successRedirect,\n            submitErrorMessage : this.submitErrorMessage,\n            submitSuccessMessage : this.submitErrorMessage\n        }, {detectCycles : true, recurseEverything: true})\n\n        if (this.content) {\n            clone.content = {\n                ...toJS({\n                    title : this.content.title,\n                    subtitle : this.content.subtitle,\n                    labels : this.content.labels,\n                    offset : this.content.offset,\n                    width : this.content.width,\n                    sidebar : this.content.sidebar,\n                    scripts : this.content.scripts,\n                    styles : this.content.styles,\n                    datasets : this.content.datasets,\n                    paginate : this.content.paginate\n                }, {detectCycles : true, recurseEverything: true}),\n                pages : this.content.pages ? (this.content.pages as Page[]).map((p) => {return p.asPlainObject}) : []\n            }\n        }\n        return clone;\n    }\n\n    @computed get submitResultType() : SubmitResultType {\n        if (this.submitState == SubmitState.NOT_SUBMITTED || this.submitState == SubmitState.SUBMITTING) {\n            return SubmitResultType.AWAITING_SUBMIT;\n        }\n        if(this.submitState == SubmitState.SUCCESS) {\n            return this.submitSuccessMessage ? SubmitResultType.USER_SUCCESS_MESSAGE : SubmitResultType.DEFAULT_SUCCESS_MESSAGE;\n        } else {\n            return this.submitErrorMessage ? SubmitResultType.USER_ERROR_MESSAGE : SubmitResultType.DEFAULT_ERROR_MESSAGE;\n        }\n    }\n\n    @action.bound async handleSubmit(e: FormEvent) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.store.setSubmitting(true);\n        let meta = this.idFieldMap;\n        let payload = {};\n        let values = this.values;\n        Object.keys(values).forEach((id: string) => {\n            let key = meta[id].fieldOptions.valuePropName || meta[id].name;\n            payload[key] = values[id];\n        });\n        let self = this;\n        if(this.isSubmittable && !!this.submitTarget) {\n            self.submitState = SubmitState.SUBMITTING;\n            try {\n                await axios.post(self.submitTarget, payload);\n                if(!self.store.preventRedirects && self.successRedirect) {\n                    window.location.href = self.successRedirect;\n                } else {\n                    self.submitState = SubmitState.SUCCESS;\n                    self.submitError = null;\n                }\n            } catch (error) {\n                if (!self.store.preventRedirects && self.errorRedirect) {\n                    window.location.href = self.errorRedirect;\n                } else {\n                    self.submitState = SubmitState.ERROR;\n                    self.submitError = error;\n                }\n            }\n        }\n    }\n}","import { observable, action, computed } from \"mobx\";\nimport {valueOrDefault} from \"./common\";\n\nexport type ScreenWidth = \"xs\"|\"sm\"|\"md\"|\"lg\"|\"xl\";\nexport const AllScreenWidths: ScreenWidth[] = [\"xs\",\"sm\",\"md\",\"lg\",\"xl\"];\n\nexport interface ColSpanOffset {\n    span: number;\n    offset?: number;\n}\n\nexport interface ILayoutOption {\n    xs?  : ColSpanOffset;\n    sm?  : ColSpanOffset;\n    md?  : ColSpanOffset;\n    lg?  : ColSpanOffset;\n    xl?  : ColSpanOffset;\n}\nexport class LayoutOption implements ILayoutOption {\n    @observable xs  : ColSpanOffset;\n    @observable sm  : ColSpanOffset;\n    @observable md  : ColSpanOffset;\n    @observable lg  : ColSpanOffset;\n    @observable xl  : ColSpanOffset;\n\n    constructor(props: {[key in ScreenWidth]?: ColSpanOffset}={}) {\n        Object.keys(props).map((width: ScreenWidth) => {\n            if(AllScreenWidths.indexOf(width) > -1 && props[width]){\n                this[width] = props[width];\n            }\n        })\n    }\n\n    @computed get unused() : ScreenWidth[] {\n        return AllScreenWidths.filter((d) => {\n            return typeof this[d] == 'undefined' || this[d] == null\n        })\n    }\n\n    @computed get used() : ScreenWidth[] {\n        return AllScreenWidths.filter((d) => {\n            return typeof this[d] != 'undefined' && this[d] != null\n        })\n    }\n\n    add(dimension: ScreenWidth, colspan: ColSpanOffset) {\n        this[dimension] = colspan;\n    }\n\n}\n\nexport interface IFormLayoutOptions {\n    showSteps?: boolean,\n    showPageTitles?: boolean,\n    showSectionTitles?: boolean,\n    showSectionBorders? : boolean,\n    showPageBorders?: boolean,\n    validationDisablesPaging?: boolean;\n    labelAlign?: \"left\" | \"right\";\n    wrapperCol?: ColSpanOffset;\n    labelCol?: ColSpanOffset;\n}\n\nexport class FormLayoutOptions implements IFormLayoutOptions {\n    @observable showSteps: boolean;\n    @observable showPageTitles: boolean\n    @observable showSectionTitles: boolean\n    @observable showSectionBorders : boolean\n    @observable showPageBorders: boolean\n    @observable validationDisablesPaging: boolean\n    @observable labelAlign: \"left\" | \"right\"\n    @observable wrapperCol: ColSpanOffset\n    @observable labelCol: ColSpanOffset\n\n    constructor(props: IFormLayoutOptions) {\n        this.initialize(props);\n    }\n\n    @action initialize(props: IFormLayoutOptions) {\n        if(!props) {\n            return;\n        }\n        this.showSteps = valueOrDefault(props.showSteps, true);\n        this.showPageTitles = valueOrDefault(props.showPageTitles, true);\n        this.showSectionTitles = valueOrDefault(props.showSectionTitles, false);\n        this.showSectionBorders = valueOrDefault(props.showSectionBorders, false);\n        this.showPageBorders = valueOrDefault(props.showPageBorders, false);\n        this.validationDisablesPaging = valueOrDefault(props.validationDisablesPaging, true);\n        this.labelAlign = valueOrDefault(props.labelAlign, \"left\");\n        this.wrapperCol = valueOrDefault(props.wrapperCol, {span: 8});\n        this.labelCol = valueOrDefault(props.labelCol, {span: 6});\n    }\n}\n\nexport interface IItemLayoutOptions {\n    labelAlign? : \"left\"|\"right\";\n    labelCol?: ILayoutOption;\n    wrapperCol?: ILayoutOption;\n}\n\nexport class ItemLayoutOptions implements IItemLayoutOptions {\n    @observable labelAlign : \"left\"|\"right\";\n    @observable labelCol: LayoutOption;\n    @observable wrapperCol: LayoutOption;\n\n    @action initialize(props: IItemLayoutOptions) {\n        if(!props) {\n            return;\n        }\n        this.labelAlign = valueOrDefault(props.labelAlign, \"left\");\n        this.wrapperCol = new LayoutOption(props.wrapperCol);\n        this.labelCol = new LayoutOption(props.labelCol);\n    }\n\n    constructor(props: IItemLayoutOptions) {\n        this.initialize(props);\n    }\n}\n\n// export type ColumnLayout = { [key in ScreenWidth]?: ColSpanOffset };","import { action, computed, observable, toJS } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { Column } from \"./column\";\nimport { valueOrDefault } from \"./common\";\nimport { Field } from \"./field\";\nimport { ISection, Section } from \"./section\";\nimport { IValidationError } from \"./validation\";\n\nexport interface IPage {\n    id: string;\n    uuid?:string;\n    name: string;\n    icon?: string;\n    sections: ISection[];\n    title?: string;\n    subtitle?: string;\n}\n\nexport class Page implements IPage {\n    readonly _type : string = \"Page\";\n    @observable id: string;\n    @observable uuid: string;\n    @observable name: string;\n    @observable icon: string;\n    @observable sections: Section[];\n    @observable title: string;\n    @observable subtitle: string;\n    store: FormStoreType;\n\n    @computed get fieldNames() : string[] {\n        let fieldNames: string[] = [];\n        if (!this.sections || this.sections.length == 0) {\n            return fieldNames;\n        }\n        this.sections.forEach((section: Section)=>{\n            if (section.columns && section.columns.length > 0) {\n                section.columns.forEach((column: Column) => {\n                    if (column.fields) {\n                        column.fields.forEach((field: Field)=> {\n                            fieldNames.push(field.name);\n                        });\n                    }\n                })\n            }\n        });\n        return fieldNames;\n    }\n\n\n    @computed get fieldIds() : string[] {\n        let fieldIds: string[] = [];\n        if (!this.sections || this.sections.length == 0) {\n            return fieldIds;\n        }\n        this.sections.forEach((section: Section)=>{\n            if (section.columns && section.columns.length > 0) {\n                section.columns.forEach((column: Column) => {\n                    if (column.fields) {\n                        column.fields.forEach((field: Field)=> {\n                            fieldIds.push(field.id);\n                        });\n                    }\n                })\n            }\n        });\n        return fieldIds;\n    }\n\n    @computed get idFieldMap() : { [key:string]:Field; }  {\n        return this.sections.reduce((all: {}, s: Section)=>{\n            return {...all, ...s.idFieldMap}\n        }, {});\n    }\n\n    @computed get uuidFieldMap() : { [key:string]:Field; }  {\n        return this.sections.reduce((all: {}, s: Section)=>{\n            return {...all, ...s.uuidFieldMap}\n        }, {});\n    }\n\n    @computed get errors() : IValidationError[] {\n        return this.sections.reduce((all: any[], s: Section)=>{\n            return all.concat(s.errors);\n        }, <any[]>[]);\n    }\n\n    @computed get isValid() : boolean {\n        return this.sections.every((s) => {\n            return s.isValid;\n        });\n    }\n\n    @computed get numSections() : number {\n        return this.sections.length;\n    }\n\n    @computed get numFields() : number {\n        return this.sections.reduce((total: number, s : Section) => {\n            return total + s.numFields;\n        }, 0);\n    }\n\n    @action addSection(section: Section, index?: number) : void {\n        if (typeof index != 'undefined' && index != null && index > -1) {\n            this.sections.splice(index, 0, section);\n        } else {\n            this.sections.push(section);\n        }\n    }\n\n    @action removeSection(index: number) {\n        this.sections.splice(index, 1)\n    }\n\n    @action swapSections(index1: number, index2: number): void {\n        let { sections } = this;\n        [sections[index1], sections[index2]] = [sections[index2], sections[index1]];\n    }\n\n    @action moveSection(atIndex: number, toIndex: number) {\n        this.sections.splice(toIndex, 0, this.sections.splice(atIndex, 1)[0]);\n    }\n\n    @computed get asPlainObject() : IPage {\n        let sections = this.sections ? this.sections.map((s) => {return s.asPlainObject}) : [];\n\n        return {\n            ...toJS({id : this.id,\n                uuid : this.uuid,\n                name : this.name,\n                title : this.title,\n                subtitle : this.subtitle,\n                icon : this.icon\n            }),\n            sections: sections\n        }\n    }\n\n    @action private initialize(data: IPage, store: FormStoreType) {\n        this.id = data.id;\n        this.store = store;\n        this.uuid = data.uuid;\n        this.name = valueOrDefault(data.name, `${this._type}-${data.id}`);\n        this.icon = valueOrDefault(data.name, \"\");\n        this.sections = valueOrDefault(<Section[]>data.sections, <Section[]>[]);\n        this.title = valueOrDefault(data.title, \"\");\n        this.subtitle = valueOrDefault(data.subtitle, \"\");\n    }\n\n    constructor (data: IPage, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n}","import { action, computed, observable, toJS } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { Column, IColumn } from \"./column\";\nimport { valueOrDefault } from \"./common\";\nimport { Field } from \"./field\";\nimport { IValidationError } from \"./validation\";\n\nexport interface ISection {\n    id: string;\n    uuid?:string;\n    name: string;\n    title?: string;\n    gutter?:number;\n    columns: IColumn[];\n}\n\nexport class Section implements ISection {\n    readonly _type : string = \"Section\";\n    @observable id: string;\n    @observable uuid:string;\n    @observable name: string;\n    @observable title: string;\n    @observable gutter: number;\n    @observable columns: Column[];\n    store: FormStoreType;\n\n    @computed get errors() : IValidationError[] {\n        return this.columns.reduce((all: any[], c: Column) => {\n            return all.concat(c.errors);\n        }, <any[]>[]);\n    }\n\n    @computed get numFields() : number {\n        return this.columns.reduce((total: number, column: Column) => {\n            total = total + column.numFields;\n            return total;\n        }, 0);\n    }\n\n    @action addColumn(column: Column, index?: number) : void {\n        if(!column.span) {\n            column.span = 6;\n        }\n        if (typeof index != 'undefined' && index != null && index > -1) {\n            this.columns.splice(index, 0, column);\n        } else {\n            this.columns.push(column);\n        }\n    }\n\n    @action removeColumn(index: number) {\n        this.columns.splice(index, 1)\n    }\n\n    @action swapColumns(index1: number, index2: number): void {\n        let { columns } = this;\n        [columns[index1], columns[index2]] = [columns[index2], columns[index1]];\n    }\n\n    @action moveColumn(atIndex: number, toIndex: number) {\n        this.columns.splice(toIndex, 0, this.columns.splice(atIndex, 1)[0]);\n    }\n\n    @computed get numColumns() : number {\n        return this.columns.length;\n    }\n\n    @computed get isValid() : boolean {\n        return this.columns.every((c) => {\n            return c.isValid;\n        });\n    }\n\n    @computed get idFieldMap() : { [key:string]: Field; } {\n        return this.columns.reduce((all: {}, c: Column)=>{\n            return {...all, ...c.idFieldMap}\n        }, {});\n    }\n\n    @computed get uuidFieldMap() : { [key:string]: Field; } {\n        return this.columns.reduce((all: {}, c: Column)=>{\n            return {...all, ...c.uuidFieldMap}\n        }, {});\n    }\n\n    @computed get asPlainObject() : ISection {\n        let columns = this.columns ? this.columns.map((c) => {\n            return c.asPlainObject\n        }) : [];\n        return {\n            ...toJS({id: this.\n                id,uuid:\n                this.uuid,\n                name: this.name,\n                title: this.title,\n                gutter: this.gutter\n            })\n            , columns: columns\n        };\n    }\n\n    @action initialize(data: ISection, store: FormStoreType) {\n        this.id = data.id;\n        this.uuid = data.uuid;\n        this.name = valueOrDefault(data.name, `${this._type}-${data.id}`);\n        this.title = valueOrDefault(data.title, '');\n        this.gutter = valueOrDefault(data.gutter, 16);\n        this.columns = valueOrDefault(<Column[]>data.columns, <Column[]>[]);\n        this.store = store;\n    }\n\n    constructor(data: ISection, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n}","import { action, computed, observable, toJS } from \"mobx\";\nimport { DateConstraint, DateTimeConstraint, EmailConstraint, EqualityConstraint, ExclusionConstraint, FormatConstraint, GenericConstraint, InclusionConstraint, LengthConstraint, NumericalityConstraint, PresenceConstraint, URLConstraint } from \"./validation.constraints\";\n\n\nexport interface IValidationRule {\n    date? : DateConstraint,\n    datetime? : DateTimeConstraint,\n    email?: EmailConstraint,\n    equality?: EqualityConstraint,\n    exclusion?: ExclusionConstraint,\n    format?: FormatConstraint,\n    inclusion?: InclusionConstraint,\n    length?: LengthConstraint,\n    numericality?: NumericalityConstraint,\n    presence?: PresenceConstraint,\n    url?: URLConstraint\n}\n\nexport const ValidationAllowedRules = {\n    \"input\"       : [\"email\", \"equality\", \"format\", \"inclusion\", \"length\", \"presence\", \"url\"],\n    \"checkbox\"    : [\"presence\"],\n    \"number\"      : [\"presence\", \"equality\", \"format\"],\n    \"select\"      : [\"presence\"],\n    \"cascader\"    : [\"presence\"],\n    \"radiogroup\"  : [\"presence\"],\n    \"checkboxgroup\": [\"presence\"],\n    \"textarea\"    : [\"email\", \"equality\", \"format\", \"inclusion\", \"length\", \"presence\", \"url\"],\n    \"daterange\"   : [\"presence\", \"date\", \"datetime\"],\n    \"datepicker\"  : [\"presence\", \"date\", \"datetime\"],\n    \"monthpicker\" : [\"presence\", \"date\", \"datetime\"],\n    \"timepicker\"  : [\"presence\", \"date\", \"datetime\"],\n    \"yearpicker\"  : [\"presence\", \"date\", \"datetime\"],\n    \"starrating\"  : [\"presence\"],\n    \"switch\"      : [\"presence\"],\n    \"transfer\"    : [\"presence\"],\n    \"slider\"      : [\"presence\"],\n    \"textblock\"   : [],\n    \"hidden\"      : [],\n    \"htmlfragment\": [],\n}\n\nexport const ValidationRuleNames = [\n    {key: \"date\", label: \"Date\", value: \"date\"},\n    {key: \"datetime\", label: \"Datetime\", value: \"datetime\"},\n    {key: \"email\", label: \"Email\", value: \"email\"},\n    {key: \"equality\", label: \"Equals\", value: \"equality\"},\n    {key: \"exclusion\", label: \"Excludes\", value: \"exclusion\"},\n    {key: \"format\", label: \"Matches\", value: \"format\"},\n    {key: \"inclusion\", label: \"Includes\", value: \"inclusion\"},\n    {key: \"length\", label: \"Length\", value: \"length\"},\n    {key: \"numericality\", label: \"Numeric\", value: \"numericality\"},\n    {key: \"presence\", label: \"Present\", value: \"presence\"},\n    {key: \"url\", label: \"URL\", value: \"url\"}\n];\n\nexport const ValidationRuleMap = {\n    \"date\": \"Date\",\n    \"datetime\": \"Datetime\",\n    \"email\": \"Email\",\n    \"equality\": \"Equals\",\n    \"exclusion\": \"Excludes\",\n    \"format\": \"Matches\",\n    \"inclusion\": \"Includes\",\n    \"length\": \"Length\",\n    \"numericality\": \"Numeric\",\n    \"presence\": \"Present\",\n    \"url\": \"URL\"\n};\n\nexport interface IValidationError {\n    id: string,\n    name: string,\n    message: string,\n    prefixedMessage: string,\n    validator: string\n}\n\nexport class ValidationRule implements IValidationRule {\n    @observable date : DateConstraint\n    @observable datetime : DateTimeConstraint\n    @observable email: EmailConstraint\n    @observable equality: EqualityConstraint\n    @observable exclusion: ExclusionConstraint\n    @observable format: FormatConstraint\n    @observable inclusion: InclusionConstraint\n    @observable length: LengthConstraint\n    @observable numericality: NumericalityConstraint\n    @observable presence: PresenceConstraint\n    @observable url: URLConstraint\n\n    constructor(rule: IValidationRule) {\n        this.initialize(rule);\n    }\n\n    @action initialize(rule: IValidationRule = {}) {\n        this.date = rule.date;\n        this.datetime = rule.datetime;\n        this.email = rule.email;\n        this.equality = rule.equality;\n        this.exclusion = rule.exclusion;\n        this.format = rule.format;\n        this.inclusion = rule.inclusion;\n        this.length = rule.length;\n        this.numericality = rule.numericality;\n        this.presence = rule.presence;\n        this.url = rule.url;\n    }\n\n    @computed get constraints() : IValidationRule {\n        let c = {};\n        Object.keys(ValidationRuleMap).forEach((rule: string) => {\n            if (this[rule]) {\n                c[rule] = toJS(this[rule]);\n            }\n        })\n        return c;\n    }\n    @action addConstraint(key: string, settings: GenericConstraint) {\n        this[key] = settings;\n    }\n\n    @action updateConstraint(key: string, settings: GenericConstraint) {\n        this[key] = settings;\n    }\n\n    @action removeConstraint(key: string) {\n        this[key] = null;\n    }\n}","import {action, decorate, observable, computed, toJS} from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport moment from 'moment'\nimport {Field} from \"./field\";\nimport {ValidationRule, IValidationError, IValidationRule} from \"./validation\";\n\nvar validate = require(\"validate.js\");\n\nvalidate.extend(validate.validators.datetime, {\n    // The value is guaranteed not to be null or undefined but otherwise it\n    // could be anything.\n    parse: function(value, options) : number {\n      return +moment.utc(value);\n    },\n    // Input is a unix timestamp\n    format: function(value: moment.MomentInput, options: any = {}) : string {\n      var format = options.dateOnly ? \"YYYY-MM-DD\" : \"YYYY-MM-DD hh:mm:ss\";\n      return moment.utc(value).format(format);\n    }\n});\n\nexport interface IValidationProps {\n    store: FormStoreType,\n    field: Field,\n    rule: IValidationRule\n}\n\nexport class Validator {\n    store: FormStoreType;\n    field: Field;\n    @observable rule : ValidationRule;\n    @observable validationErrors: IValidationError[] = [];\n\n    @computed get isValid() : boolean {\n        return this.validationErrors.length == 0;\n    }\n\n    @computed get errors() : IValidationError[] {\n        return this.validationErrors;\n    }\n\n    formatError(errors: any): IValidationError {\n        return errors.map((e: any) => {\n            let prefixedMessage = e.error || \"\";\n            let unPrefixedMessage = e.error ? e.error.replace(`${e.attribute.toUpperCase()} `, \"\") : e.options.message;\n            return {id: this.field.id,\n                name: e.attribute,\n                message: unPrefixedMessage,\n                prefixedMessage: prefixedMessage,\n                validator: e.validator\n            };\n        });\n    }\n\n    @computed get isValidateable() {\n        let {field} = this;\n        return !this.store.validationDisabled && !field.isHidden && field.conditionState && !!this.rule && Object.keys(this.rule).length > 0;\n    }\n\n    @action validate() {\n        if (this.isValidateable == true) {\n            let {field, store} = this;\n            let {id} = field;\n            let constraints = {};\n            constraints[field.id] = this.rule.constraints;\n            validate.formatters.custom = this.formatError.bind(this);\n            let values = toJS(store.values);\n\n            this.validationErrors = validate(values, constraints, {format: \"custom\"}) || [];\n            if (this.validationErrors.length > 0) {\n                this.store.setFieldError(id, this.validationErrors[0].message);\n            } else {\n                this.store.setFieldError(id, undefined);\n            }\n        } else {\n            this.validationErrors = [];\n        }\n    }\n\n    @computed get isRequired() : boolean {\n        return !!this.rule.presence;\n    }\n\n    @action initialize(data: IValidationProps) {\n        this.rule = new ValidationRule(data.rule || {} as IValidationRule);\n        this.store = data.store;\n        this.field = data.field;\n    }\n\n    constructor(data: IValidationProps) {\n        this.initialize(data);\n    }\n}","import { observable } from \"mobx\";\nimport { Field } from \"../models/field\";\nimport { Form } from \"../models/form\";\nimport { Page } from \"../models/page\";\nimport config from \"../config\";\n\nexport const createFormStore = () => {\n    const store = {\n        env : config.env,\n        debug : config.debug,\n        version: config.version,\n        apiHost: config.apiHost,\n        errors : {},\n        values: {},\n        touched: {},\n        currentPage: 0,\n        showDebug: false,\n        form :<Form> null,\n        isReady: false,\n        submitting: false,\n        validationDisabled: false,\n        conditionsDisabled: false,\n        preventRedirects : false,\n        preventSubmit : false,\n        toggleShowDebug: function () {\n            this.showDebug = !this.showDebug;\n        },\n        get idFieldMap() : { [key:string]:Field; } {\n            if (!this.form) {\n                return {}\n            }\n            return this.form.content.pages.reduce((all: {}, p: Page) => {\n                return {...all, ...p.idFieldMap};\n            }, {});\n        },\n        get uuidFieldMap() : { [key:string]:Field; } {\n            if (!this.form) {\n                return {}\n            }\n            return this.form.content.pages.reduce((all: {}, p: Page) => {\n                return {...all, ...p.uuidFieldMap};\n            }, {});\n        },\n        get fieldNames() : string[] {\n            if (!this.form) {\n                return []\n            }\n            return this.form.content.pages.reduce((all: string[], p: Page) => {\n                return all.concat(p.fieldNames);\n            }, <string[]>[])\n        },\n        get isValid() : boolean {\n            if (this.form && this.form.content && this.form.content.pages && this.form.content.pages.length > 0) {\n                return this.form.content.pages.every((p: Page) => {\n                    return p.isValid\n                })\n            } else {\n                return true;\n            }\n        },\n        setSubmitting(value: boolean) {\n            this.submitting = value;\n        },\n        get isSubmitting() : boolean {\n            return this.submitting;\n        },\n        get numPages() : number {\n            return this.form ? this.form.content.pages.length : 0;\n        },\n        get hasNextPage() : boolean {\n            return this.currentPage < this.numPages -1;\n        },\n        get hasPrevPage() : boolean {\n            return this.currentPage > 0 && this.numPages > 1\n        },\n        get isSubmittable() : boolean {\n            return this.form ? this.form.isSubmittable : false;\n        },\n        nextPage : function () {\n            if(!this.form) {\n                return;\n            }\n            let currentPage = this.form.content.pages[this.currentPage] as Page;\n            let errors = currentPage.errors;\n            let {validationDisablesPaging} = this.form.formLayoutOptions;\n            // Highlight all errors\n            currentPage.fieldIds.forEach((id: string) => {\n                this.touched[id] = true;\n            });\n            if (!errors || errors.length == 0||validationDisablesPaging == false) {\n                this.currentPage = this.currentPage + 1;\n            }\n        },\n        prevPage : function() {\n            this.currentPage = this.currentPage - 1;\n        },\n        setForm : function (form: Form) {\n            this.form = form;\n\n        },\n        setFieldValue: function (id: string, value: any) {\n            this.values[id] = value;\n        },\n        setFieldTouched: function (id: string) {\n            this.touched[id] = true;\n        },\n        setFieldError: function (id: string, error: any) {\n            this.errors[id] = error;\n        }\n    }\n    return observable(store);\n}\n\nexport type FormStoreType = ReturnType<typeof createFormStore>;","import * as React from \"react\";\nimport {FormStoreType, createFormStore} from \"./FormStore\";\nimport { useLocalStore } from \"mobx-react\";\nimport { IFormProps } from '../models/form.properties';\nimport { Factory } from '../models/factory';\nexport const formStoreContext = React.createContext<FormStoreType | null>(null);\n\nexport interface FormStoreProviderProps {\n  initialState?: IFormProps;\n  formStore?: FormStoreType;\n}\n\nexport const FormStoreProvider: React.FC<FormStoreProviderProps> = (props) => {\n    let store;\n    if (props.formStore) {\n        store = props.formStore;\n    } else if (props.initialState) {\n        store = useLocalStore(createFormStore);\n        store.setForm(Factory.makeForm(store, props.initialState));\n    } else {\n      throw new Error(\"FormStoreProvider - Pass initialState or formStore\")\n    }\n    return (\n      <formStoreContext.Provider value={store}>\n        {props.children}\n      </formStoreContext.Provider>\n    )\n}","module.exports = moment;","module.exports = React;","module.exports = ReactDOM;"],"sourceRoot":""}