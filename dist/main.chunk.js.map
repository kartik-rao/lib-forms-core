{"version":3,"sources":["webpack://Forms/./src/app.tsx","webpack://Forms/./src/config.ts","webpack://Forms/./src/models/column.ts","webpack://Forms/./src/models/common.ts","webpack://Forms/./src/models/condition.predicate.ts","webpack://Forms/./src/models/condition.ts","webpack://Forms/./src/models/factory.ts","webpack://Forms/./src/models/field.ts","webpack://Forms/./src/models/form.ts","webpack://Forms/./src/models/layout.ts","webpack://Forms/./src/models/page.ts","webpack://Forms/./src/models/section.ts","webpack://Forms/./src/models/validation.ts","webpack://Forms/./src/models/validator.ts","webpack://Forms/./src/store/FormStore.ts","webpack://Forms/./src/store/FormStoreProvider.tsx","webpack://Forms/external \"antd\"","webpack://Forms/external \"moment\"","webpack://Forms/external \"React\"","webpack://Forms/external \"ReactDOM\""],"names":["renderForm","selector","formId","initialState","console","log","env","version","FormView","lazy","then","module","default","style","height","overflow","Suspense","fallback","document","querySelector","localStore","isLoading","response","this","error","hasEnded","name","isRemoteError","isThrownError","active","status","title","message","formData","JSON","parse","fetch","apiHost","redirect","window","location","debug","hostname","assetPath","autoRender","__AUTO_RENDER__","Column","data","store","_type","initialize","fields","reduce","all","f","concat","validator","errors","every","i","isValid","id","uuid","length","field","index","splice","push","forEach","addField","index1","index2","atIndex","toIndex","map","asPlainObject","span","valueOrDefault","value","defaultValue","Predicate","operator","condition","PredicateConditions","indexOf","Error","PredicateOperators","Condition","predicates","p","ancestors","self","lhs","rhs","op","state","conditionsDisabled","currentValue","values","result","uuidv1","EmptyForm","description","formLayoutOptions","showPageTitles","showSteps","showSectionBorders","showPageBorders","showSectionTitles","validationDisablesPaging","layout","itemLayoutOptions","labelAlign","labelCol","offset","wrapperCol","content","subtitle","Factory","item","Math","random","toFixed","predicate","ensureIds","makePredicates","r","columns","c","makeFields","floor","column","sections","s","makeColumns","pages","page","makeSections","form","makePages","_formData","Field","label","helpText","placeholder","fieldOptions","valuePropName","componentProps","type","inputType","Object","assign","validation","rule","storage","children","touched","setValue","setCondition","conditionState","validate","isValidateable","presence","setFieldValue","setFieldTouched","_dispose","change","setConditionState","newValue","clone","recurseEverything","detectCycles","stringify","Form","exid","labels","width","sidebar","scripts","styles","datasets","paginate","css","inline","external","header","rows","footer","trackingPixels","total","numFields","validTarget","stopSubmit","idFieldMap","uuidFieldMap","keys","submitTarget","errorRedirect","successRedirect","e","preventDefault","stopPropagation","setSubmitting","meta","payload","key","isSubmittable","a","post","catch","reason","submitError","setTimeout","href","dir","bound","AllScreenWidths","LayoutOption","props","filter","d","dimension","colspan","FormLayoutOptions","ItemLayoutOptions","Page","fieldNames","section","fieldIds","icon","Section","gutter","ValidationAllowedRules","ValidationRuleNames","ValidationRuleMap","ValidationRule","date","datetime","email","equality","exclusion","format","inclusion","numericality","url","settings","extend","validators","options","utc","dateOnly","Validator","validationErrors","prefixedMessage","unPrefixedMessage","replace","attribute","toUpperCase","validationDisabled","isHidden","constraints","formatters","custom","formatError","bind","setFieldError","undefined","createFormStore","currentPage","isReady","submitting","numPages","isSubmitting","nextPage","prevPage","setForm","formStoreContext","FormStoreProvider","formStore","makeForm","Provider","exports","antd","moment","React","ReactDOM"],"mappings":"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","file":"main.chunk.js","sourcesContent":["import { Layout, Result, Skeleton } from \"antd\";\nimport React from 'react';\nimport { render } from 'react-dom';\nimport \"./forms.core.m.css\";\nimport { FormStoreProvider } from \"./store/FormStoreProvider\";\nimport config from \"./config\";\nimport { useLocalStore } from 'mobx-react';\n\nexport async function renderForm(selector:string, formId: string, initialState?: any) {\n    console.log(`lib-forms-core [${config.env}] [${config.version}]`);\n    const FormView = React.lazy(() => import(/* webpackChunkName: \"core\" */ \"./views/FormView\").then((module) => {return {default: module.FormView}}));\n    if (initialState) {\n        render(\n            <Layout style={{height: '100vh', overflow: 'hidden'}}>\n                <React.Suspense fallback=\"Loading\">\n                    <FormStoreProvider initialState={initialState}>\n                        <FormView />\n                    </FormStoreProvider>\n                </React.Suspense>\n            </Layout>, document.querySelector(selector)\n        )\n    } else {\n        const localStore = useLocalStore(() => ({\n            isLoading: true,\n            response : null as any,\n            get status () : \"warning\"|\"error\"|\"success\" {\n                if (this.response && !this.response.error) {\n                    return \"success\";\n                }\n                return this.response.error == \"InactiveForm\" ? \"warning\" : \"error\";\n            },\n            get message () : string {\n                if (!this.response || !this.response.error) {\n                    return \"\";\n                }\n                if (this.response.error == \"InactiveForm\") {\n                    return this.response.hasEnded ? `${this.response.name} is no longer accepting entries` : `${this.response.name} hasn't starting accepting entries`\n                }\n                return \"No content available at this location, please check the URL.\"\n            },\n            isRemoteError: false,\n            isThrownError: false\n        }));\n\n        render( <Layout style={{height: '100vh', overflow: 'hidden'}}>\n                    { localStore.isLoading ? <Skeleton active={true}/> : <>\n                        {localStore.isRemoteError && <Result status={localStore.status} title={localStore.message}/>}\n                        {localStore.isThrownError && <Result status=\"error\" title=\"There was an error fetching this content, please try again later\"/>}\n                        {localStore.response && localStore.response.formData && <React.Suspense fallback=\"Loading\">\n                            <FormStoreProvider initialState={JSON.parse(localStore.response.formData)}>\n                                <FormView />\n                            </FormStoreProvider>\n                        </React.Suspense>}\n                    </> }\n        </Layout>, document.querySelector(selector));\n\n        try {\n            let response: any = await fetch(`//${config.apiHost}/form/json/${formId}`);\n            localStore.response = response;\n            if (response.error) {\n                if (response.error == \"InactiveForm\" && response.redirect) {\n                    window.location = response.redirect;\n                    return;\n                }\n                localStore.isRemoteError = true;\n            }\n        } catch (error) {\n            localStore.isThrownError = true;\n            console.error(error);\n        } finally {\n            localStore.isLoading = false;\n        }\n    }\n};","declare var __DEBUG__   : boolean;\ndeclare var __ENV__     : string;\ndeclare var __VERSION__ : string;\ndeclare var __HOSTNAME__: string;\ndeclare var __ASSET_PATH__: string;\ndeclare var __API_HOST__    : string;\ndeclare var __AUTO_RENDER__   : string;\n\nexport default {\n    env: __ENV__,\n    debug: __DEBUG__,\n    version: __VERSION__,\n    hostname: __HOSTNAME__,\n    assetPath: __ASSET_PATH__,\n    apiHost  : __API_HOST__,\n    autoRender: __AUTO_RENDER__\n}","import { action, computed, observable, toJS } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { valueOrDefault } from \"./common\";\nimport { Field } from \"./field\";\nimport { IFieldProps } from \"./field.properties\";\nimport { IValidationError } from \"./validation\";\n\nexport interface IColumn {\n    id  :string;\n    uuid?:string;\n    _type?: string;\n    name?:string;\n    title?:string;\n    span?:number;\n    fields?: IFieldProps[];\n}\n\nexport class Column implements IColumn {\n    readonly _type : string = \"Column\";\n    @observable uuid: string;\n    @observable id: string;\n    @observable name: string;\n    @observable span: number;\n    @observable title: string;\n    @observable fields: Field[];\n    store: FormStoreType;\n\n    @computed get errors() : IValidationError[] {\n        return this.fields.reduce((all: any[], f: Field)=>{\n            return all.concat(f.validator.errors);\n        }, <any[]>[]);\n    }\n\n    @computed get isValid() : boolean {\n        return this.fields.every((f, i) => {\n            return f.isValid;\n        });\n    }\n\n    @computed get idFieldMap() : { [key:string]:Field; } {\n        return this.fields.reduce((all: {}, f: Field)=>{\n            all[f.id] = f;\n            return all;\n        }, {});\n    }\n\n    @computed get uuidFieldMap() : { [key:string]:Field; } {\n        return this.fields.reduce((all: {}, f: Field)=>{\n            all[f.uuid] = f;\n            return all;\n        }, {});\n    }\n\n    @computed get numFields() : number {\n        return this.fields.length;\n    }\n\n    @action addField(field: Field, index?: number) : void {\n        if (typeof index != 'undefined' && index != null && index > -1) {\n            this.fields.splice(index, 0, field);\n        } else {\n            this.fields.push(field);\n        }\n    }\n\n    @action addFields(...fields: Field[]) {\n        fields.forEach((f: Field) => this.addField(f));\n    }\n\n    @action removeField(index: number) {\n        this.fields.splice(index, 1)\n    }\n\n    @action swapFields(index1: number, index2: number): void {\n        let { fields } = this;\n        [fields[index1], fields[index2]] = [fields[index2], fields[index1]];\n    }\n\n    @action moveField(atIndex: number, toIndex: number) {\n        this.fields.splice(toIndex, 0, this.fields.splice(atIndex, 1)[0]);\n    }\n\n    constructor(data: IColumn, store) {\n        this.initialize(data, store);\n    }\n\n    @computed get asPlainObject() : IColumn {\n        let fields = this.fields ?  this.fields.map((f) => {\n            return f.asPlainObject\n        }) : [];\n        return {\n            ...toJS({id: this.id,uuid: this.uuid,span: this.span,name: this.name,title: this.title}),\n            fields: fields\n        };\n    }\n\n    @action initialize(data: IColumn, store: FormStoreType) {\n        this.uuid = data.uuid;\n        this.store = store;\n        this.id = data.id;\n        this.span = data.span;\n        this.name = valueOrDefault(data.name, `${this._type}-${data.id}`);\n        this.title = valueOrDefault(data.title, '');\n        this.fields = valueOrDefault(<Field[]>data.fields, <Field[]>[]);\n    }\n}","const uuidv1 = require('uuid/v1');\n\nexport function valueOrDefault<T>(value: T, defaultValue: T|null): T {\n    return (typeof(value) !== 'undefined' && value !== null ? value : defaultValue);\n}\n","import { action, observable } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\n\nexport interface IPredicate {\n    uuid?: string;\n    field: string;\n    condition: any;\n    value?: any;\n    operator?: string;\n}\n\nexport class Predicate implements IPredicate {\n    static readonly PredicateConditions = [\"eq\",  \"neq\",  \"gt\",  \"lt\", \"gteq\", \"lteq\", \"hasval\", \"nothasval\"];\n    static readonly PredicateOperators = [\"or\", \"and\"];\n    uuid: string;\n    @observable field: string;\n    @observable condition: string;\n    @observable value: any;\n    @observable operator: string = \"or\";\n    store: FormStoreType;\n\n    @action initialize(data: IPredicate, store: FormStoreType) {\n        if (!data.condition || Predicate.PredicateConditions.indexOf(data.condition) == -1) {\n            throw new Error(`InvalidPredicateCondition - ${data.condition}`);\n        }\n        if(data.operator && Predicate.PredicateOperators.indexOf(data.operator) == -1) {\n            throw new Error(`InvalidPredicateOperator - ${data.operator}`);\n        }\n        this.uuid = data.uuid;\n        this.store = store;\n        this.field = data.field;\n        this.condition = data.condition;\n        this.value = data.value;\n        this.operator = data.operator;\n    }\n\n    constructor(data:IPredicate, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n}","import { action, computed, observable, observe } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { IPredicate, Predicate } from \"./condition.predicate\";\n\nexport interface ICondition {\n    predicates: IPredicate[],\n    ancestors?: string[],\n}\n\nexport class Condition {\n    @observable predicates: Predicate[];\n    @observable ancestors?: string[];\n    store: FormStoreType;\n\n    @action initialize(data: ICondition, store: FormStoreType) {\n        let predicates : Predicate[] = [];\n        data.predicates.forEach((p: IPredicate)=> {\n            predicates.push(new Predicate(p, store));\n        })\n        this.predicates = predicates;\n        this.ancestors = [];\n        this.store = store;\n        let self = this;\n\n        this.predicates.forEach((p) => {\n            self.ancestors.push(p.field);\n        });\n    }\n\n    constructor(data: ICondition, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n\n    @action addPredicates(...p : IPredicate[]) {\n        p.forEach((p) => {\n            this.predicates.push(new Predicate(p, this.store));\n            this.ancestors.push(p.field);\n        });\n    }\n\n    reduce(lhs:any, rhs:any, op: string) : boolean {\n        if (op == 'and') {\n            return lhs && rhs;\n        } else {\n            return lhs || rhs;\n        }\n    }\n\n    @computed get value() : boolean {\n        var state: boolean;\n        let self = this;\n\n        if (self.store.conditionsDisabled || !this.predicates || this.predicates.length == 0){\n            return true;\n        }\n\n        this.predicates.forEach((p, i) => {\n            let currentValue = self.store.values[p.field];\n            var result: any = null;\n            switch(p.condition) {\n                case \"eq\":\n                    result = currentValue == p.value;\n                    break;\n                case \"neq\":\n                    result = currentValue != p.value;\n                    break;\n                case \"gt\":\n                    result = currentValue > p.value;\n                    break;\n                case \"lt\":\n                    result = currentValue < p.value;\n                    break;\n                case \"gteq\":\n                    result = currentValue >= p.value;\n                    break;\n                case \"lteq\":\n                    result = currentValue <= p.value;\n                    break;\n                case \"hasval\":\n                    result = typeof(currentValue) != 'undefined' && currentValue != null && currentValue !== \"\";\n                    break;\n                case \"nothasval\":\n                    result = typeof(currentValue) == 'undefined' || currentValue == null || currentValue == \"\";\n                    break;\n                default:\n                    result = false;\n            }\n            state = (i == 0) ? result : this.reduce(state, result, p.operator);\n        });\n        return state;\n    }\n}","import { FormStoreType } from \"../store/FormStore\";\nimport { Column, IColumn } from \"./column\";\nimport { Condition, ICondition } from \"./condition\";\nimport { IPredicate, Predicate } from \"./condition.predicate\";\nimport { Field } from \"./field\";\nimport { IFieldProps } from \"./field.properties\";\nimport { Form } from \"./form\";\nimport { IFormProps } from \"./form.properties\";\nimport { IPage, Page } from \"./page\";\nimport { ISection, Section } from \"./section\";\nconst uuidv1 = require('uuid/v1');\n\nexport const EmptyForm : IFormProps = {\n    id: null,\n    name: \"Untitled Form\",\n    description: \"Form description\",\n    formLayoutOptions : {\n        showPageTitles : true,\n        showSteps: true,\n        showSectionBorders: false,\n        showPageBorders: false,\n        showSectionTitles: false,\n        validationDisablesPaging: true\n    },\n    layout : \"vertical\",\n    itemLayoutOptions : {\n        labelAlign : \"left\",\n        labelCol : {\"xl\" : {offset:0, span: 8}},\n        wrapperCol : {\"xl\" : {offset:0, span: 16}}\n    },\n    content: {\n        title: \"Form title\",\n        subtitle: \"Form subtitle\"\n    }\n}\n\nexport class Factory {\n    static ensureIds<T>(item: T) {\n        if (!item['uuid']) {\n            item['uuid'] = uuidv1();\n        }\n\n        if(!item['id']) {\n            item['id'] = (1e6 * Math.random()).toFixed(0) + \"\";\n        }\n    }\n\n    static makePredicates(store: FormStoreType, ...predicates: IPredicate[]) : Predicate[] {\n        let response: Predicate[] = [];\n        predicates.forEach((predicate: IPredicate) => {\n            Factory.ensureIds(predicate);\n            response.push(new Predicate(predicate, store));\n        });\n        return response;\n\n    }\n\n    static makeCondition(store: FormStoreType, condition: ICondition) : Condition {\n        let predicates = Factory.makePredicates(store, ...condition.predicates);\n        return new Condition({predicates: predicates}, store);\n    }\n\n    static makeFields(store: FormStoreType, ...fields: IFieldProps[]) : Field[] {\n        if (!fields || fields.length == 0) {\n            return <Field[]>[];\n        }\n        return fields.reduce((r: Field[], f: IFieldProps) => {\n            Factory.ensureIds(f);\n            r.push(new Field({...f, condition: f.condition}, store));\n            return r;\n        }, <Field[]>[]);\n    }\n\n    static makeColumns(store: FormStoreType, ...columns: IColumn[]) : Column[] {\n        let response : Column[] = [];\n        if (!columns || columns.length == 0) {\n            return response;\n        }\n\n        columns.forEach((c: IColumn) => {\n            Factory.ensureIds(c);\n            let fields = c.fields && c.fields.length > 0 ? Factory.makeFields(store, ...c.fields) : <Field[]>[];\n            if (!c.span) {\n                c.span = Math.floor(24/columns.length);\n            }\n            let column = new Column({...c, fields: fields}, store);\n            response.push(column);\n        })\n        return response;\n    }\n\n    static makeSections(store: FormStoreType, ...sections: ISection[]) : Section[] {\n        let response: Section[] = [];\n        if (!sections || sections.length == 0) {\n            return <Section[]>[];\n        }\n        sections.forEach((s: ISection) => {\n            Factory.ensureIds(s);\n            let columns = s.columns && s.columns.length > 0 ? Factory.makeColumns(store, ...s.columns) : <Column[]>[];\n            response.push(new Section({...s, columns: columns}, store));\n        });\n        return response;\n    }\n\n    static makePages(store: FormStoreType, ...pages: IPage[]) : Page[] {\n        if (!pages || pages.length == 0) {\n            return <Page[]>[];\n        }\n        let response: Page[] = [];\n        pages.forEach((page: IPage) => {\n            Factory.ensureIds(page);\n            let sections = page.sections && page.sections.length > 0 ? Factory.makeSections(store, ...page.sections) : <Section[]>[];\n            response.push(new Page({...page, sections: sections}, store));\n        });\n        return response;\n    }\n\n    static makeForm(store: FormStoreType, formData: IFormProps) : Form {\n        let form: Form;\n        if (formData && formData.content && formData.content.pages) {\n            formData.content.pages = Factory.makePages(store, ...formData.content.pages)\n            form = new Form(formData, store);\n        } else {\n            let _formData = formData ? formData : {id: null, content: {pages: []}}\n            form = new Form(_formData, store);\n        }\n        return form;\n    }\n}","import { action, computed, observable, observe, toJS, autorun } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { Condition, ICondition } from \"./condition\";\nimport { IFieldOptions } from \"./field.options\";\nimport { IComponentProps, IFieldProps, IFieldRuntimeProps, IFieldStorage } from \"./field.properties\";\nimport { ItemLayoutOptions } from './layout';\nimport { IValidationRule, ValidationRule } from \"./validation\";\nimport { Validator } from \"./validator\";\nimport { observer } from 'mobx-react-lite';\n\n\nexport class Field implements IFieldProps, IFieldRuntimeProps {\n    readonly _type : string = \"Field\";\n    uuid: string;\n    @observable id: string;\n    @observable name: string;\n\n    @observable type: string;\n    @observable label: string;\n    @observable value : any;\n    @observable touched: boolean;\n    @observable inputType: string;\n    @observable helpText: string;\n    @observable placeholder: string;\n    fieldOptions: IFieldOptions;\n    children: any;\n    @observable condition: Condition;\n    @observable storage: IFieldStorage;\n    store: FormStoreType;\n    @observable location: any;\n    @observable conditionState: boolean;\n    @observable validator : Validator;\n    validation: IValidationRule;\n    @observable componentProps: IComponentProps;\n    @observable itemLayoutOptions : ItemLayoutOptions;\n    _dispose : any;\n\n    @action mergeUpdate(data: Partial<IFieldProps>) {\n        this.id = data.id ? data.id : this.id;\n        this.name = data.name;\n        this.label = data.label;\n        this.helpText = data.helpText;\n        this.placeholder = data.placeholder;\n        let {fieldOptions} = data;\n        this.fieldOptions = {...this.fieldOptions, ...{valuePropName: fieldOptions ? fieldOptions.valuePropName : this.fieldOptions.valuePropName}};\n        this.componentProps = <IComponentProps>{...this.componentProps, ...data.componentProps};\n        return;\n    }\n\n    @action initialize(data: IFieldProps, store: FormStoreType) {\n        this.store = store;\n        this.id = data.id;\n        this.uuid = data.uuid;\n        this.name = data.name || `${this._type}_${data.id}`;\n        this.type = data.type;\n        this.label = data.label;\n        this.inputType = data.inputType;\n        this.fieldOptions = data.fieldOptions ? Object.assign({id: data.id}, {...data.fieldOptions}) : {id: data.id};\n        this.fieldOptions.valuePropName = (data.fieldOptions||{}).valuePropName || this.name;\n        this.validation = data.validation;\n        this.validator = new Validator({rule: new ValidationRule(data.validation), field: this, store: store});\n        this.storage = data.storage;\n        this.label = data.label;\n        this.helpText = data.helpText;\n        this.placeholder = data.placeholder;\n        this.children = data.children || {};\n        this.componentProps = data.componentProps || {};\n        this.location = data.location || {};\n        this.touched = false;\n        this.itemLayoutOptions = new ItemLayoutOptions(data.itemLayoutOptions);\n\n        if (this.componentProps && this.componentProps['defaultValue']) {\n            this.setValue(this.componentProps['defaultValue']);\n        } else if (this.componentProps && this.componentProps['defaultChecked']) {\n            this.setValue(this.componentProps['defaultChecked']);\n        }\n\n        if (!this.fieldOptions.valuePropName) {\n            this.fieldOptions.valuePropName = `${this.id}_value`;\n        }\n\n        if(this.inputType == 'daterange') {\n            this.componentProps[\"startValuePropsName\"] = !!this.componentProps[\"startValuePropsName\"] ? this.componentProps[\"startValuePropsName\"] : `start_date`;\n            this.componentProps[\"endValuePropsName\"] = !!this.componentProps[\"endValuePropsName\"] ? this.componentProps[\"endValuePropsName\"] : `end_date`;\n        }\n\n        if (data.condition) {\n            this.setCondition(data.condition);\n        } else {\n            this.condition = null;\n            this.conditionState = true;\n        }\n        this.validate();\n        return;\n    }\n\n    @computed get className() : string {\n        return `.fl-field .fl-${this.inputType}${this.type?'-'+this.type:''}`;\n    }\n\n    @computed get isTouched() : boolean {\n        return this.store.touched[this.id];\n    }\n\n    @computed get isValidateable() {\n        return this.validator.isValidateable;\n    }\n\n    @computed get isValid() : boolean {\n        return this.validator.isValid;\n    }\n\n    @computed get isHidden() : boolean {\n        return this.inputType == \"hidden\";\n    }\n\n    @computed get isRequired() : boolean {\n        return !!this.validator.rule.presence;\n    }\n\n    @computed get currentValue() {\n        return this.value\n    }\n\n    @computed get isDisabled() : boolean {\n        return !this.conditionState;\n    }\n\n    @action setValue(value: any) {\n        this.value = value;\n        this.store.setFieldValue(this.id, value);\n        this.validate();\n    }\n\n    @action setTouched() {\n        this.touched = true;\n        this.store.setFieldTouched(this.id);\n        this.validate();\n    }\n\n    @action setConditionState(value: boolean) {\n        this.conditionState = value;\n        this.validate();\n    }\n\n    @action setCondition(condition: ICondition) {\n        if(condition == null || !condition.predicates || condition.predicates.length == 0) {\n            this.condition = null;\n            this.conditionState = true;\n            if(this._dispose) {\n                this._dispose();\n            }\n            this.validate();\n            return;\n        }\n\n        this.condition = new Condition(condition, this.store);\n        this.conditionState = this.condition.value;\n\n        this._dispose = observe(this.condition, \"value\", (change) => {\n            this.setConditionState(change.newValue)\n            if(change.newValue == true) {\n                this.validate();\n            }\n        }, true);\n    }\n\n    @action validate() {\n\n       this.validator.validate();\n    }\n\n    @computed get asPlainObject() : IFieldProps {\n        let clone = {...this};\n        delete clone.store;\n        delete clone.validator;\n        clone.value = null;\n        clone.conditionState = false;\n        return toJS(clone, {recurseEverything: true, detectCycles: true});\n    }\n\n    @computed get serialize(): string  {\n        let clone = this.asPlainObject;\n        return JSON.stringify(clone);\n    }\n\n    constructor(data: IFieldProps, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n}","import axios from \"axios\";\nimport { action, computed, observable, toJS } from \"mobx\";\nimport { FormEvent } from \"react\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { valueOrDefault } from \"./common\";\nimport { Field } from \"./field\";\nimport { IFormContent, IFormProps, IFormStatus, IFormTenant } from \"./form.properties\";\nimport { FormLayoutOptions, ItemLayoutOptions } from './layout';\nimport {Page} from \"./page\";\nimport { IValidationError } from \"./validation\";\n\n\nexport class Form implements IFormProps {\n    store: FormStoreType\n    uuid: string;\n\n    @observable id: string;\n    @observable exid: string;\n    @observable description: string;\n    @observable name: string;\n    @observable tenant: IFormTenant;\n    @observable status: IFormStatus;\n    @observable content: IFormContent;\n    @observable layout: any;\n    @observable stopSubmit: boolean;\n    @observable submitTarget: string;\n    @observable submitError: string;\n    @observable formLayoutOptions: FormLayoutOptions;\n    @observable itemLayoutOptions: ItemLayoutOptions;\n    @observable successRedirect: string;\n    @observable errorRedirect: string;\n\n    @action initialize(data: IFormProps, store: FormStoreType) {\n        this.store = store;\n        this.id = data.id;\n        this.name = data.name;\n        this.uuid = data.uuid;\n        this.exid = valueOrDefault(data.exid, null);\n        this.description = valueOrDefault(data.description, null);\n\n        if (data.content) {\n            this.content = {\n                title: valueOrDefault(data.content.title, null),\n                subtitle: valueOrDefault(data.content.subtitle, null),\n                labels: valueOrDefault(data.content.labels, null),\n                offset: valueOrDefault(data.content.offset, null),\n                width: valueOrDefault(data.content.width, null),\n                sidebar: valueOrDefault(data.content.sidebar, null),\n                scripts: valueOrDefault(data.content.scripts, null),\n                styles: valueOrDefault(data.content.styles, null),\n                datasets: valueOrDefault(data.content.datasets, null),\n                pages: valueOrDefault(<Page[]>data.content.pages, []),\n                paginate: valueOrDefault(data.content.paginate, false)\n            }\n            if (data.content.css) {\n                this.content.css = {\n                    inline : valueOrDefault(data.content.css.inline, []),\n                    external: valueOrDefault(data.content.css.external, [])\n                }\n            } else {\n                this.content.css = {inline: null, external: null}\n            }\n            if (data.content.header) {\n                this.content.header = {\n                    rows: valueOrDefault(data.content.header.rows, [])\n                }\n            } else {\n                this.content.header = {rows: []}\n            }\n\n            if (data.content.footer) {\n                this.content.footer = {\n                    rows: valueOrDefault(data.content.footer.rows, [])\n                }\n            } else {\n                this.content.footer = {rows: []}\n            }\n\n            if (data.content.trackingPixels) {\n                this.content.trackingPixels = data.content.trackingPixels;\n            } else {\n                this.content.trackingPixels = []\n            }\n        } else {\n            this.content = {\n                title: null,\n                subtitle: null,\n                labels: null,\n                offset: null,\n                width: null,\n                sidebar: null,\n                scripts: [],\n                styles: [],\n                datasets: [],\n                pages: [],\n                paginate: true\n            }\n            this.content.css = {inline: null, external: null}\n            this.content.header = {rows: []}\n            this.content.footer = {rows: []}\n            this.content.trackingPixels = [];\n        }\n\n        this.layout = valueOrDefault(data.layout, \"vertical\");\n        this.formLayoutOptions = new FormLayoutOptions(data.formLayoutOptions);\n        this.itemLayoutOptions = new ItemLayoutOptions(data.itemLayoutOptions);\n    }\n\n    constructor(data: IFormProps, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n\n    @computed get isValid() : boolean {\n        return this.content.pages.every((p: Page) => {\n            return p.isValid;\n        })\n    }\n\n    @computed get numPages() : number {\n        return this.content.pages.length;\n    }\n\n    @computed get numFields() : number {\n        return this.content.pages.reduce((total: number, p: Page) => {\n            return total + p.numFields;\n        }, 0);\n    }\n\n    @action addPage(p : Page, index?: number) {\n        if (typeof index != 'undefined' && index != null && index > -1) {\n            this.content.pages.splice(index, 0, p);\n        } else {\n            this.content.pages.push(p)\n        }\n    }\n\n    @action removePage(index: number) : void {\n        this.content.pages.splice(index, 1);\n    }\n\n    @action swapPages(index1: number, index2: number): void {\n        let { pages } = this.content;\n        [pages[index1], pages[index2]] = [pages[index2], pages[index1]];\n    }\n\n    @action movePage(atIndex: number, toIndex: number) : void {\n        this.content.pages.splice(toIndex, 0, this.content.pages.splice(atIndex, 1)[0]);\n    }\n\n    @computed get isSubmittable() : boolean {\n        let validTarget =  !!this.stopSubmit ?  !this.stopSubmit : true\n        return this.errors.length == 0 && validTarget;\n    }\n\n    @computed get idFieldMap() : { [key:string]:Field; }  {\n        return this.content.pages.reduce((all: {}, s: Page)=>{\n            return {...all, ...s.idFieldMap}\n        }, {});\n    }\n\n    @computed get uuidFieldMap() : { [key:string]:Field; }  {\n        return this.content.pages.reduce((all: {}, s: Page)=>{\n            return {...all, ...s.uuidFieldMap}\n        }, {});\n    }\n\n    @computed get errors() : IValidationError[] {\n        return this.content.pages.reduce((all: any[], p: Page)=>{\n            return all.concat(p.errors);\n        }, <any[]>[]);\n    }\n\n    @computed get values() : { [key:string]: any; } {\n        return Object.keys(this.idFieldMap).reduce((all: {}, id: string) => {\n            let f: Field = this.idFieldMap[id];\n            // HTMLFragment and TextBlock have no value\n            if (f.inputType ==  'htmlfragment' || f.inputType == 'textblock') {\n                return all;\n            }\n            return {...all, [f.id]: f.value}\n        }, {});\n    }\n\n    @computed get asPlainObject() {\n        let clone : IFormProps = toJS({\n            id: this.id,\n            name: this.name,\n            uuid: this.uuid,\n            exid: this.exid,\n            description: this.description,\n            layout : this.layout,\n            formLayoutOptions : this.formLayoutOptions,\n            itemLayoutOptions : this.itemLayoutOptions,\n            submitTarget : this.submitTarget,\n            errorRedirect : this.errorRedirect,\n            successRedirect : this.successRedirect\n        }, {detectCycles : true, recurseEverything: true})\n\n        if (this.content) {\n            clone.content = {\n                ...toJS({\n                    title : this.content.title,\n                    subtitle : this.content.subtitle,\n                    labels : this.content.labels,\n                    offset : this.content.offset,\n                    width : this.content.width,\n                    sidebar : this.content.sidebar,\n                    scripts : this.content.scripts,\n                    styles : this.content.styles,\n                    datasets : this.content.datasets,\n                    paginate : this.content.paginate\n                }, {detectCycles : true, recurseEverything: true}),\n                pages : this.content.pages ? (this.content.pages as Page[]).map((p) => {return p.asPlainObject}) : []\n            }\n        }\n\n        return clone;\n    }\n\n    @action.bound handleSubmit(e: FormEvent) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.store.setSubmitting(true);\n        let meta = this.idFieldMap;\n        let payload = {};\n        let values = this.values;\n        Object.keys(values).forEach((id: string) => {\n            let key = meta[id].fieldOptions.valuePropName || meta[id].name;\n            payload[key] = values[id];\n        });\n\n        if(this.isSubmittable && !!this.submitTarget) {\n            axios.post(this.submitTarget, payload).catch((reason:any) => {\n                console.log('Submit Error', reason);\n                this.submitError = \"There was an error submitting this form\";\n                if (this.successRedirect) {\n                    setTimeout(()=> {\n                        window.location.href = this.successRedirect;\n                    }, 5000);\n                }\n            }).then(() => {\n                this.store.setSubmitting(false);\n                if (this.successRedirect) {\n                    setTimeout(()=> {\n                        window.location.href = this.errorRedirect;\n                    }, 5000);\n                }\n            })\n        } else {\n            console.dir(values);\n        }\n    }\n}","import { observable, action, computed } from \"mobx\";\nimport {valueOrDefault} from \"./common\";\n\nexport type ScreenWidth = \"xs\"|\"sm\"|\"md\"|\"lg\"|\"xl\";\nexport const AllScreenWidths: ScreenWidth[] = [\"xs\",\"sm\",\"md\",\"lg\",\"xl\"];\n\nexport interface ColSpanOffset {\n    span: number;\n    offset?: number;\n}\n\nexport interface ILayoutOption {\n    xs?  : ColSpanOffset;\n    sm?  : ColSpanOffset;\n    md?  : ColSpanOffset;\n    lg?  : ColSpanOffset;\n    xl?  : ColSpanOffset;\n}\nexport class LayoutOption implements ILayoutOption {\n    @observable xs  : ColSpanOffset;\n    @observable sm  : ColSpanOffset;\n    @observable md  : ColSpanOffset;\n    @observable lg  : ColSpanOffset;\n    @observable xl  : ColSpanOffset;\n\n    constructor(props: {[key in ScreenWidth]?: ColSpanOffset}={}) {\n        Object.keys(props).map((width: ScreenWidth) => {\n            if(AllScreenWidths.indexOf(width) > -1 && props[width]){\n                this[width] = props[width];\n            }\n        })\n    }\n\n    @computed get unused() : ScreenWidth[] {\n        return AllScreenWidths.filter((d) => {\n            return typeof this[d] == 'undefined' || this[d] == null\n        })\n    }\n\n    @computed get used() : ScreenWidth[] {\n        return AllScreenWidths.filter((d) => {\n            return typeof this[d] != 'undefined' && this[d] != null\n        })\n    }\n\n    add(dimension: ScreenWidth, colspan: ColSpanOffset) {\n        this[dimension] = colspan;\n    }\n\n}\n\nexport interface IFormLayoutOptions {\n    showSteps?: boolean,\n    showPageTitles?: boolean,\n    showSectionTitles?: boolean,\n    showSectionBorders? : boolean,\n    showPageBorders?: boolean,\n    validationDisablesPaging?: boolean;\n    labelAlign?: \"left\" | \"right\";\n    wrapperCol?: ColSpanOffset;\n    labelCol?: ColSpanOffset;\n}\n\nexport class FormLayoutOptions implements IFormLayoutOptions {\n    @observable showSteps: boolean;\n    @observable showPageTitles: boolean\n    @observable showSectionTitles: boolean\n    @observable showSectionBorders : boolean\n    @observable showPageBorders: boolean\n    @observable validationDisablesPaging: boolean\n    @observable labelAlign: \"left\" | \"right\"\n    @observable wrapperCol: ColSpanOffset\n    @observable labelCol: ColSpanOffset\n\n    constructor(props: IFormLayoutOptions) {\n        this.initialize(props);\n    }\n\n    @action initialize(props: IFormLayoutOptions) {\n        if(!props) {\n            return;\n        }\n        this.showSteps = valueOrDefault(props.showSteps, true);\n        this.showPageTitles = valueOrDefault(props.showPageTitles, true);\n        this.showSectionTitles = valueOrDefault(props.showSectionTitles, false);\n        this.showSectionBorders = valueOrDefault(props.showSectionBorders, false);\n        this.showPageBorders = valueOrDefault(props.showPageBorders, false);\n        this.validationDisablesPaging = valueOrDefault(props.validationDisablesPaging, true);\n        this.labelAlign = valueOrDefault(props.labelAlign, \"left\");\n        this.wrapperCol = valueOrDefault(props.wrapperCol, {span: 8});\n        this.labelCol = valueOrDefault(props.labelCol, {span: 6});\n    }\n}\n\nexport interface IItemLayoutOptions {\n    labelAlign? : \"left\"|\"right\";\n    labelCol?: ILayoutOption;\n    wrapperCol?: ILayoutOption;\n}\n\nexport class ItemLayoutOptions implements IItemLayoutOptions {\n    @observable labelAlign : \"left\"|\"right\";\n    @observable labelCol: LayoutOption;\n    @observable wrapperCol: LayoutOption;\n\n    @action initialize(props: IItemLayoutOptions) {\n        if(!props) {\n            return;\n        }\n        this.labelAlign = valueOrDefault(props.labelAlign, \"left\");\n        this.wrapperCol = new LayoutOption(props.wrapperCol);\n        this.labelCol = new LayoutOption(props.labelCol);\n    }\n\n    constructor(props: IItemLayoutOptions) {\n        this.initialize(props);\n    }\n}\n\n// export type ColumnLayout = { [key in ScreenWidth]?: ColSpanOffset };","import { action, computed, observable, toJS } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { Column } from \"./column\";\nimport { valueOrDefault } from \"./common\";\nimport { Field } from \"./field\";\nimport { ISection, Section } from \"./section\";\nimport { IValidationError } from \"./validation\";\n\nexport interface IPage {\n    id: string;\n    uuid?:string;\n    name: string;\n    icon?: string;\n    sections: ISection[];\n    title?: string;\n    subtitle?: string;\n}\n\nexport class Page implements IPage {\n    readonly _type : string = \"Page\";\n    @observable id: string;\n    @observable uuid: string;\n    @observable name: string;\n    @observable icon: string;\n    @observable sections: Section[];\n    @observable title: string;\n    @observable subtitle: string;\n    store: FormStoreType;\n\n    @computed get fieldNames() : string[] {\n        let fieldNames: string[] = [];\n        if (!this.sections || this.sections.length == 0) {\n            return fieldNames;\n        }\n        this.sections.forEach((section: Section)=>{\n            if (section.columns && section.columns.length > 0) {\n                section.columns.forEach((column: Column) => {\n                    if (column.fields) {\n                        column.fields.forEach((field: Field)=> {\n                            fieldNames.push(field.name);\n                        });\n                    }\n                })\n            }\n        });\n        return fieldNames;\n    }\n\n\n    @computed get fieldIds() : string[] {\n        let fieldIds: string[] = [];\n        if (!this.sections || this.sections.length == 0) {\n            return fieldIds;\n        }\n        this.sections.forEach((section: Section)=>{\n            if (section.columns && section.columns.length > 0) {\n                section.columns.forEach((column: Column) => {\n                    if (column.fields) {\n                        column.fields.forEach((field: Field)=> {\n                            fieldIds.push(field.id);\n                        });\n                    }\n                })\n            }\n        });\n        return fieldIds;\n    }\n\n    @computed get idFieldMap() : { [key:string]:Field; }  {\n        return this.sections.reduce((all: {}, s: Section)=>{\n            return {...all, ...s.idFieldMap}\n        }, {});\n    }\n\n    @computed get uuidFieldMap() : { [key:string]:Field; }  {\n        return this.sections.reduce((all: {}, s: Section)=>{\n            return {...all, ...s.uuidFieldMap}\n        }, {});\n    }\n\n    @computed get errors() : IValidationError[] {\n        return this.sections.reduce((all: any[], s: Section)=>{\n            return all.concat(s.errors);\n        }, <any[]>[]);\n    }\n\n    @computed get isValid() : boolean {\n        return this.sections.every((s) => {\n            return s.isValid;\n        });\n    }\n\n    @computed get numSections() : number {\n        return this.sections.length;\n    }\n\n    @computed get numFields() : number {\n        return this.sections.reduce((total: number, s : Section) => {\n            return total + s.numFields;\n        }, 0);\n    }\n\n    @action addSection(section: Section, index?: number) : void {\n        if (typeof index != 'undefined' && index != null && index > -1) {\n            this.sections.splice(index, 0, section);\n        } else {\n            this.sections.push(section);\n        }\n    }\n\n    @action removeSection(index: number) {\n        this.sections.splice(index, 1)\n    }\n\n    @action swapSections(index1: number, index2: number): void {\n        let { sections } = this;\n        [sections[index1], sections[index2]] = [sections[index2], sections[index1]];\n    }\n\n    @action moveSection(atIndex: number, toIndex: number) {\n        this.sections.splice(toIndex, 0, this.sections.splice(atIndex, 1)[0]);\n    }\n\n    @computed get asPlainObject() : IPage {\n        let sections = this.sections ? this.sections.map((s) => {return s.asPlainObject}) : [];\n\n        return {\n            ...toJS({id : this.id,\n                uuid : this.uuid,\n                name : this.name,\n                title : this.title,\n                subtitle : this.subtitle,\n                icon : this.icon\n            }),\n            sections: sections\n        }\n    }\n\n    @action private initialize(data: IPage, store: FormStoreType) {\n        this.id = data.id;\n        this.store = store;\n        this.uuid = data.uuid;\n        this.name = valueOrDefault(data.name, `${this._type}-${data.id}`);\n        this.icon = valueOrDefault(data.name, \"\");\n        this.sections = valueOrDefault(<Section[]>data.sections, <Section[]>[]);\n        this.title = valueOrDefault(data.title, \"\");\n        this.subtitle = valueOrDefault(data.subtitle, \"\");\n    }\n\n    constructor (data: IPage, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n}","import { action, computed, observable, toJS } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { Column, IColumn } from \"./column\";\nimport { valueOrDefault } from \"./common\";\nimport { Field } from \"./field\";\nimport { IValidationError } from \"./validation\";\n\nexport interface ISection {\n    id: string;\n    uuid?:string;\n    name: string;\n    title?: string;\n    gutter?:number;\n    columns: IColumn[];\n}\n\nexport class Section implements ISection {\n    readonly _type : string = \"Section\";\n    @observable id: string;\n    @observable uuid:string;\n    @observable name: string;\n    @observable title: string;\n    @observable gutter: number;\n    @observable columns: Column[];\n    store: FormStoreType;\n\n    @computed get errors() : IValidationError[] {\n        return this.columns.reduce((all: any[], c: Column) => {\n            return all.concat(c.errors);\n        }, <any[]>[]);\n    }\n\n    @computed get numFields() : number {\n        return this.columns.reduce((total: number, column: Column) => {\n            total = total + column.numFields;\n            return total;\n        }, 0);\n    }\n\n    @action addColumn(column: Column, index?: number) : void {\n        if(!column.span) {\n            column.span = 6;\n        }\n        if (typeof index != 'undefined' && index != null && index > -1) {\n            this.columns.splice(index, 0, column);\n        } else {\n            this.columns.push(column);\n        }\n    }\n\n    @action removeColumn(index: number) {\n        this.columns.splice(index, 1)\n    }\n\n    @action swapColumns(index1: number, index2: number): void {\n        let { columns } = this;\n        [columns[index1], columns[index2]] = [columns[index2], columns[index1]];\n    }\n\n    @action moveColumn(atIndex: number, toIndex: number) {\n        this.columns.splice(toIndex, 0, this.columns.splice(atIndex, 1)[0]);\n    }\n\n    @computed get numColumns() : number {\n        return this.columns.length;\n    }\n\n    @computed get isValid() : boolean {\n        return this.columns.every((c) => {\n            return c.isValid;\n        });\n    }\n\n    @computed get idFieldMap() : { [key:string]: Field; } {\n        return this.columns.reduce((all: {}, c: Column)=>{\n            return {...all, ...c.idFieldMap}\n        }, {});\n    }\n\n    @computed get uuidFieldMap() : { [key:string]: Field; } {\n        return this.columns.reduce((all: {}, c: Column)=>{\n            return {...all, ...c.uuidFieldMap}\n        }, {});\n    }\n\n    @computed get asPlainObject() : ISection {\n        let columns = this.columns ? this.columns.map((c) => {\n            return c.asPlainObject\n        }) : [];\n        return {\n            ...toJS({id: this.\n                id,uuid:\n                this.uuid,\n                name: this.name,\n                title: this.title,\n                gutter: this.gutter\n            })\n            , columns: columns\n        };\n    }\n\n    @action initialize(data: ISection, store: FormStoreType) {\n        this.id = data.id;\n        this.uuid = data.uuid;\n        this.name = valueOrDefault(data.name, `${this._type}-${data.id}`);\n        this.title = valueOrDefault(data.title, '');\n        this.gutter = valueOrDefault(data.gutter, 16);\n        this.columns = valueOrDefault(<Column[]>data.columns, <Column[]>[]);\n        this.store = store;\n    }\n\n    constructor(data: ISection, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n}","import { action, computed, observable, toJS } from \"mobx\";\nimport { DateConstraint, DateTimeConstraint, EmailConstraint, EqualityConstraint, ExclusionConstraint, FormatConstraint, GenericConstraint, InclusionConstraint, LengthConstraint, NumericalityConstraint, PresenceConstraint, URLConstraint } from \"./validation.constraints\";\n\n\nexport interface IValidationRule {\n    date? : DateConstraint,\n    datetime? : DateTimeConstraint,\n    email?: EmailConstraint,\n    equality?: EqualityConstraint,\n    exclusion?: ExclusionConstraint,\n    format?: FormatConstraint,\n    inclusion?: InclusionConstraint,\n    length?: LengthConstraint,\n    numericality?: NumericalityConstraint,\n    presence?: PresenceConstraint,\n    url?: URLConstraint\n}\n\nexport const ValidationAllowedRules = {\n    \"input\"       : [\"email\", \"equality\", \"format\", \"inclusion\", \"length\", \"presence\", \"url\"],\n    \"checkbox\"    : [\"presence\"],\n    \"number\"      : [\"presence\", \"equality\", \"format\"],\n    \"select\"      : [\"presence\"],\n    \"cascader\"    : [\"presence\"],\n    \"radiogroup\"  : [\"presence\"],\n    \"checkboxgroup\": [\"presence\"],\n    \"textarea\"    : [\"email\", \"equality\", \"format\", \"inclusion\", \"length\", \"presence\", \"url\"],\n    \"daterange\"   : [\"presence\", \"date\", \"datetime\"],\n    \"datepicker\"  : [\"presence\", \"date\", \"datetime\"],\n    \"monthpicker\" : [\"presence\", \"date\", \"datetime\"],\n    \"timepicker\"  : [\"presence\", \"date\", \"datetime\"],\n    \"yearpicker\"  : [\"presence\", \"date\", \"datetime\"],\n    \"starrating\"  : [\"presence\"],\n    \"switch\"      : [\"presence\"],\n    \"transfer\"    : [\"presence\"],\n    \"slider\"      : [\"presence\"],\n    \"textblock\"   : [],\n    \"hidden\"      : [],\n    \"htmlfragment\": [],\n}\n\nexport const ValidationRuleNames = [\n    {key: \"date\", label: \"Date\", value: \"date\"},\n    {key: \"datetime\", label: \"Datetime\", value: \"datetime\"},\n    {key: \"email\", label: \"Email\", value: \"email\"},\n    {key: \"equality\", label: \"Equals\", value: \"equality\"},\n    {key: \"exclusion\", label: \"Excludes\", value: \"exclusion\"},\n    {key: \"format\", label: \"Matches\", value: \"format\"},\n    {key: \"inclusion\", label: \"Includes\", value: \"inclusion\"},\n    {key: \"length\", label: \"Length\", value: \"length\"},\n    {key: \"numericality\", label: \"Numeric\", value: \"numericality\"},\n    {key: \"presence\", label: \"Present\", value: \"presence\"},\n    {key: \"url\", label: \"URL\", value: \"url\"}\n];\n\nexport const ValidationRuleMap = {\n    \"date\": \"Date\",\n    \"datetime\": \"Datetime\",\n    \"email\": \"Email\",\n    \"equality\": \"Equals\",\n    \"exclusion\": \"Excludes\",\n    \"format\": \"Matches\",\n    \"inclusion\": \"Includes\",\n    \"length\": \"Length\",\n    \"numericality\": \"Numeric\",\n    \"presence\": \"Present\",\n    \"url\": \"URL\"\n};\n\nexport interface IValidationError {\n    id: string,\n    name: string,\n    message: string,\n    prefixedMessage: string,\n    validator: string\n}\n\nexport class ValidationRule implements IValidationRule {\n    @observable date : DateConstraint\n    @observable datetime : DateTimeConstraint\n    @observable email: EmailConstraint\n    @observable equality: EqualityConstraint\n    @observable exclusion: ExclusionConstraint\n    @observable format: FormatConstraint\n    @observable inclusion: InclusionConstraint\n    @observable length: LengthConstraint\n    @observable numericality: NumericalityConstraint\n    @observable presence: PresenceConstraint\n    @observable url: URLConstraint\n\n    constructor(rule: IValidationRule) {\n        this.initialize(rule);\n    }\n\n    @action initialize(rule: IValidationRule = {}) {\n        this.date = rule.date;\n        this.datetime = rule.datetime;\n        this.email = rule.email;\n        this.equality = rule.equality;\n        this.exclusion = rule.exclusion;\n        this.format = rule.format;\n        this.inclusion = rule.inclusion;\n        this.length = rule.length;\n        this.numericality = rule.numericality;\n        this.presence = rule.presence;\n        this.url = rule.url;\n    }\n\n    @computed get constraints() : IValidationRule {\n        let c = {};\n        Object.keys(ValidationRuleMap).forEach((rule: string) => {\n            if (this[rule]) {\n                c[rule] = toJS(this[rule]);\n            }\n        })\n        return c;\n    }\n    @action addConstraint(key: string, settings: GenericConstraint) {\n        this[key] = settings;\n    }\n\n    @action updateConstraint(key: string, settings: GenericConstraint) {\n        this[key] = settings;\n    }\n\n    @action removeConstraint(key: string) {\n        this[key] = null;\n    }\n}","import {action, decorate, observable, computed, toJS} from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport moment from 'moment'\nimport {Field} from \"./field\";\nimport {ValidationRule, IValidationError, IValidationRule} from \"./validation\";\n\nvar validate = require(\"validate.js\");\n\nvalidate.extend(validate.validators.datetime, {\n    // The value is guaranteed not to be null or undefined but otherwise it\n    // could be anything.\n    parse: function(value, options) : number {\n      return +moment.utc(value);\n    },\n    // Input is a unix timestamp\n    format: function(value: moment.MomentInput, options: any = {}) : string {\n      var format = options.dateOnly ? \"YYYY-MM-DD\" : \"YYYY-MM-DD hh:mm:ss\";\n      return moment.utc(value).format(format);\n    }\n});\n\nexport interface IValidationProps {\n    store: FormStoreType,\n    field: Field,\n    rule: IValidationRule\n}\n\nexport class Validator {\n    store: FormStoreType;\n    field: Field;\n    @observable rule : ValidationRule;\n    @observable validationErrors: IValidationError[] = [];\n\n    @computed get isValid() : boolean {\n        return this.validationErrors.length == 0;\n    }\n\n    @computed get errors() : IValidationError[] {\n        return this.validationErrors;\n    }\n\n    formatError(errors: any): IValidationError {\n        return errors.map((e: any) => {\n            let prefixedMessage = e.error || \"\";\n            let unPrefixedMessage = e.error ? e.error.replace(`${e.attribute.toUpperCase()} `, \"\") : e.options.message;\n            return {id: this.field.id,\n                name: e.attribute,\n                message: unPrefixedMessage,\n                prefixedMessage: prefixedMessage,\n                validator: e.validator\n            };\n        });\n    }\n\n    @computed get isValidateable() {\n        let {field} = this;\n        return !this.store.validationDisabled && !field.isHidden && field.conditionState && !!this.rule && Object.keys(this.rule).length > 0;\n    }\n\n    @action validate() {\n        if (this.isValidateable == true) {\n            let {field, store} = this;\n            let {id} = field;\n            let constraints = {};\n            constraints[field.id] = this.rule.constraints;\n            validate.formatters.custom = this.formatError.bind(this);\n            let values = toJS(store.values);\n\n            this.validationErrors = validate(values, constraints, {format: \"custom\"}) || [];\n            if (this.validationErrors.length > 0) {\n                this.store.setFieldError(id, this.validationErrors[0].message);\n            } else {\n                this.store.setFieldError(id, undefined);\n            }\n        } else {\n            this.validationErrors = [];\n        }\n    }\n\n    @computed get isRequired() : boolean {\n        return !!this.rule.presence;\n    }\n\n    @action initialize(data: IValidationProps) {\n        this.rule = new ValidationRule(data.rule || {} as IValidationRule);\n        this.store = data.store;\n        this.field = data.field;\n    }\n\n    constructor(data: IValidationProps) {\n        this.initialize(data);\n    }\n}","import { observable } from \"mobx\";\nimport { Field } from \"../models/field\";\nimport { Form } from \"../models/form\";\nimport { Page } from \"../models/page\";\n\nexport const createFormStore = () => {\n    const store = {\n        errors : {},\n        values: {},\n        touched: {},\n        currentPage: 0,\n        debug : (window && window.location.hostname.indexOf('localhost') > -1) ? true : false,\n        form :<Form> null,\n        isReady: false,\n        submitting: false,\n        validationDisabled: false,\n        conditionsDisabled: false,\n        get idFieldMap() : { [key:string]:Field; } {\n            if (!this.form) {\n                return {}\n            }\n            return this.form.content.pages.reduce((all: {}, p: Page) => {\n                return {...all, ...p.idFieldMap};\n            }, {});\n        },\n        get uuidFieldMap() : { [key:string]:Field; } {\n            if (!this.form) {\n                return {}\n            }\n            return this.form.content.pages.reduce((all: {}, p: Page) => {\n                return {...all, ...p.uuidFieldMap};\n            }, {});\n        },\n        get fieldNames() : string[] {\n            if (!this.form) {\n                return []\n            }\n            return this.form.content.pages.reduce((all: string[], p: Page) => {\n                return all.concat(p.fieldNames);\n            }, <string[]>[])\n        },\n        get isValid() : boolean {\n            if (this.form && this.form.content && this.form.content.pages && this.form.content.pages.length > 0) {\n                return this.form.content.pages.every((p: Page) => {\n                    return p.isValid\n                })\n            } else {\n                return true;\n            }\n        },\n        setSubmitting(value: boolean) {\n            this.submitting = value;\n        },\n        get isSubmitting() : boolean {\n            return this.submitting;\n        },\n        get numPages() : number {\n            return this.form ? this.form.content.pages.length : 0;\n        },\n        get hasNextPage() : boolean {\n            return this.currentPage < this.numPages -1;\n        },\n        get hasPrevPage() : boolean {\n            return this.currentPage > 0 && this.numPages > 1\n        },\n        get isSubmittable() : boolean {\n            return !(Object.keys(this.touched).length == 0 || !this.isValid|| this.isSubmitting);\n        },\n        nextPage : function () {\n            if(!this.form) {\n                return;\n            }\n            let currentPage = this.form.content.pages[this.currentPage] as Page;\n            let errors = currentPage.errors;\n            let {validationDisablesPaging} = this.form.formLayoutOptions;\n            // Highlight all errors\n            currentPage.fieldIds.forEach((id: string) => {\n                this.touched[id] = true;\n            });\n            if (!errors || errors.length == 0||validationDisablesPaging == false) {\n                this.currentPage = this.currentPage + 1;\n            }\n        },\n        prevPage : function() {\n            this.currentPage = this.currentPage - 1;\n        },\n        setForm : function (form: Form) {\n            this.form = form;\n        },\n        setFieldValue: function (id: string, value: any) {\n            this.values[id] = value;\n        },\n        setFieldTouched: function (id: string) {\n            this.touched[id] = true;\n        },\n        setFieldError: function (id: string, error: any) {\n            this.errors[id] = error;\n        }\n    }\n    return observable(store);\n}\n\nexport type FormStoreType = ReturnType<typeof createFormStore>;","import * as React from \"react\";\nimport {FormStoreType, createFormStore} from \"./FormStore\";\nimport { useLocalStore } from \"mobx-react\";\nimport { IFormProps } from '../models/form.properties';\nimport { Factory } from '../models/factory';\nexport const formStoreContext = React.createContext<FormStoreType | null>(null);\n\nexport interface FormStoreProviderProps {\n  initialState?: IFormProps;\n  formStore?: FormStoreType;\n}\n\nexport const FormStoreProvider: React.FC<FormStoreProviderProps> = (props) => {\n    let store;\n    if (props.formStore) {\n        store = props.formStore;\n    } else if (props.initialState) {\n        store = useLocalStore(createFormStore);\n        store.setForm(Factory.makeForm(store, props.initialState));\n    } else {\n      throw new Error(\"FormStoreProvider - Pass initialState or formStore\")\n    }\n    return (\n      <formStoreContext.Provider value={store}>\n        {props.children}\n      </formStoreContext.Provider>\n    )\n}","module.exports = antd;","module.exports = moment;","module.exports = React;","module.exports = ReactDOM;"],"sourceRoot":""}