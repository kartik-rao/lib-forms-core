{"version":3,"sources":["webpack:///./src/app.tsx","webpack:///./src/models/column.ts","webpack:///./src/models/common.ts","webpack:///./src/models/condition.predicate.ts","webpack:///./src/models/condition.ts","webpack:///./src/models/factory.ts","webpack:///./src/models/field.ts","webpack:///./src/models/form.ts","webpack:///./src/models/layout.ts","webpack:///./src/models/page.ts","webpack:///./src/models/section.ts","webpack:///./src/models/validation.ts","webpack:///./src/models/validator.ts","webpack:///./src/store/FormStore.ts","webpack:///./src/store/FormStoreProvider.tsx","webpack:///external \"antd\"","webpack:///external \"moment\"","webpack:///external \"React\"","webpack:///external \"ReactDOM\""],"names":["renderForm","selector","initialState","FormView","lazy","then","module","default","style","height","overflow","Header","Suspense","fallback","document","querySelector","action","reaction","transaction","compute","id","name","desc","layout","content","title","subtitle","pages","sections","gutter","columns","fields","type","inputType","label","helpText","validation","presence","message","length","minimum","componentProps","size","placeholder","numericality","defaultValue","options","value","dateFormat","defaultStartValue","defaultEndValue","minStartDate","from","relative","days","maxEndDate","condition","predicates","field","defaultChecked","itemLayoutOptions","labelCol","span","wrapperCol","formLayoutOptions","showSteps","showPageTitles","showSectionTitles","showSectionBorders","showPageBorders","validationDisablesPaging","lg","Column","data","store","_type","this","initialize","reduce","all","f","concat","validator","errors","every","i","isValid","index","splice","push","forEach","addField","index1","index2","atIndex","toIndex","uuid","valueOrDefault","Predicate","operator","PredicateConditions","indexOf","Error","PredicateOperators","Condition","p","ancestors","self","lhs","rhs","op","state","currentValue","values","result","uuidv1","Factory","item","Math","random","toFixed","response","predicate","ensureIds","makePredicates","r","c","makeFields","floor","column","s","makeColumns","page","makeSections","formData","form","makePages","_formData","setForm","Field","fieldOptions","valuePropName","Object","assign","rule","storage","children","location","touched","setValue","setCondition","conditionState","validate","isValidateable","setFieldValue","console","log","setFieldTouched","_dispose","change","setConditionState","newValue","clone","JSON","stringify","Form","exid","tenant","eid","mid","context","stack","status","timezone","paused","active","created","edited","starts","ends","labels","offset","width","sidebar","scripts","styles","datasets","paginate","css","inline","external","header","rows","footer","trackingPixels","total","numFields","validTarget","stopSubmit","idFieldMap","keys","e","preventDefault","stopPropagation","setSubmitting","meta","payload","key","isSubmittable","submitTarget","a","post","catch","reason","submitError","successRedirect","setTimeout","window","href","errorRedirect","dir","bound","AllScreenWidths","LayoutOption","props","map","filter","d","dimension","colspan","FormLayoutOptions","labelAlign","ItemLayoutOptions","Page","fieldNames","section","fieldIds","icon","Section","ValidationAllowedRules","ValidationRuleNames","ValidationRuleMap","ValidationRule","date","datetime","email","equality","exclusion","format","inclusion","url","settings","extend","validators","parse","utc","dateOnly","Validator","validationErrors","prefixedMessage","error","unPrefixedMessage","replace","attribute","toUpperCase","isHidden","constraints","formatters","custom","formatError","bind","setFieldError","undefined","createFormStore","currentPage","box","debug","hostname","isReady","submitting","validationDisabled","conditionsDisabled","set","get","nextPage","prevPage","makeForm","formStoreContext","FormStoreProvider","factory","Provider","exports","antd","moment","React","ReactDOM"],"mappings":"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","file":"main.chunk.js","sourcesContent":["import { Layout } from \"antd\";\nimport { enableLogging } from 'mobx-logger';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport \"./app.css\";\nimport { FormStoreProvider } from \"./store/FormStoreProvider\";\n\nenableLogging({\n    action: false,\n    reaction: false,\n    transaction: false,\n    compute: false\n});\n\nexport default async function renderForm(selector:string, initialState: any) {\n    const FormView = React.lazy(() => import(/* webpackChunkName: \"core\" */ \"./views/FormView\").then((module) => {return {default: module.FormView}}));\n\n    render(\n        <Layout style={{height: '100vh', overflow: 'hidden'}}>\n            <Layout.Header></Layout.Header>\n            <React.Suspense fallback=\"Loading\">\n                <FormStoreProvider initialState={initialState}>\n                    <FormView />\n                </FormStoreProvider>\n            </React.Suspense>\n    </Layout>, document.querySelector(selector)\n    )\n};\n\nrenderForm(\"#root\", {\n    id: \"foo\",\n    name: \"A sample form\",\n    desc: \"A simple form to demonstrate Forms.li\",\n    layout: 'vertical',\n    content: {\n        title: 'Form title',\n        subtitle: 'Form subtitle',\n        pages: [\n            {\n                title: 'Page 1',\n                sections: [\n                    {\n                        gutter: 16,\n                        name: \"Section 1\",\n                        columns: [{\n                            id: 1,\n                            name: 's1c1',\n                            title: 'Section 1 - Column 1',\n                            fields: [\n                                {\n                                    id: \"f1\", name: \"f1\", type: \"text\", inputType: \"input\", label: \"f1 - Text Label\",\n                                    helpText: \"f1 help\",\n                                    validation: {\n                                        presence: { message: 'f1 is a required field' },\n                                        length: { message: 'f1 should be length 2', minimum: 2},\n                                    },\n                                    componentProps: {\n                                        size: \"small\",\n                                        placeholder: 'Placeholder Text',\n                                    }\n                                },\n                                {\n                                    id: 'f10', name: \"f10\", type: 'number', label: \"f10 -Number Field \", inputType : \"number\",\n                                    helpText: \"f2 help\",\n                                    validation: {\n                                        presence: { message: 'f10 is a required field' },\n                                        numericality : true\n                                    },\n                                    componentProps: {\n                                        defaultValue: 10,\n                                    }\n                                }\n                            ]\n                        },{\n                            id: 2,\n                            name: 's1c2',\n                            title: 'Section 1 - Column 2',\n                            fields: [{\n                                id: \"f2\", name: \"f2\", inputType: \"select\", label: \"f2 - select\",\n                                    componentProps: {\n                                        placeholder: \"f2 - select placeholder\",\n                                        options: [\n                                        { label: \"option1\", value: \"option1\" },\n                                        { label: \"option2\", value: \"option2\" }\n                                    ]}\n                                },{\n                                    id: \"f8\", name: \"f8\", inputType: \"datepicker\", label: \"f8 - datepicker label\",\n                                    validation: {\n                                            presence: { message: \"f8 is required\"}\n                                    },\n                                    componentProps: {\n                                        dateFormat: 'YYYY-MM-DD'\n                                    }\n                                },\n                                {\n                                    id: \"f9\", name: \"f9\", inputType: \"daterange\", label: \"f9 - daterange label\",\n                                    validation: {\n                                        presence: { message: \"f9 is required\"}\n                                    },\n                                    componentProps: {\n                                        dateFormat: 'YYYY-MM-DD',\n                                        defaultStartValue: '2019-03-01',\n                                        defaultEndValue  : '2019-03-31',\n                                        minStartDate : {from: 'now', relative:{days: -20}},\n                                        maxEndDate: {from: 'start', relative:{days: 10}}\n                                    }\n                                },\n                            {\n                                id: \"f3\", name: \"f3\", type: \"text\", inputType: \"input\", label: \"f3 - conditional text label\",\n                                validation: {\n                                    presence: { message: 'f3 is required' }\n                                },\n                                condition: {predicates:[ { field: \"f1\", condition: \"eq\", value: \"showme\" } ]},\n                                componentProps: {\n                                    placeholder: 'Placeholder Text'\n                                }\n                            },\n                            {\n                                id: \"f30\", name: \"f30\", type: \"checkbox\", inputType: \"checkbox\", label: \"f30 - Checkbox\",\n                                componentProps: {\n                                    defaultChecked: true\n                                }\n                            }]\n                        }]\n                    },\n                    {\n                        name: \"P2S2\",\n                        columns: [\n                            {\n                                id: 9,\n                                name: 'p1s2c1',\n                                title: 'p1s2c1',\n                                fields: [{\n                                    id: \"f18\", name: \"f18\", type: \"text\", inputType: \"input\", label: \"f18 - text label\",\n                                    validation: {\n                                        presence: { message: 'F18 is reqired' }\n                                    },\n                                    componentProps: {\n                                        placeholder: 'Placeholder Text F18',\n                                    },\n                                    itemLayoutOptions: {\n                                        labelCol: {span: 24},\n                                        wrapperCol: {span: 12}\n                                    }\n                                }]\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                title: 'Page 2',\n                sections: [\n                    {\n                        name: \"A Section\",\n                        columns: [\n                            {\n                                id: 3,\n                                name: 'p2s1c1',\n                                title: 'Section 2 - Column 1',\n                                fields: [{\n                                    id: \"f5\", name: \"f5\", inputType: \"textblock\", label: \"f5 - Text Label\",\n                                    value: \"Lorem ipsum text\"\n                                },{\n                                    id: \"f4\", name: \"f4\", type: \"text\", inputType: \"input\", label: \"f4 - text label F4\",\n                                    validation: {\n                                        presence: { message: 'f4 s required' },\n                                        length: { minimum: 2,  message: \"f4 must be of minlength=2\" },\n                                    },\n                                    componentProps: {\n                                        placeholder: 'Placeholder Text F4'\n                                    }\n                                },{\n                                    id: 'f11', name: \"f11\", type: 'radiogroup', label: \"f11 -Radiogroup \", inputType : \"radiogroup\",\n                                    validation: {\n                                        presence: { message: 'f11 is a required field' }\n                                    },\n                                    componentProps: {\n                                        options: [{label: 'L1', value: 'V1'},{label: 'L2', value: 'V2'},{label: 'L3', value: 'V3'}]\n                                    }\n                                },\n                                {\n                                    id: 'f12', name: \"f12\", type: 'checkboxgroup', label: \"f12 - Checkboxgroup \", inputType : \"checkboxgroup\",\n                                    validation: {\n                                        presence: { message: 'f12 is a required field' }\n                                    },\n                                    componentProps: {\n                                        options : [{label: 'L1', value: 'V1'},{label: 'L2', value: 'V2'},{label: 'L3', value: 'V3'}]\n                                    }\n                                }\n                            ]}\n                        ]\n                    }\n                ]\n            },\n            {\n                title: 'Page 3',\n                sections: [\n                    {\n                        name: \"A Section\",\n                        columns: [\n                            {\n                                id: 4,\n                                name: 's1c1',\n                                title: 'Section 1 - Column 1',\n                                fields: [{\n                                    id: \"f6\", name: \"f6\", type: \"text\", inputType: \"input\", label: \"f6 - text label\",\n                                    validation: {\n                                        presence: { message: 'Reqired validation message' },\n                                        length: { minimum: 2,  message: \"MinLength=2 validation message\" },\n                                    },\n                                    componentProps: {\n                                        placeholder: 'Placeholder Text F6',\n                                    }\n                                }]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    formLayoutOptions: {\n        showSteps: true,\n        showPageTitles : true,\n        showSectionTitles: true,\n        showSectionBorders : true,\n        showPageBorders: true,\n        validationDisablesPaging: false\n    },\n    itemLayoutOptions : {\n        wrapperCol: {\n            lg:{span: 10}\n        }\n    }\n});","import { action, computed, observable } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { valueOrDefault } from \"./common\";\nimport { Field } from \"./field\";\nimport { IFieldProps } from \"./field.properties\";\nimport { IValidationError } from \"./validation\";\n\nexport interface IColumn {\n    id  :string;\n    uuid?:string;\n    _type?: string;\n    name?:string;\n    title?:string;\n    span?:number;\n    fields?: IFieldProps[];\n}\n\nexport class Column implements IColumn {\n    readonly _type : string = \"Column\";\n    @observable uuid: string;\n    @observable id: string;\n    @observable name: string;\n    @observable span: number;\n    @observable title: string;\n    @observable fields: Field[];\n    store: FormStoreType;\n\n    @computed get errors() : IValidationError[] {\n        return this.fields.reduce((all: any[], f: Field)=>{\n            return all.concat(f.validator.errors);\n        }, <any[]>[]);\n    }\n\n    @computed get isValid() : boolean {\n        return this.fields.every((f, i) => {\n            return f.isValid;\n        });\n    }\n\n    @computed get idFieldMap() : { [key:string]:Field; } {\n        return this.fields.reduce((all: {}, f: Field)=>{\n            all[f.id] = f;\n            return all;\n        }, {});\n    }\n\n    @computed get numFields() : number {\n        return this.fields.length;\n    }\n\n    @action addField(field: Field, index?: number) : void {\n        if (typeof index != 'undefined' && index != null && index > -1) {\n            this.fields.splice(index, 0, field);\n        } else {\n            this.fields.push(field);\n        }\n    }\n\n    @action addFields(...fields: Field[]) {\n        fields.forEach((f: Field) => this.addField(f));\n    }\n\n    @action removeField(index: number) {\n        this.fields.splice(index, 1)\n    }\n\n    @action swapFields(index1: number, index2: number): void {\n        let { fields } = this;\n        [fields[index1], fields[index2]] = [fields[index2], fields[index1]];\n    }\n\n    @action moveField(atIndex: number, toIndex: number) {\n        this.fields.splice(toIndex, 0, this.fields.splice(atIndex, 1)[0]);\n    }\n\n    constructor(data: IColumn, store) {\n        this.initialize(data, store);\n    }\n\n    @action initialize(data: IColumn, store: FormStoreType) {\n        this.uuid = data.uuid;\n        this.store = store;\n        this.id = data.id;\n        this.span = data.span;\n        this.name = valueOrDefault(data.name, `${this._type}-${data.id}`);\n        this.title = valueOrDefault(data.title, '');\n        this.fields = valueOrDefault(<Field[]>data.fields, <Field[]>[]);\n    }\n}","const uuidv1 = require('uuid/v1');\n\nexport function valueOrDefault<T>(value: T, defaultValue: T|null): T {\n    return (typeof(value) !== 'undefined' && value !== null ? value : defaultValue);\n}\n","import { action, observable } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\n\nexport interface IPredicate {\n    uuid?: string;\n    field: string;\n    condition: any;\n    value?: any;\n    operator?: string;\n}\n\nexport class Predicate implements IPredicate {\n    static readonly PredicateConditions = [\"eq\",  \"neq\",  \"gt\",  \"lt\", \"gteq\", \"lteq\", \"hasval\", \"nothasval\"];\n    static readonly PredicateOperators = [\"or\", \"and\"];\n    uuid: string;\n    @observable field: string;\n    @observable condition: string;\n    @observable value: any;\n    @observable operator: string = \"or\";\n    store: FormStoreType;\n\n    @action initialize(data: IPredicate, store: FormStoreType) {\n        if (!data.condition || Predicate.PredicateConditions.indexOf(data.condition) == -1) {\n            throw new Error(`InvalidPredicateCondition - ${data.condition}`);\n        }\n        if(data.operator && Predicate.PredicateOperators.indexOf(data.operator) == -1) {\n            throw new Error(`InvalidPredicateOperator - ${data.operator}`);\n        }\n        this.uuid = data.uuid;\n        this.store = store;\n        this.field = data.field;\n        this.condition = data.condition;\n        this.value = data.value;\n        this.operator = data.operator;\n    }\n\n    constructor(data:IPredicate, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n}","import { action, computed, observable, observe } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { IPredicate, Predicate } from \"./condition.predicate\";\n\nexport interface ICondition {\n    predicates: IPredicate[],\n    ancestors?: string[],\n}\n\nexport class Condition {\n    @observable predicates: Predicate[];\n    @observable ancestors?: string[];\n    store: FormStoreType;\n\n    @action initialize(data: ICondition, store: FormStoreType) {\n        let predicates : Predicate[] = [];\n        data.predicates.forEach((p: IPredicate)=> {\n            predicates.push(new Predicate(p, store));\n        })\n        this.predicates = predicates;\n        this.ancestors = [];\n        this.store = store;\n        let self = this;\n\n        this.predicates.forEach((p) => {\n            self.ancestors.push(p.field);\n        });\n    }\n\n    constructor(data: ICondition, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n\n    @action addPredicates(...p : IPredicate[]) {\n        p.forEach((p) => {\n            this.predicates.push(new Predicate(p, this.store));\n            this.ancestors.push(p.field);\n        });\n    }\n\n    reduce(lhs:any, rhs:any, op: string) : boolean {\n        if (op == 'and') {\n            return lhs && rhs;\n        } else {\n            return lhs || rhs;\n        }\n    }\n\n    @computed get value() : boolean {\n        var state: boolean;\n        let self = this;\n\n        if (!this.predicates || this.predicates.length == 0){\n            return true;\n        }\n\n        this.predicates.forEach((p, i) => {\n            let currentValue = self.store.values[p.field];\n            var result: any = null;\n            switch(p.condition) {\n                case \"eq\":\n                    result = currentValue == p.value;\n                    break;\n                case \"neq\":\n                    result = currentValue != p.value;\n                    break;\n                case \"gt\":\n                    result = currentValue > p.value;\n                    break;\n                case \"lt\":\n                    result = currentValue < p.value;\n                    break;\n                case \"gteq\":\n                    result = currentValue >= p.value;\n                    break;\n                case \"lteq\":\n                    result = currentValue <= p.value;\n                    break;\n                case \"hasval\":\n                    result = typeof(currentValue) != 'undefined' && currentValue != null && currentValue !== \"\";\n                    break;\n                case \"nothasval\":\n                    result = typeof(currentValue) == 'undefined' || currentValue == null || currentValue == \"\";\n                    break;\n                default:\n                    result = false;\n            }\n            state = (i == 0) ? result : this.reduce(state, result, p.operator);\n        });\n        return state;\n    }\n}","import { FormStoreType } from \"../store/FormStore\";\nimport { Column, IColumn } from \"./column\";\nimport { Condition, ICondition } from \"./condition\";\nimport { IPredicate, Predicate } from \"./condition.predicate\";\nimport { Field } from \"./field\";\nimport { IFieldProps } from \"./field.properties\";\nimport { Form } from \"./form\";\nimport { IFormProps } from \"./form.properties\";\nimport { IPage, Page } from \"./page\";\nimport { ISection, Section } from \"./section\";\nconst uuidv1 = require('uuid/v1');\n\nexport class Factory {\n    store: FormStoreType;\n\n    constructor(store: FormStoreType) {\n        this.store = store;\n    }\n\n    ensureIds<T>(item: T) {\n        if (!item['uuid']) {\n            item['uuid'] = uuidv1();\n        }\n\n        if(!item['id']) {\n            item['id'] = (1e6 * Math.random()).toFixed(0) + \"\";\n        }\n    }\n\n    makePredicates(...predicates: IPredicate[]) : Predicate[] {\n        let response: Predicate[] = [];\n        predicates.forEach((predicate: IPredicate) => {\n            this.ensureIds(predicate);\n            response.push(new Predicate(predicate, this.store));\n        });\n        return response;\n\n    }\n\n    makeCondition(condition: ICondition) : Condition {\n        let predicates = this.makePredicates(...condition.predicates);\n        return new Condition({predicates: predicates}, this.store);\n    }\n\n    makeFields(...fields: IFieldProps[]) : Field[] {\n        if (!fields || fields.length == 0) {\n            return <Field[]>[];\n        }\n        return fields.reduce((r: Field[], f: IFieldProps) => {\n            this.ensureIds(f);\n            r.push(new Field({...f, condition: f.condition}, this.store));\n            return r;\n        }, <Field[]>[]);\n    }\n\n    makeColumns(...columns: IColumn[]) : Column[] {\n        let response : Column[] = [];\n        if (!columns || columns.length == 0) {\n            return response;\n        }\n\n        columns.forEach((c: IColumn) => {\n            this.ensureIds(c);\n            let fields = this.makeFields(...c.fields);\n            if (!c.span) {\n                c.span = Math.floor(24/columns.length);\n            }\n            let column = new Column({...c, fields: fields}, this.store);\n            response.push(column);\n        })\n        return response;\n    }\n\n    makeSections(...sections: ISection[]) : Section[] {\n        let response: Section[] = [];\n        if (!sections || sections.length == 0) {\n            return <Section[]>[];\n        }\n        sections.forEach((s: ISection) => {\n            this.ensureIds(s);\n            let columns = s.columns && s.columns.length > 0 ? this.makeColumns(...s.columns) : <Column[]>[];\n            response.push(new Section({...s, columns: columns}, this.store));\n        });\n        return response;\n    }\n\n    makePages(...pages: IPage[]) : Page[] {\n        if (!pages || pages.length == 0) {\n            return <Page[]>[];\n        }\n        let response: Page[] = [];\n        pages.forEach((page: IPage) => {\n            this.ensureIds(page);\n            let sections = this.makeSections(...page.sections);\n            response.push(new Page({...page, sections: sections}, this.store));\n        });\n        return response;\n    }\n\n    makeForm(formData: IFormProps) : Form {\n        let form: Form;\n        if (formData && formData.content && formData.content.pages) {\n            formData.content.pages = this.makePages(...formData.content.pages)\n            form = new Form(formData, this.store);\n        } else {\n            let _formData = formData ? formData : {id: null, content: {pages: []}}\n            form = new Form(_formData, this.store);\n        }\n        this.store.setForm(form);\n        return form;\n    }\n}","import { action, computed, observable, observe, toJS, autorun } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { Condition, ICondition } from \"./condition\";\nimport { IFieldOptions } from \"./field.options\";\nimport { IComponentProps, IFieldProps, IFieldRuntimeProps, IFieldStorage } from \"./field.properties\";\nimport { ItemLayoutOptions } from './layout';\nimport { IValidationRule, ValidationRule } from \"./validation\";\nimport { Validator } from \"./validator\";\nimport { observer } from 'mobx-react-lite';\n\n\nexport class Field implements IFieldProps, IFieldRuntimeProps {\n    readonly _type : string = \"Field\";\n    uuid: string;\n    @observable id: string;\n    @observable name: string;\n\n    @observable type: string;\n    @observable label: string;\n    @observable value : any;\n    @observable touched: boolean;\n    @observable inputType: string;\n    @observable helpText: string;\n    @observable placeholder: string;\n    fieldOptions: IFieldOptions;\n    children: any;\n    @observable condition: Condition;\n    @observable storage: IFieldStorage;\n    store: FormStoreType;\n    @observable location: any;\n    @observable conditionState: boolean;\n    @observable validator : Validator;\n    validation: IValidationRule;\n    @observable componentProps: IComponentProps;\n    @observable itemLayoutOptions : ItemLayoutOptions;\n    _dispose : any;\n\n    @action mergeUpdate(data: Partial<IFieldProps>) {\n        this.id = data.id ? data.id : this.id;\n        this.name = data.name;\n        this.label = data.label;\n        this.helpText = data.helpText;\n        this.placeholder = data.placeholder;\n        let {fieldOptions} = data;\n        this.fieldOptions = {...this.fieldOptions, ...{valuePropName: fieldOptions ? fieldOptions.valuePropName : this.fieldOptions.valuePropName}};\n        this.componentProps = <IComponentProps>{...this.componentProps, ...data.componentProps};\n        return;\n    }\n\n    @action initialize(data: IFieldProps, store: FormStoreType) {\n        this.store = store;\n        this.id = data.id;\n        this.uuid = data.uuid;\n        this.name = data.name || `${this._type}_${data.id}`;\n        this.type = data.type;\n        this.label = data.label;\n        this.inputType = data.inputType;\n        this.fieldOptions = data.fieldOptions ? Object.assign({id: data.id}, {...data.fieldOptions}) : {id: data.id};\n        this.fieldOptions.valuePropName = (data.fieldOptions||{}).valuePropName || this.name;\n        this.validation = data.validation;\n        this.validator = new Validator({rule: new ValidationRule(data.validation), field: this, store: store});\n        this.storage = data.storage;\n        this.label = data.label;\n        this.helpText = data.helpText;\n        this.placeholder = data.placeholder;\n        this.children = data.children || {};\n        this.componentProps = data.componentProps || {};\n        this.location = data.location || {};\n        this.touched = false;\n        this.itemLayoutOptions = new ItemLayoutOptions(data.itemLayoutOptions);\n\n        if (this.componentProps && this.componentProps['defaultValue']) {\n            this.setValue(this.componentProps['defaultValue']);\n        } else if (this.componentProps && this.componentProps['defaultChecked']) {\n            this.setValue(this.componentProps['defaultChecked']);\n        }\n\n        if (!this.fieldOptions.valuePropName) {\n            this.fieldOptions.valuePropName = `${this.id}_value`;\n        }\n\n        if(this.inputType == 'daterange') {\n            this.componentProps[\"startValuePropsName\"] = !!this.componentProps[\"startValuePropsName\"] ? this.componentProps[\"startValuePropsName\"] : `start_date`;\n            this.componentProps[\"endValuePropsName\"] = !!this.componentProps[\"endValuePropsName\"] ? this.componentProps[\"endValuePropsName\"] : `end_date`;\n        }\n\n        if (data.condition) {\n            this.setCondition(data.condition);\n        } else {\n            this.condition = null;\n            this.conditionState = true;\n        }\n        this.validate();\n        return;\n    }\n\n    @computed get className() : string {\n        return `.fl-field .fl-${this.inputType}${this.type?'-'+this.type:''}`;\n    }\n\n    @computed get isTouched() : boolean {\n        return this.store.touched[this.id];\n    }\n\n    @computed get isValidateable() {\n        return this.validator.isValidateable;\n    }\n\n    @computed get isValid() : boolean {\n        return this.validator.isValid;\n    }\n\n    @computed get isHidden() : boolean {\n        return this.inputType == \"hidden\";\n    }\n\n    @computed get isRequired() : boolean {\n        return !!this.validator.rule.presence;\n    }\n\n    @computed get currentValue() {\n        return this.value\n    }\n\n    @computed get isDisabled() : boolean {\n        return !this.conditionState;\n    }\n\n    @action setValue(value: any) {\n        this.value = value;\n        this.store.setFieldValue(this.id, value);\n        this.condition ? console.log(\"Condition Value\",  this.condition.value) : void(0);\n        this.validate();\n    }\n\n    @action setTouched() {\n        this.touched = true;\n        this.store.setFieldTouched(this.id);\n        this.validate();\n    }\n\n    @action setConditionState(value: boolean) {\n        this.conditionState = value;\n        this.validate();\n    }\n\n    @action setCondition(condition: ICondition) {\n        if(condition == null || !condition.predicates || condition.predicates.length == 0) {\n            this.condition = null;\n            this.conditionState = true;\n            if(this._dispose) {\n                this._dispose();\n            }\n            this.validate();\n            return;\n        }\n\n        this.condition = new Condition(condition, this.store);\n        this.conditionState = this.condition.value;\n\n        this._dispose = observe(this.condition, \"value\", (change) => {\n            this.setConditionState(change.newValue)\n            if(change.newValue == true) {\n                this.validate();\n            }\n        }, true);\n    }\n\n    @action validate() {\n\n       this.validator.validate();\n    }\n\n    @computed get serialize(): string  {\n        let clone = toJS(this);\n        delete clone.store;\n        delete clone.validator;;\n        return JSON.stringify(clone);\n    }\n\n    constructor(data: IFieldProps, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n}","import axios from \"axios\";\nimport { action, computed, observable } from \"mobx\";\nimport { FormEvent } from \"react\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { valueOrDefault } from \"./common\";\nimport { Field } from \"./field\";\nimport { IFormContent, IFormProps, IFormStatus, IFormTenant } from \"./form.properties\";\nimport { FormLayoutOptions, ItemLayoutOptions } from './layout';\nimport {Page} from \"./page\";\nimport { IValidationError } from \"./validation\";\n\n\nexport class Form implements IFormProps {\n    store: FormStoreType\n    uuid: string;\n\n    @observable id: string;\n    @observable exid: string;\n    @observable desc: string;\n    @observable name: string;\n    @observable tenant: IFormTenant;\n    @observable status: IFormStatus;\n    @observable content: IFormContent;\n    @observable layout: any;\n    @observable stopSubmit: boolean;\n    @observable submitTarget: string;\n    @observable submitError: string;\n    @observable formLayoutOptions: FormLayoutOptions;\n    @observable itemLayoutOptions: ItemLayoutOptions;\n    @observable successRedirect: string;\n    @observable errorRedirect: string;\n\n    @action initialize(data: IFormProps, store: FormStoreType) {\n        console.log(\"Init form with store\", store);\n        this.store = store;\n        this.id = data.id;\n        this.name = data.name;\n        this.uuid = data.uuid;\n        this.exid = valueOrDefault(data.exid, null);\n        this.desc = valueOrDefault(data.desc, null);\n        if (data.tenant) {\n            this.tenant = {\n                eid: valueOrDefault(data.tenant.eid, null),\n                mid: valueOrDefault(data.tenant.mid, null),\n                context: valueOrDefault(data.tenant.context, null),\n                stack: valueOrDefault(data.tenant.stack, null)\n            }\n        } else {\n            this.tenant = {eid:null, mid:null, context:null, stack: null}\n        }\n\n        if (data.status) {\n            this.status = {\n                timezone: valueOrDefault(data.status.timezone, null),\n                paused: valueOrDefault(data.status.paused, null),\n                active: valueOrDefault(data.status.active, null),\n                created: valueOrDefault(data.status.created, null),\n                edited: valueOrDefault(data.status.edited, null),\n                starts: valueOrDefault(data.status.starts, null),\n                ends: valueOrDefault(data.status.ends, null)\n            }\n        } else {\n            this.status = {timezone: null, paused: false, active: false, created: null, edited: null, starts: null, ends: null}\n        }\n\n        if (data.content) {\n            this.content = {\n                title: valueOrDefault(data.content.title, null),\n                subtitle: valueOrDefault(data.content.subtitle, null),\n                labels: valueOrDefault(data.content.labels, null),\n                offset: valueOrDefault(data.content.offset, null),\n                width: valueOrDefault(data.content.width, null),\n                sidebar: valueOrDefault(data.content.sidebar, null),\n                scripts: valueOrDefault(data.content.scripts, null),\n                styles: valueOrDefault(data.content.styles, null),\n                datasets: valueOrDefault(data.content.datasets, null),\n                pages: valueOrDefault(<Page[]>data.content.pages, []),\n                paginate: valueOrDefault(data.content.paginate, false)\n            }\n            if (data.content.css) {\n                this.content.css = {\n                    inline : valueOrDefault(data.content.css.inline, []),\n                    external: valueOrDefault(data.content.css.external, [])\n                }\n            } else {\n                this.content.css = {inline: null, external: null}\n            }\n            if (data.content.header) {\n                this.content.header = {\n                    rows: valueOrDefault(data.content.header.rows, [])\n                }\n            } else {\n                this.content.header = {rows: []}\n            }\n\n            if (data.content.footer) {\n                this.content.footer = {\n                    rows: valueOrDefault(data.content.footer.rows, [])\n                }\n            } else {\n                this.content.footer = {rows: []}\n            }\n\n            if (data.content.trackingPixels) {\n                this.content.trackingPixels = data.content.trackingPixels;\n            } else {\n                this.content.trackingPixels = []\n            }\n        } else {\n            this.content = {\n                title: null,\n                subtitle: null,\n                labels: null,\n                offset: null,\n                width: null,\n                sidebar: null,\n                scripts: [],\n                styles: [],\n                datasets: [],\n                pages: [],\n                paginate: true\n            }\n            this.content.css = {inline: null, external: null}\n            this.content.header = {rows: []}\n            this.content.footer = {rows: []}\n            this.content.trackingPixels = [];\n        }\n\n        this.layout = valueOrDefault(data.layout, \"vertical\");\n        this.formLayoutOptions = new FormLayoutOptions(data.formLayoutOptions);\n        this.itemLayoutOptions = new ItemLayoutOptions(data.itemLayoutOptions);\n    }\n\n    constructor(data: IFormProps, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n\n    @computed get isValid() : boolean {\n        return this.content.pages.every((p: Page) => {\n            return p.isValid;\n        })\n    }\n\n    @computed get numPages() : number {\n        return this.content.pages.length;\n    }\n\n    @computed get numFields() : number {\n        return this.content.pages.reduce((total: number, p: Page) => {\n            return total + p.numFields;\n        }, 0);\n    }\n\n    @action addPage(p : Page, index?: number) {\n        if (typeof index != 'undefined' && index != null && index > -1) {\n            this.content.pages.splice(index, 0, p);\n        } else {\n            this.content.pages.push(p)\n        }\n    }\n\n    @action removePage(index: number) : void {\n        this.content.pages.splice(index, 1);\n    }\n\n    @action swapPages(index1: number, index2: number): void {\n        let { pages } = this.content;\n        [pages[index1], pages[index2]] = [pages[index2], pages[index1]];\n    }\n\n    @action movePage(atIndex: number, toIndex: number) : void {\n        this.content.pages.splice(toIndex, 0, this.content.pages.splice(atIndex, 1)[0]);\n    }\n\n    @computed get isSubmittable() : boolean {\n        let validTarget =  !!this.stopSubmit ?  !this.stopSubmit : true\n        return this.errors.length == 0 && validTarget;\n    }\n\n    @computed get idFieldMap() : { [key:string]:Field; }  {\n        return this.content.pages.reduce((all: {}, s: Page)=>{\n            return {...all, ...s.idFieldMap}\n        }, {});\n    }\n\n    @computed get errors() : IValidationError[] {\n        return this.content.pages.reduce((all: any[], p: Page)=>{\n            return all.concat(p.errors);\n        }, <any[]>[]);\n    }\n\n    @computed get values() : { [key:string]: any; } {\n        return Object.keys(this.idFieldMap).reduce((all: {}, id: string) => {\n            let f: Field = this.idFieldMap[id];\n            // HTMLFragment and TextBlock have no value\n            if (f.inputType ==  'htmlfragment' || f.inputType == 'textblock') {\n                return all;\n            }\n            return {...all, [f.id]: f.value}\n        }, {});\n    }\n\n    @action.bound handleSubmit(e: FormEvent) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.store.setSubmitting(true);\n        let meta = this.idFieldMap;\n        let payload = {};\n        let values = this.values;\n        Object.keys(values).forEach((id: string) => {\n            let key = meta[id].fieldOptions.valuePropName || meta[id].name;\n            payload[key] = values[id];\n        });\n\n        if(this.isSubmittable && !!this.submitTarget) {\n            axios.post(this.submitTarget, payload).catch((reason:any) => {\n                console.log('Submit Error', reason);\n                this.submitError = \"There was an error submitting this form\";\n                if (this.successRedirect) {\n                    setTimeout(()=> {\n                        window.location.href = this.successRedirect;\n                    }, 5000);\n                }\n            }).then(() => {\n                this.store.setSubmitting(false);\n                if (this.successRedirect) {\n                    setTimeout(()=> {\n                        window.location.href = this.errorRedirect;\n                    }, 5000);\n                }\n            })\n        } else {\n            console.dir(values);\n        }\n    }\n}","import { observable, action, computed } from \"mobx\";\nimport {valueOrDefault} from \"./common\";\n\nexport type ScreenWidth = \"xs\"|\"sm\"|\"md\"|\"lg\"|\"xl\";\nexport const AllScreenWidths: ScreenWidth[] = [\"xs\",\"sm\",\"md\",\"lg\",\"xl\"];\n\nexport interface ColSpanOffset {\n    span: number;\n    offset?: number;\n}\n\nexport class LayoutOption {\n    @observable xs  : ColSpanOffset;\n    @observable sm  : ColSpanOffset;\n    @observable md  : ColSpanOffset;\n    @observable lg  : ColSpanOffset;\n    @observable xl  : ColSpanOffset;\n\n    constructor(props: {[key in ScreenWidth]?: ColSpanOffset}={}) {\n        Object.keys(props).map((width: ScreenWidth) => {\n            if(AllScreenWidths.indexOf(width) > -1 && props[width]){\n                this[width] = props[width];\n            }\n        })\n    }\n\n    @computed get unused() : ScreenWidth[] {\n        return AllScreenWidths.filter((d) => {\n            return typeof this[d] == 'undefined' || this[d] == null\n        })\n    }\n\n    @computed get used() : ScreenWidth[] {\n        return AllScreenWidths.filter((d) => {\n            return typeof this[d] != 'undefined' && this[d] != null\n        })\n    }\n\n    add(dimension: ScreenWidth, colspan: ColSpanOffset) {\n        this[dimension] = colspan;\n    }\n\n}\n\nexport interface IFormLayoutOptions {\n    showSteps?: boolean,\n    showPageTitles?: boolean,\n    showSectionTitles?: boolean,\n    showSectionBorders? : boolean,\n    showPageBorders?: boolean,\n    validationDisablesPaging?: boolean;\n    labelAlign?: \"left\" | \"right\";\n    wrapperCol?: ColSpanOffset;\n    labelCol?: ColSpanOffset;\n}\n\nexport class FormLayoutOptions implements IFormLayoutOptions {\n    @observable showSteps: boolean;\n    @observable showPageTitles: boolean\n    @observable showSectionTitles: boolean\n    @observable showSectionBorders : boolean\n    @observable showPageBorders: boolean\n    @observable validationDisablesPaging: boolean\n    @observable labelAlign: \"left\" | \"right\"\n    @observable wrapperCol: ColSpanOffset\n    @observable labelCol: ColSpanOffset\n\n    constructor(props: IFormLayoutOptions) {\n        this.initialize(props);\n    }\n\n    @action initialize(props: IFormLayoutOptions) {\n        if(!props) {\n            return;\n        }\n        this.showSteps = valueOrDefault(props.showSteps, true);\n        this.showPageTitles = valueOrDefault(props.showPageTitles, true);\n        this.showSectionTitles = valueOrDefault(props.showSectionTitles, false);\n        this.showSectionBorders = valueOrDefault(props.showSectionBorders, false);\n        this.showPageBorders = valueOrDefault(props.showPageBorders, false);\n        this.validationDisablesPaging = valueOrDefault(props.validationDisablesPaging, true);\n        this.labelAlign = valueOrDefault(props.labelAlign, \"left\");\n        this.wrapperCol = valueOrDefault(props.wrapperCol, {span: 8});\n        this.labelCol = valueOrDefault(props.labelCol, {span: 6});\n    }\n}\n\nexport interface IItemLayoutOptions {\n    labelAlign? : \"left\"|\"right\";\n    labelCol?: LayoutOption;\n    wrapperCol?: LayoutOption;\n}\n\nexport class ItemLayoutOptions {\n    @observable labelAlign : \"left\"|\"right\";\n    @observable labelCol: LayoutOption;\n    @observable wrapperCol: LayoutOption;\n\n    @action initialize(props: IItemLayoutOptions) {\n        if(!props) {\n            return;\n        }\n        this.labelAlign = valueOrDefault(props.labelAlign, \"left\");\n        this.wrapperCol = new LayoutOption(props.wrapperCol);\n        this.labelCol = new LayoutOption(props.labelCol);\n    }\n\n    constructor(props: IItemLayoutOptions) {\n        this.initialize(props);\n    }\n}","import { action, computed, observable } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { Column } from \"./column\";\nimport { valueOrDefault } from \"./common\";\nimport { Field } from \"./field\";\nimport { ISection, Section } from \"./section\";\nimport { IValidationError } from \"./validation\";\n\nexport interface IPage {\n    id: string;\n    uuid?:string;\n    name: string;\n    icon?: string;\n    sections: ISection[];\n    title?: string;\n    subtitle?: string;\n}\n\nexport class Page implements IPage {\n    readonly _type : string = \"Page\";\n    @observable id: string;\n    @observable uuid: string;\n    @observable name: string;\n    @observable icon: string;\n    @observable sections: Section[];\n    @observable title: string;\n    @observable subtitle: string;\n    store: FormStoreType;\n\n    @computed get fieldNames() : string[] {\n        let fieldNames: string[] = [];\n        if (!this.sections || this.sections.length == 0) {\n            return fieldNames;\n        }\n        this.sections.forEach((section: Section)=>{\n            if (section.columns && section.columns.length > 0) {\n                section.columns.forEach((column: Column) => {\n                    if (column.fields) {\n                        column.fields.forEach((field: Field)=> {\n                            fieldNames.push(field.name);\n                        });\n                    }\n                })\n            }\n        });\n        return fieldNames;\n    }\n\n\n    @computed get fieldIds() : string[] {\n        let fieldIds: string[] = [];\n        if (!this.sections || this.sections.length == 0) {\n            return fieldIds;\n        }\n        this.sections.forEach((section: Section)=>{\n            if (section.columns && section.columns.length > 0) {\n                section.columns.forEach((column: Column) => {\n                    if (column.fields) {\n                        column.fields.forEach((field: Field)=> {\n                            fieldIds.push(field.id);\n                        });\n                    }\n                })\n            }\n        });\n        return fieldIds;\n    }\n\n    @computed get idFieldMap() : { [key:string]:Field; }  {\n        return this.sections.reduce((all: {}, s: Section)=>{\n            return {...all, ...s.idFieldMap}\n        }, {});\n    }\n\n    @computed get errors() : IValidationError[] {\n        return this.sections.reduce((all: any[], s: Section)=>{\n            return all.concat(s.errors);\n        }, <any[]>[]);\n    }\n\n    @computed get isValid() : boolean {\n        return this.sections.every((s) => {\n            return s.isValid;\n        });\n    }\n\n    @computed get numSections() : number {\n        return this.sections.length;\n    }\n\n    @computed get numFields() : number {\n        return this.sections.reduce((total: number, s : Section) => {\n            return total + s.numFields;\n        }, 0);\n    }\n\n    @action addSection(section: Section, index?: number) : void {\n        if (typeof index != 'undefined' && index != null && index > -1) {\n            this.sections.splice(index, 0, section);\n        } else {\n            this.sections.push(section);\n        }\n    }\n\n    @action removeSection(index: number) {\n        this.sections.splice(index, 1)\n    }\n\n    @action swapSections(index1: number, index2: number): void {\n        let { sections } = this;\n        [sections[index1], sections[index2]] = [sections[index2], sections[index1]];\n    }\n\n    @action moveSection(atIndex: number, toIndex: number) {\n        this.sections.splice(toIndex, 0, this.sections.splice(atIndex, 1)[0]);\n    }\n\n    @action private initialize(data: IPage, store: FormStoreType) {\n        this.id = data.id;\n        this.store = store;\n        this.uuid = data.uuid;\n        this.name = valueOrDefault(data.name, `${this._type}-${data.id}`);\n        this.icon = valueOrDefault(data.name, \"\");\n        this.sections = valueOrDefault(<Section[]>data.sections, <Section[]>[]);\n        this.title = valueOrDefault(data.title, \"\");\n        this.subtitle = valueOrDefault(data.subtitle, \"\");\n    }\n\n    constructor (data: IPage, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n}","import { action, computed, observable } from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport { Column, IColumn } from \"./column\";\nimport { valueOrDefault } from \"./common\";\nimport { Field } from \"./field\";\nimport { IValidationError } from \"./validation\";\n\nexport interface ISection {\n    id: string;\n    uuid?:string;\n    name: string;\n    title?: string;\n    gutter?:number;\n    columns: IColumn[];\n}\n\nexport class Section implements ISection {\n    readonly _type : string = \"Section\";\n    @observable id: string;\n    @observable uuid:string;\n    @observable name: string;\n    @observable title: string;\n    @observable gutter: number;\n    @observable columns: Column[];\n    store: FormStoreType;\n\n    @computed get errors() : IValidationError[] {\n        return this.columns.reduce((all: any[], c: Column) => {\n            return all.concat(c.errors);\n        }, <any[]>[]);\n    }\n\n    @computed get numFields() : number {\n        return this.columns.reduce((total: number, column: Column) => {\n            total = total + column.numFields;\n            return total;\n        }, 0);\n    }\n\n    @action addColumn(column: Column, index?: number) : void {\n        if(!column.span) {\n            column.span = 6;\n        }\n        if (typeof index != 'undefined' && index != null && index > -1) {\n            this.columns.splice(index, 0, column);\n        } else {\n            this.columns.push(column);\n        }\n    }\n\n    @action removeColumn(index: number) {\n        this.columns.splice(index, 1)\n    }\n\n    @action swapColumns(index1: number, index2: number): void {\n        let { columns } = this;\n        [columns[index1], columns[index2]] = [columns[index2], columns[index1]];\n    }\n\n    @action moveColumn(atIndex: number, toIndex: number) {\n        this.columns.splice(toIndex, 0, this.columns.splice(atIndex, 1)[0]);\n    }\n\n    @computed get numColumns() : number {\n        return this.columns.length;\n    }\n\n    @computed get isValid() : boolean {\n        return this.columns.every((c) => {\n            return c.isValid;\n        });\n    }\n\n    @computed get idFieldMap() : { [key:string]: Field; } {\n        return this.columns.reduce((all: {}, c: Column)=>{\n            return {...all, ...c.idFieldMap}\n        }, {});\n    }\n\n    @action initialize(data: ISection, store: FormStoreType) {\n        this.id = data.id;\n        this.uuid = data.uuid;\n        this.name = valueOrDefault(data.name, `${this._type}-${data.id}`);\n        this.title = valueOrDefault(data.title, '');\n        this.gutter = valueOrDefault(data.gutter, 16);\n        this.columns = valueOrDefault(<Column[]>data.columns, <Column[]>[]);\n        this.store = store;\n    }\n\n    constructor(data: ISection, store: FormStoreType) {\n        this.initialize(data, store);\n    }\n}","import { action, computed, observable, toJS } from \"mobx\";\nimport { DateConstraint, DateTimeConstraint, EmailConstraint, EqualityConstraint, ExclusionConstraint, FormatConstraint, GenericConstraint, InclusionConstraint, LengthConstraint, NumericalityConstraint, PresenceConstraint, URLConstraint } from \"./validation.constraints\";\n\n\nexport interface IValidationRule {\n    date? : DateConstraint,\n    datetime? : DateTimeConstraint,\n    email?: EmailConstraint,\n    equality?: EqualityConstraint,\n    exclusion?: ExclusionConstraint,\n    format?: FormatConstraint,\n    inclusion?: InclusionConstraint,\n    length?: LengthConstraint,\n    numericality?: NumericalityConstraint,\n    presence?: PresenceConstraint,\n    url?: URLConstraint\n}\n\nexport const ValidationAllowedRules = {\n    \"input\"       : [\"email\", \"equality\", \"format\", \"inclusion\", \"length\", \"presence\", \"url\"],\n    \"checkbox\"    : [\"presence\"],\n    \"number\"      : [\"presence\", \"equality\", \"format\"],\n    \"select\"      : [\"presence\"],\n    \"cascader\"    : [\"presence\"],\n    \"radiogroup\"  : [\"presence\"],\n    \"checkboxgroup\": [\"presence\"],\n    \"textarea\"    : [\"email\", \"equality\", \"format\", \"inclusion\", \"length\", \"presence\", \"url\"],\n    \"daterange\"   : [\"presence\", \"date\", \"datetime\"],\n    \"datepicker\"  : [\"presence\", \"date\", \"datetime\"],\n    \"monthpicker\" : [\"presence\", \"date\", \"datetime\"],\n    \"timepicker\"  : [\"presence\", \"date\", \"datetime\"],\n    \"yearpicker\"  : [\"presence\", \"date\", \"datetime\"],\n    \"starrating\"  : [\"presence\"],\n    \"switch\"      : [\"presence\"],\n    \"transfer\"    : [\"presence\"],\n    \"slider\"      : [\"presence\"],\n    \"textblock\"   : [],\n    \"hidden\"      : [],\n    \"htmlfragment\": [],\n}\n\nexport const ValidationRuleNames = [\n    {key: \"date\", label: \"Date\", value: \"date\"},\n    {key: \"datetime\", label: \"Datetime\", value: \"datetime\"},\n    {key: \"email\", label: \"Email\", value: \"email\"},\n    {key: \"equality\", label: \"Equals\", value: \"equality\"},\n    {key: \"exclusion\", label: \"Excludes\", value: \"exclusion\"},\n    {key: \"format\", label: \"Matches\", value: \"format\"},\n    {key: \"inclusion\", label: \"Includes\", value: \"inclusion\"},\n    {key: \"length\", label: \"Length\", value: \"length\"},\n    {key: \"numericality\", label: \"Numeric\", value: \"numericality\"},\n    {key: \"presence\", label: \"Present\", value: \"presence\"},\n    {key: \"url\", label: \"URL\", value: \"url\"}\n];\n\nexport const ValidationRuleMap = {\n    \"date\": \"Date\",\n    \"datetime\": \"Datetime\",\n    \"email\": \"Email\",\n    \"equality\": \"Equals\",\n    \"exclusion\": \"Excludes\",\n    \"format\": \"Matches\",\n    \"inclusion\": \"Includes\",\n    \"length\": \"Length\",\n    \"numericality\": \"Numeric\",\n    \"presence\": \"Present\",\n    \"url\": \"URL\"\n};\n\nexport interface IValidationError {\n    id: string,\n    name: string,\n    message: string,\n    prefixedMessage: string,\n    validator: string\n}\n\nexport class ValidationRule implements IValidationRule {\n    @observable date : DateConstraint\n    @observable datetime : DateTimeConstraint\n    @observable email: EmailConstraint\n    @observable equality: EqualityConstraint\n    @observable exclusion: ExclusionConstraint\n    @observable format: FormatConstraint\n    @observable inclusion: InclusionConstraint\n    @observable length: LengthConstraint\n    @observable numericality: NumericalityConstraint\n    @observable presence: PresenceConstraint\n    @observable url: URLConstraint\n\n    constructor(rule: IValidationRule) {\n        this.initialize(rule);\n    }\n\n    @action initialize(rule: IValidationRule = {}) {\n        this.date = rule.date;\n        this.datetime = rule.datetime;\n        this.email = rule.email;\n        this.equality = rule.equality;\n        this.exclusion = rule.exclusion;\n        this.format = rule.format;\n        this.inclusion = rule.inclusion;\n        this.length = rule.length;\n        this.numericality = rule.numericality;\n        this.presence = rule.presence;\n        this.url = rule.url;\n    }\n\n    @computed get constraints() : IValidationRule {\n        let c = {};\n        Object.keys(ValidationRuleMap).forEach((rule: string) => {\n            if (this[rule]) {\n                c[rule] = toJS(this[rule]);\n            }\n        })\n        return c;\n    }\n    @action addConstraint(key: string, settings: GenericConstraint) {\n        this[key] = settings;\n    }\n\n    @action updateConstraint(key: string, settings: GenericConstraint) {\n        this[key] = settings;\n    }\n\n    @action removeConstraint(key: string) {\n        this[key] = null;\n    }\n}","import {action, decorate, observable, computed, toJS} from \"mobx\";\nimport { FormStoreType } from \"../store/FormStore\";\nimport moment from 'moment'\nimport {Field} from \"./field\";\nimport {ValidationRule, IValidationError, IValidationRule} from \"./validation\";\n\nvar validate = require(\"validate.js\");\n\nvalidate.extend(validate.validators.datetime, {\n    // The value is guaranteed not to be null or undefined but otherwise it\n    // could be anything.\n    parse: function(value, options) : number {\n      return +moment.utc(value);\n    },\n    // Input is a unix timestamp\n    format: function(value: moment.MomentInput, options: any = {}) : string {\n      var format = options.dateOnly ? \"YYYY-MM-DD\" : \"YYYY-MM-DD hh:mm:ss\";\n      return moment.utc(value).format(format);\n    }\n});\n\nexport interface IValidationProps {\n    store: FormStoreType,\n    field: Field,\n    rule: IValidationRule\n}\n\nexport class Validator {\n    store: FormStoreType;\n    field: Field;\n    @observable rule : ValidationRule;\n    @observable validationErrors: IValidationError[] = [];\n\n    @computed get isValid() : boolean {\n        return this.validationErrors.length == 0;\n    }\n\n    @computed get errors() : IValidationError[] {\n        return this.validationErrors;\n    }\n\n    formatError(errors: any): IValidationError {\n        return errors.map((e: any) => {\n            let prefixedMessage = e.error || \"\";\n            let unPrefixedMessage = e.error ? e.error.replace(`${e.attribute.toUpperCase()} `, \"\") : e.options.message;\n            return {id: this.field.id,\n                name: e.attribute,\n                message: unPrefixedMessage,\n                prefixedMessage: prefixedMessage,\n                validator: e.validator\n            };\n        });\n    }\n\n    @computed get isValidateable() {\n        let {field} = this;\n        return !field.isHidden && field.conditionState && !!this.rule && Object.keys(this.rule).length > 0;\n    }\n\n    @action validate() {\n        if (this.isValidateable == true) {\n            let {field, store} = this;\n            let {id} = field;\n            let constraints = {};\n            constraints[field.id] = this.rule.constraints;\n            validate.formatters.custom = this.formatError.bind(this);\n            let values = toJS(store.values);\n\n            this.validationErrors = validate(values, constraints, {format: \"custom\"}) || [];\n            if (this.validationErrors.length > 0) {\n                this.store.setFieldError(id, this.validationErrors[0].message);\n            } else {\n                this.store.setFieldError(id, undefined);\n            }\n        } else {\n            this.validationErrors = [];\n        }\n    }\n\n    @computed get isRequired() : boolean {\n        return !!this.rule.presence;\n    }\n\n    @action initialize(data: IValidationProps) {\n        this.rule = new ValidationRule(data.rule || {} as IValidationRule);\n        this.store = data.store;\n        this.field = data.field;\n    }\n\n    constructor(data: IValidationProps) {\n        this.initialize(data);\n    }\n}","import { observable } from \"mobx\";\nimport { IFormProps } from '..';\nimport { Factory } from \"../models/factory\";\nimport { Field } from \"../models/field\";\nimport { Form } from \"../models/form\";\nimport { Page } from \"../models/page\";\n\nexport const createFormStore = function(formData: IFormProps) {\n    const store = {\n        errors : observable({}),\n        values: observable({}),\n        touched: observable({}),\n        currentPage: observable.box(0),\n        debug : observable.box((window && window.location.hostname.indexOf('localhost') > -1) ? true : false),\n        form :<Form> null,\n        isReady: observable.box(false),\n        submitting: observable.box(false),\n        validationDisabled: observable.box(false),\n        conditionsDisabled: observable.box(false),\n        get idFieldMap() : { [key:string]:Field; } {\n            return this.form.content.pages.reduce((all: {}, p: Page) => {\n                return {...all, ...p.idFieldMap};\n            }, {});\n        },\n        get fieldNames() : string[] {\n            return this.form.content.pages.reduce((all: string[], p: Page) => {\n                return all.concat(p.fieldNames);\n            }, <string[]>[])\n        },\n        get isValid() : boolean {\n            if (!this.form.content && this.form.content.pages && this.form.content.pages.length > 0) {\n                return true;\n            } else {\n                return this.form.content.pages.every((p: Page) => {\n                    return p.isValid\n                })\n            }\n        },\n        setSubmitting(value: boolean) {\n            this.submitting.set(value)\n        },\n        get isSubmitting() : boolean {\n            return this.submitting.get();\n        },\n        get numPages() : number {\n            return this.form.content.pages.length;\n        },\n        nextPage : function () {\n            let currentPage = this.form.content.pages[this.currentPage.get()] as Page;\n            let errors = currentPage.errors;\n            let {validationDisablesPaging} = this.form.formLayoutOptions;\n            // Highlight all errors\n            currentPage.fieldIds.forEach((id: string) => {\n                this.touched[id] = true;\n            });\n            if (!errors || errors.length == 0||validationDisablesPaging == false) {\n                this.currentPage.set(this.currentPage.get() + 1);\n            }\n        },\n        prevPage : function() {\n            this.currentPage.set(this.currentPage.get() - 1);\n        },\n        setForm : function (form: Form) {\n            this.form = form;\n        },\n        setFieldValue: function (id: string, value: any) {\n            this.values[id] = value;\n        },\n        setFieldTouched: function (id: string) {\n            this.touched[id] = true;\n        },\n        setFieldError: function (id: string, error: any) {\n            this.errors[id] = error;\n        }\n    }\n    new Factory(store).makeForm(formData);\n    store.isReady.set(true);\n    return store;\n}\n\nexport type FormStoreType = ReturnType<typeof createFormStore>;","import * as React from \"react\";\nimport {FormStoreType, createFormStore} from \"./FormStore\";\nimport { useLocalStore } from \"mobx-react\";\nimport { IFormProps } from '../models/form.properties';\nimport { Factory } from '../models/factory';\nexport const formStoreContext = React.createContext<FormStoreType | null>(null);\n\nexport const FormStoreProvider: React.FC<{initialState: IFormProps}> = (props) => {\n    const store = useLocalStore(createFormStore);\n    let factory = new Factory(store);\n    store.setForm(factory.makeForm(props.initialState));\n    return (\n      <formStoreContext.Provider value={store}>\n        {props.children}\n      </formStoreContext.Provider>\n    )\n}","module.exports = antd;","module.exports = moment;","module.exports = React;","module.exports = ReactDOM;"],"sourceRoot":""}