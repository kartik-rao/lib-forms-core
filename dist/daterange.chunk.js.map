{"version":3,"sources":["webpack://Forms/./src/views/controls/DateRangeView.tsx"],"names":["DateRangeView","props","component","field","componentProps","dateFormat","mode","defaultStartValue","defaultEndValue","localStore","defaultStart","defaultEnd","defaultValue","dateMode","HTML5_FMT","DATE","MONTH","TIME","_onChange","e","v","target","value","onChange","format","fallback","id","className","style","marginRight","RangePicker"],"mappings":";;;;mEACA,+QAkGO,MAAMA,EAAuCC,IAChD,IAAIC,EAAYD,EAAME,MAAMC,gBACxB,WAACC,EAAU,KAAEC,EAAI,kBAAEC,EAAiB,gBAAEC,GAAoBP,EAAME,MAAMC,eAE1E,MAAMK,EAAa,wBAAc,KACtB,CACH,YAAwB,MAAO,CAACA,EAAWC,aAAcD,EAAWE,aACpEC,aAAcV,EAAUU,aACxBC,SAAYP,GAAc,OAC1BI,aAAiBH,EAAoB,IAAOA,EAAmBF,GAAc,KAC7EM,WAAgBH,EAAkB,IAAOA,EAAiBH,GAAc,KACxE,iBACI,OAAQH,EAAUI,MACd,IAAK,OACD,OAAO,IAAOQ,UAAUC,KAE5B,IAAK,QACD,OAAO,IAAOD,UAAUE,MAE5B,IAAK,OAGL,IAAK,OACD,OAAO,IAAOF,UAAUG,KAG5B,QAAU,OAAO,IAAOH,UAAUC,UAMlD,IAAIG,EAAaC,IACb,IAAIC,EAAID,EAAEE,OAASF,EAAEE,OAAOC,MAAQH,EACpCC,EAAInB,EAAMsB,SAAS,IAAOH,GAAGI,OAAOf,EAAWJ,aAAeJ,EAAMsB,SAAS,OAGjF,OAAO,sBAAY,IACR,gBAAC,WAAc,CAACE,SAAS,IAC5B,wBAAMC,GAAI,GAAGzB,EAAME,MAAMuB,WAAYC,UAAU,2BAA2BC,MAAO,CAACC,YAAa,QAC/F,gBAAC,UAAWC,YAAW,CAACP,SAAUL,EAAWM,OAAQf,EAAWJ","file":"daterange.chunk.js","sourcesContent":["import {toJS, observe, computed} from 'mobx';\nimport { observer, useLocalStore, useObserver } from \"mobx-react\";\nimport moment, { Moment } from 'moment'\nimport * as React from \"react\";\nimport { IViewProps } from \"./IViewProps\";\nimport { IDateRangeProps } from \"../../models/field.properties\";\nimport { useDisposable } from 'mobx-react-lite';\n\n// @observer\n// export class DateRangeView extends React.Component<IViewProps, any> {\n\n//     constructor(props: any) {\n//         super(props);\n\n//         let {dateFormat, mode, defaultStartValue, defaultEndValue} = (this.props.field.componentProps as IDateRangeProps);\n\n//         let dateMode= (mode ? mode : 'date') as \"time\"|\"date\"|\"month\"|\"year\";\n//         if (!dateFormat) {\n//             switch (mode) {\n//                 case 'date' : {\n//                     dateFormat = moment.HTML5_FMT.DATE;\n//                     break;\n//                 }\n//                 case 'month' : {\n//                     dateFormat = moment.HTML5_FMT.MONTH;\n//                     break;\n//                 }\n//                 case 'time' : {\n//                     dateFormat = moment.HTML5_FMT.TIME;\n//                     break;\n//                 }\n//                 case 'year' : {\n//                     dateFormat = moment.HTML5_FMT.TIME;\n//                     break;\n//                 }\n//             }\n//         }\n\n//         let defaultStart = !!defaultStartValue ? moment(defaultStartValue, dateFormat) : null;\n//         let defaultEnd  = !!defaultEndValue ? moment(defaultEndValue, dateFormat) : null;\n//         let {minStartDate} = this.props.field.componentProps as IDateRangeProps;\n\n//         let minStart: moment.Moment;\n//         if (minStartDate) {\n//             minStart = moment().add(toJS(minStartDate.relative))\n//         }\n\n//         let disposer = observe(props.field, \"componentProps\", (change) => {\n//             let props = change.newValue;\n//             let newState = {};\n//             if (props.dateFormat) {\n//                 newState['dateFormat'] = props.dateFormat;\n//             }\n//             if(props.defaultStart) {\n//                 newState['dates'] = this.state.defaultValue.splice()\n//             }\n//             if(props) {\n//                 this.setState({\n//                     'minStart' : moment().add(toJS(change.newValue.relative)),\n//                 })\n//             } else {\n//                 this.setState({'minStart' : null})\n//             }\n//         });\n\n//         this.state = {\n//             defaultValue: [defaultStart, defaultEnd],\n//             dates: [defaultStart, defaultEnd],\n//             mode: dateMode,\n//             dateFormat: dateFormat,\n//             minStart: minStart,\n//             disposer: disposer\n//         }\n//     }\n\n//     componentWillUnmount() {\n//         this.state.disposer();\n//     }\n\n//     onChange = (dates: moment.Moment[], dateStrings: string[]) => {\n//         this.setState({\"dates\": dates})\n//         let {startValuePropsName, endValuePropsName} = this.props.field.componentProps as IDateRangeProps;\n//         this.props.onChange({[startValuePropsName] : dateStrings[0], [endValuePropsName]: dateStrings[1]});\n//     }\n\n//     render() {\n//         let {field} = this.props;\n        // return <span id={`${field.id}-start`} className=\"fl-daterange-field-start\" style={{marginRight: '5px'}} >\n        //     <DatePicker.RangePicker\n        //         onChange={this.onChange}\n        //         format={this.state.dateFormat}\n        //         />\n        // </span>\n//     }\n// }\n\n\nimport DatePicker from 'antd/es/date-picker';\n\nexport const DateRangeView: React.FC<IViewProps> = (props) => {\n    let component = props.field.componentProps as IDateRangeProps;\n    let {dateFormat, mode, defaultStartValue, defaultEndValue} = (props.field.componentProps as IDateRangeProps);\n\n    const localStore = useLocalStore(() => {\n        return {\n            get dates(): Moment[]  {return [localStore.defaultStart, localStore.defaultEnd]},\n            defaultValue: component.defaultValue,\n            dateMode : (mode ? mode : 'date') as \"time\"|\"date\"|\"month\"|\"year\",\n            defaultStart : !!defaultStartValue ? moment(defaultStartValue, dateFormat) : null,\n            defaultEnd  : !!defaultEndValue ? moment(defaultEndValue, dateFormat) : null,\n            get dateFormat() : string {\n                switch (component.mode) {\n                    case 'date' : {\n                        return moment.HTML5_FMT.DATE;\n                    }\n                    case 'month' : {\n                        return moment.HTML5_FMT.MONTH;\n                    }\n                    case 'time' : {\n                        return moment.HTML5_FMT.TIME;\n                    }\n                    case 'year' : {\n                        return moment.HTML5_FMT.TIME;\n                    }\n\n                    default : return moment.HTML5_FMT.DATE;\n                }\n            }\n        }\n    });\n\n    let _onChange = (e) => {\n        let v = e.target ? e.target.value : e;\n        v ? props.onChange(moment(v).format(localStore.dateFormat)) : props.onChange(null);\n    };\n\n    return useObserver(() => {\n        return <React.Suspense fallback=\"\">\n            <span id={`${props.field.id}-start`} className=\"fl-daterange-field-start\" style={{marginRight: '5px'}} >\n            <DatePicker.RangePicker onChange={_onChange} format={localStore.dateFormat}/>\n            </span>\n        </React.Suspense>\n    });\n};"],"sourceRoot":""}