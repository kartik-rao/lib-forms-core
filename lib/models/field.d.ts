import { FormStoreType } from "../store/FormStore";
import { Condition, ICondition } from "./condition";
import { IFieldOptions } from "./field.options";
import { IComponentProps, IFieldProps, IFieldRuntimeProps, IFieldStorage } from "./field.properties";
import { ItemLayoutOptions } from './layout';
import { IValidationRule } from "./validation";
import { Validator } from "./validator";
export declare class Field implements IFieldProps, IFieldRuntimeProps {
    readonly _type: string;
    uuid: string;
    id: string;
    name: string;
    type: string;
    label: string;
    value: any;
    touched: boolean;
    inputType: string;
    helpText: string;
    placeholder: string;
    fieldOptions: IFieldOptions;
    children: any;
    condition: Condition;
    storage: IFieldStorage;
    store: FormStoreType;
    location: any;
    conditionState: boolean;
    validator: Validator;
    validation: IValidationRule;
    componentProps: IComponentProps;
    itemLayoutOptions: ItemLayoutOptions;
    _dispose: any;
    mergeUpdate(data: Partial<IFieldProps>): void;
    initialize(data: IFieldProps, store: FormStoreType): void;
    readonly className: string;
    readonly isTouched: boolean;
    readonly isValidateable: boolean;
    readonly isValid: boolean;
    readonly isHidden: boolean;
    readonly isRequired: boolean;
    readonly currentValue: any;
    readonly isDisabled: boolean;
    setValue(value: any): void;
    setTouched(): void;
    setConditionState(value: boolean): void;
    setCondition(condition: ICondition): void;
    validate(): void;
    readonly serialize: string;
    constructor(data: IFieldProps, store: FormStoreType);
}
